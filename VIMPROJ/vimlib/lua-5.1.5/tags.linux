!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_A	src/Makefile	/^ALL_A= $(LUA_A)$/;"	m
ALL_O	src/Makefile	/^ALL_O= $(CORE_O) $(LIB_O) $(LUA_O) $(LUAC_O)$/;"	m
ALL_T	src/Makefile	/^ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T)$/;"	m
AR	src/Makefile	/^AR= ar rcu$/;"	m
AUXMARK	src/loadlib.c	/^#define AUXMARK	/;"	d	file:
Arith	src/lvm.c	/^static void Arith (lua_State *L, StkId ra, const TValue *rb,$/;"	f	file:	signature:(lua_State *L, StkId ra, const TValue *rb, const TValue *rc, TMS op)
BASIC_CI_SIZE	src/lstate.h	/^#define BASIC_CI_SIZE /;"	d
BASIC_STACK_SIZE	src/lstate.h	/^#define BASIC_STACK_SIZE /;"	d
BITRK	src/lopcodes.h	/^#define BITRK	/;"	d
BLACKBIT	src/lgc.h	/^#define BLACKBIT	/;"	d
BinOpr	src/lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	src/lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BlockCnt	src/lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	src/lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
BlockCnt::breaklist	src/lparser.c	/^  int breaklist;  \/* list of jumps out of this loop *\/$/;"	m	struct:BlockCnt	file:	access:public
BlockCnt::isbreakable	src/lparser.c	/^  lu_byte isbreakable;  \/* true if `block' is a loop *\/$/;"	m	struct:BlockCnt	file:	access:public
BlockCnt::nactvar	src/lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the breakable structure *\/$/;"	m	struct:BlockCnt	file:	access:public
BlockCnt::previous	src/lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:	access:public
BlockCnt::upval	src/lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:	access:public
CAP_POSITION	src/lstrlib.c	/^#define CAP_POSITION	/;"	d	file:
CAP_UNFINISHED	src/lstrlib.c	/^#define CAP_UNFINISHED	/;"	d	file:
CC	src/Makefile	/^CC= gcc$/;"	m
CCallS	src/lapi.c	/^struct CCallS {  \/* data to `f_Ccall' *\/$/;"	s	file:
CCallS::func	src/lapi.c	/^  lua_CFunction func;$/;"	m	struct:CCallS	file:	access:public
CCallS::ud	src/lapi.c	/^  void *ud;$/;"	m	struct:CCallS	file:	access:public
CClosure	src/lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	src/lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CClosure::ClosureHeader	src/lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure	access:public
CClosure::f	src/lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure	access:public
CClosure::upvalue	src/lobject.h	/^  TValue upvalue[1];$/;"	m	struct:CClosure	access:public
CFLAGS	src/Makefile	/^CFLAGS= -O2 -Wall $(MYCFLAGS)$/;"	m
CORE_O	src/Makefile	/^CORE_O=	lapi.o lcode.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o lmem.o \\$/;"	m
CO_DEAD	src/lbaselib.c	/^#define CO_DEAD	/;"	d	file:
CO_NOR	src/lbaselib.c	/^#define CO_NOR	/;"	d	file:
CO_RUN	src/lbaselib.c	/^#define CO_RUN	/;"	d	file:
CO_SUS	src/lbaselib.c	/^#define CO_SUS	/;"	d	file:
CREATE_ABC	src/lopcodes.h	/^#define CREATE_ABC(/;"	d
CREATE_ABx	src/lopcodes.h	/^#define CREATE_ABx(/;"	d
CallInfo	src/lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	src/lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallInfo::base	src/lstate.h	/^  StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo	access:public
CallInfo::func	src/lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo	access:public
CallInfo::nresults	src/lstate.h	/^  int nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo	access:public
CallInfo::savedpc	src/lstate.h	/^  const Instruction *savedpc;$/;"	m	struct:CallInfo	access:public
CallInfo::tailcalls	src/lstate.h	/^  int tailcalls;  \/* number of tail calls lost under this entry *\/$/;"	m	struct:CallInfo	access:public
CallInfo::top	src/lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo	access:public
CallS	src/lapi.c	/^struct CallS {  \/* data to `f_call' *\/$/;"	s	file:
CallS::func	src/lapi.c	/^  StkId func;$/;"	m	struct:CallS	file:	access:public
CallS::nresults	src/lapi.c	/^  int nresults;$/;"	m	struct:CallS	file:	access:public
Closure	src/lobject.h	/^typedef union Closure {$/;"	u
Closure	src/lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
Closure::c	src/lobject.h	/^  CClosure c;$/;"	m	union:Closure	access:public
Closure::l	src/lobject.h	/^  LClosure l;$/;"	m	union:Closure	access:public
ClosureHeader	src/lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure	access:public
ClosureHeader	src/lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure	access:public
ClosureHeader	src/lobject.h	/^#define ClosureHeader /;"	d
CommonHeader	src/lobject.h	/^    CommonHeader;$/;"	m	struct:TString::__anon4	access:public
CommonHeader	src/lobject.h	/^    CommonHeader;$/;"	m	struct:Udata::__anon5	access:public
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:GCheader	access:public
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:Proto	access:public
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:Table	access:public
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:UpVal	access:public
CommonHeader	src/lobject.h	/^#define CommonHeader	/;"	d
CommonHeader	src/lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State	access:public
ConsControl	src/lparser.c	/^struct ConsControl {$/;"	s	file:
ConsControl::na	src/lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:	access:public
ConsControl::nh	src/lparser.c	/^  int nh;  \/* total number of `record' elements *\/$/;"	m	struct:ConsControl	file:	access:public
ConsControl::t	src/lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:	access:public
ConsControl::tostore	src/lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:	access:public
ConsControl::v	src/lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:	access:public
DLMSG	src/loadlib.c	/^#define DLMSG	/;"	d	file:
DumpBlock	src/ldump.c	/^static void DumpBlock(const void* b, size_t size, DumpState* D)$/;"	f	file:	signature:(const void* b, size_t size, DumpState* D)
DumpChar	src/ldump.c	/^static void DumpChar(int y, DumpState* D)$/;"	f	file:	signature:(int y, DumpState* D)
DumpCode	src/ldump.c	/^#define DumpCode(/;"	d	file:
DumpConstants	src/ldump.c	/^static void DumpConstants(const Proto* f, DumpState* D)$/;"	f	file:	signature:(const Proto* f, DumpState* D)
DumpDebug	src/ldump.c	/^static void DumpDebug(const Proto* f, DumpState* D)$/;"	f	file:	signature:(const Proto* f, DumpState* D)
DumpFunction	src/ldump.c	/^static void DumpFunction(const Proto* f, const TString* p, DumpState* D)$/;"	f	file:	signature:(const Proto* f, const TString* p, DumpState* D)
DumpFunction	src/ldump.c	/^static void DumpFunction(const Proto* f, const TString* p, DumpState* D);$/;"	p	file:	signature:(const Proto* f, const TString* p, DumpState* D)
DumpHeader	src/ldump.c	/^static void DumpHeader(DumpState* D)$/;"	f	file:	signature:(DumpState* D)
DumpInt	src/ldump.c	/^static void DumpInt(int x, DumpState* D)$/;"	f	file:	signature:(int x, DumpState* D)
DumpMem	src/ldump.c	/^#define DumpMem(/;"	d	file:
DumpNumber	src/ldump.c	/^static void DumpNumber(lua_Number x, DumpState* D)$/;"	f	file:	signature:(lua_Number x, DumpState* D)
DumpState	src/ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon1	file:
DumpString	src/ldump.c	/^static void DumpString(const TString* s, DumpState* D)$/;"	f	file:	signature:(const TString* s, DumpState* D)
DumpVar	src/ldump.c	/^#define DumpVar(/;"	d	file:
DumpVector	src/ldump.c	/^static void DumpVector(const void* b, int n, size_t size, DumpState* D)$/;"	f	file:	signature:(const void* b, int n, size_t size, DumpState* D)
EOZ	src/lzio.h	/^#define EOZ	/;"	d
ERRFUNC	src/loadlib.c	/^#define ERRFUNC	/;"	d	file:
ERRLIB	src/loadlib.c	/^#define ERRLIB	/;"	d	file:
EXTRA_STACK	src/lstate.h	/^#define EXTRA_STACK /;"	d
FINALIZEDBIT	src/lgc.h	/^#define FINALIZEDBIT	/;"	d
FIRST_RESERVED	src/llex.h	/^#define FIRST_RESERVED	/;"	d
FIXEDBIT	src/lgc.h	/^#define FIXEDBIT	/;"	d
FLAGS	src/lstrlib.c	/^#define FLAGS	/;"	d	file:
FREELIST_REF	src/lauxlib.c	/^#define FREELIST_REF	/;"	d	file:
FuncState	src/lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	src/lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
FuncState::L	src/lparser.h	/^  struct lua_State *L;  \/* copy of the Lua state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::lua_State	access:public
FuncState::actvar	src/lparser.h	/^  unsigned short actvar[LUAI_MAXVARS];  \/* declared-variable stack *\/$/;"	m	struct:FuncState	access:public
FuncState::bl	src/lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt	access:public
FuncState::f	src/lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState	access:public
FuncState::freereg	src/lparser.h	/^  int freereg;  \/* first free register *\/$/;"	m	struct:FuncState	access:public
FuncState::h	src/lparser.h	/^  Table *h;  \/* table to find (and reuse) elements in `k' *\/$/;"	m	struct:FuncState	access:public
FuncState::jpc	src/lparser.h	/^  int jpc;  \/* list of pending jumps to `pc' *\/$/;"	m	struct:FuncState	access:public
FuncState::lasttarget	src/lparser.h	/^  int lasttarget;   \/* `pc' of last `jump target' *\/$/;"	m	struct:FuncState	access:public
FuncState::ls	src/lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState	access:public
FuncState::nactvar	src/lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState	access:public
FuncState::nk	src/lparser.h	/^  int nk;  \/* number of elements in `k' *\/$/;"	m	struct:FuncState	access:public
FuncState::nlocvars	src/lparser.h	/^  short nlocvars;  \/* number of elements in `locvars' *\/$/;"	m	struct:FuncState	access:public
FuncState::np	src/lparser.h	/^  int np;  \/* number of elements in `p' *\/$/;"	m	struct:FuncState	access:public
FuncState::pc	src/lparser.h	/^  int pc;  \/* next position to code (equivalent to `ncode') *\/$/;"	m	struct:FuncState	access:public
FuncState::prev	src/lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState	access:public
FuncState::upvalues	src/lparser.h	/^  upvaldesc upvalues[LUAI_MAXUPVALUES];  \/* upvalues *\/$/;"	m	struct:FuncState	access:public
G	src/lstate.h	/^#define G(/;"	d
GCFINALIZECOST	src/lgc.c	/^#define GCFINALIZECOST	/;"	d	file:
GCObject	src/lobject.h	/^typedef union GCObject GCObject;$/;"	t	typeref:union:GCObject
GCObject	src/lstate.h	/^union GCObject {$/;"	u
GCObject::cl	src/lstate.h	/^  union Closure cl;$/;"	m	union:GCObject	typeref:union:GCObject::Closure	access:public
GCObject::gch	src/lstate.h	/^  GCheader gch;$/;"	m	union:GCObject	access:public
GCObject::h	src/lstate.h	/^  struct Table h;$/;"	m	union:GCObject	typeref:struct:GCObject::Table	access:public
GCObject::p	src/lstate.h	/^  struct Proto p;$/;"	m	union:GCObject	typeref:struct:GCObject::Proto	access:public
GCObject::th	src/lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCObject	typeref:struct:GCObject::lua_State	access:public
GCObject::ts	src/lstate.h	/^  union TString ts;$/;"	m	union:GCObject	typeref:union:GCObject::TString	access:public
GCObject::u	src/lstate.h	/^  union Udata u;$/;"	m	union:GCObject	typeref:union:GCObject::Udata	access:public
GCObject::uv	src/lstate.h	/^  struct UpVal uv;$/;"	m	union:GCObject	typeref:struct:GCObject::UpVal	access:public
GCSTEPSIZE	src/lgc.c	/^#define GCSTEPSIZE	/;"	d	file:
GCSWEEPCOST	src/lgc.c	/^#define GCSWEEPCOST	/;"	d	file:
GCSWEEPMAX	src/lgc.c	/^#define GCSWEEPMAX	/;"	d	file:
GCSfinalize	src/lgc.h	/^#define GCSfinalize	/;"	d
GCSpause	src/lgc.h	/^#define GCSpause	/;"	d
GCSpropagate	src/lgc.h	/^#define GCSpropagate	/;"	d
GCSsweep	src/lgc.h	/^#define GCSsweep	/;"	d
GCSsweepstring	src/lgc.h	/^#define GCSsweepstring	/;"	d
GCTM	src/lgc.c	/^static void GCTM (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
GCheader	src/lobject.h	/^typedef struct GCheader {$/;"	s
GCheader	src/lobject.h	/^} GCheader;$/;"	t	typeref:struct:GCheader
GCheader::CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:GCheader	access:public
GCthreshold	src/lstate.h	/^  lu_mem GCthreshold;$/;"	m	struct:global_State	access:public
GETARG_A	src/lopcodes.h	/^#define GETARG_A(/;"	d
GETARG_B	src/lopcodes.h	/^#define GETARG_B(/;"	d
GETARG_Bx	src/lopcodes.h	/^#define GETARG_Bx(/;"	d
GETARG_C	src/lopcodes.h	/^#define GETARG_C(/;"	d
GETARG_sBx	src/lopcodes.h	/^#define GETARG_sBx(/;"	d
GET_OPCODE	src/lopcodes.h	/^#define GET_OPCODE(/;"	d
IF	src/lundump.c	/^#define IF(/;"	d	file:
INDEXK	src/lopcodes.h	/^#define INDEXK(/;"	d
IO_INPUT	src/liolib.c	/^#define IO_INPUT	/;"	d	file:
IO_OUTPUT	src/liolib.c	/^#define IO_OUTPUT	/;"	d	file:
IS	src/luac.c	/^#define	IS(/;"	d	file:
ISK	src/lopcodes.h	/^#define ISK(/;"	d
Instruction	src/llimits.h	/^typedef lu_int32 Instruction;$/;"	t
IntPoint	src/llimits.h	/^#define IntPoint(/;"	d
KBx	src/lvm.c	/^#define KBx(/;"	d	file:
KEYWEAK	src/lgc.c	/^#define KEYWEAK /;"	d	file:
KEYWEAKBIT	src/lgc.h	/^#define KEYWEAKBIT	/;"	d
KEY_HOOK	src/ldblib.c	/^static const char KEY_HOOK = 'h';$/;"	v	file:
L	src/lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer	access:public
L	src/ldump.c	/^ lua_State* L;$/;"	m	struct:__anon1	file:	access:public
L	src/llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State	access:public
L	src/lparser.h	/^  struct lua_State *L;  \/* copy of the Lua state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::lua_State	access:public
L	src/lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:	access:public
L	src/lundump.c	/^ lua_State* L;$/;"	m	struct:__anon16	file:	access:public
L	src/lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio	access:public
LAST_TAG	src/lobject.h	/^#define LAST_TAG	/;"	d
LClosure	src/lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	src/lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LClosure::ClosureHeader	src/lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure	access:public
LClosure::p	src/lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto	access:public
LClosure::upvals	src/lobject.h	/^  UpVal *upvals[1];$/;"	m	struct:LClosure	access:public
LEVELS1	src/ldblib.c	/^#define LEVELS1	/;"	d	file:
LEVELS2	src/ldblib.c	/^#define LEVELS2	/;"	d	file:
LFIELDS_PER_FLUSH	src/lopcodes.h	/^#define LFIELDS_PER_FLUSH	/;"	d
LG	src/lstate.c	/^typedef struct LG {$/;"	s	file:
LG	src/lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LG::g	src/lstate.c	/^  global_State g;$/;"	m	struct:LG	file:	access:public
LG::l	src/lstate.c	/^  lua_State l;$/;"	m	struct:LG	file:	access:public
LHS_assign	src/lparser.c	/^struct LHS_assign {$/;"	s	file:
LHS_assign::prev	src/lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:	access:public
LHS_assign::v	src/lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:	access:public
LIBPREFIX	src/loadlib.c	/^#define LIBPREFIX	/;"	d	file:
LIBS	src/Makefile	/^LIBS= -lm $(MYLIBS)$/;"	m
LIB_FAIL	src/loadlib.c	/^#define LIB_FAIL	/;"	d	file:
LIB_FAIL	src/loadlib.c	/^#undef LIB_FAIL$/;"	d	file:
LIB_O	src/Makefile	/^LIB_O=	lauxlib.o lbaselib.o ldblib.o liolib.o lmathlib.o loslib.o ltablib.o \\$/;"	m
LIMIT	src/lauxlib.c	/^#define LIMIT	/;"	d	file:
LUAC_FORMAT	src/lundump.h	/^#define LUAC_FORMAT	/;"	d
LUAC_HEADERSIZE	src/lundump.h	/^#define LUAC_HEADERSIZE	/;"	d
LUAC_O	src/Makefile	/^LUAC_O=	luac.o print.o$/;"	m
LUAC_T	src/Makefile	/^LUAC_T=	luac$/;"	m
LUAC_VERSION	src/lundump.h	/^#define LUAC_VERSION	/;"	d
LUAI_BITSINT	src/luaconf.h	/^#define LUAI_BITSINT	/;"	d
LUAI_DATA	src/luaconf.h	/^#define LUAI_DATA	/;"	d
LUAI_EXTRASPACE	src/luaconf.h	/^#define LUAI_EXTRASPACE	/;"	d
LUAI_FUNC	src/luaconf.h	/^#define LUAI_FUNC	/;"	d
LUAI_GCMUL	src/luaconf.h	/^#define LUAI_GCMUL	/;"	d
LUAI_GCPAUSE	src/luaconf.h	/^#define LUAI_GCPAUSE	/;"	d
LUAI_INT32	src/luaconf.h	/^#define LUAI_INT32	/;"	d
LUAI_MAXCALLS	src/luaconf.h	/^#define LUAI_MAXCALLS	/;"	d
LUAI_MAXCCALLS	src/luaconf.h	/^#define LUAI_MAXCCALLS	/;"	d
LUAI_MAXCSTACK	src/luaconf.h	/^#define LUAI_MAXCSTACK	/;"	d
LUAI_MAXINT32	src/luaconf.h	/^#define LUAI_MAXINT32	/;"	d
LUAI_MAXNUMBER2STR	src/luaconf.h	/^#define LUAI_MAXNUMBER2STR	/;"	d
LUAI_MAXUPVALUES	src/luaconf.h	/^#define LUAI_MAXUPVALUES	/;"	d
LUAI_MAXVARS	src/luaconf.h	/^#define LUAI_MAXVARS	/;"	d
LUAI_MEM	src/luaconf.h	/^#define LUAI_MEM	/;"	d
LUAI_THROW	src/luaconf.h	/^#define LUAI_THROW(/;"	d
LUAI_TRY	src/luaconf.h	/^#define LUAI_TRY(/;"	d
LUAI_UACNUMBER	src/luaconf.h	/^#define LUAI_UACNUMBER	/;"	d
LUAI_UINT32	src/luaconf.h	/^#define LUAI_UINT32	/;"	d
LUAI_UMEM	src/luaconf.h	/^#define LUAI_UMEM	/;"	d
LUAI_USER_ALIGNMENT_T	src/luaconf.h	/^#define LUAI_USER_ALIGNMENT_T	/;"	d
LUALIB_API	src/luaconf.h	/^#define LUALIB_API	/;"	d
LUAL_BUFFERSIZE	src/luaconf.h	/^#define LUAL_BUFFERSIZE	/;"	d
LUA_A	src/Makefile	/^LUA_A=	liblua.a$/;"	m
LUA_ANSI	src/luaconf.h	/^#define LUA_ANSI$/;"	d
LUA_API	src/luaconf.h	/^#define LUA_API	/;"	d
LUA_API	src/luaconf.h	/^#define LUA_API /;"	d
LUA_AUTHORS	src/lua.h	/^#define LUA_AUTHORS /;"	d
LUA_CDIR	src/luaconf.h	/^#define LUA_CDIR	/;"	d
LUA_COLIBNAME	src/lualib.h	/^#define LUA_COLIBNAME	/;"	d
LUA_COMPAT_GETN	src/luaconf.h	/^#undef LUA_COMPAT_GETN$/;"	d
LUA_COMPAT_GFIND	src/luaconf.h	/^#define LUA_COMPAT_GFIND$/;"	d
LUA_COMPAT_LOADLIB	src/luaconf.h	/^#undef LUA_COMPAT_LOADLIB$/;"	d
LUA_COMPAT_LSTR	src/luaconf.h	/^#define LUA_COMPAT_LSTR	/;"	d
LUA_COMPAT_MOD	src/luaconf.h	/^#define LUA_COMPAT_MOD$/;"	d
LUA_COMPAT_OPENLIB	src/luaconf.h	/^#define LUA_COMPAT_OPENLIB$/;"	d
LUA_COMPAT_VARARG	src/luaconf.h	/^#define LUA_COMPAT_VARARG$/;"	d
LUA_COPYRIGHT	src/lua.h	/^#define LUA_COPYRIGHT	/;"	d
LUA_CORE	src/lapi.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lcode.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/ldebug.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/ldo.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/ldump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lfunc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lgc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/llex.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lmem.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lobject.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lopcodes.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lparser.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lstate.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lstring.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/ltable.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/ltm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/luac.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lundump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lvm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/lzio.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	src/print.c	/^#define LUA_CORE$/;"	d	file:
LUA_CPATH	src/luaconf.h	/^#define LUA_CPATH /;"	d
LUA_CPATH_DEFAULT	src/luaconf.h	/^#define LUA_CPATH_DEFAULT /;"	d
LUA_DBLIBNAME	src/lualib.h	/^#define LUA_DBLIBNAME	/;"	d
LUA_DIRSEP	src/luaconf.h	/^#define LUA_DIRSEP	/;"	d
LUA_DL_DLL	src/luaconf.h	/^#define LUA_DL_DLL$/;"	d
LUA_DL_DLOPEN	src/luaconf.h	/^#define LUA_DL_DLOPEN$/;"	d
LUA_DL_DYLD	src/luaconf.h	/^#define LUA_DL_DYLD	/;"	d
LUA_ENVIRONINDEX	src/lua.h	/^#define LUA_ENVIRONINDEX	/;"	d
LUA_ERRERR	src/lua.h	/^#define LUA_ERRERR	/;"	d
LUA_ERRFILE	src/lauxlib.h	/^#define LUA_ERRFILE /;"	d
LUA_ERRMEM	src/lua.h	/^#define LUA_ERRMEM	/;"	d
LUA_ERRRUN	src/lua.h	/^#define LUA_ERRRUN	/;"	d
LUA_ERRSYNTAX	src/lua.h	/^#define LUA_ERRSYNTAX	/;"	d
LUA_EXECDIR	src/luaconf.h	/^#define LUA_EXECDIR	/;"	d
LUA_FILEHANDLE	src/lualib.h	/^#define LUA_FILEHANDLE	/;"	d
LUA_GCCOLLECT	src/lua.h	/^#define LUA_GCCOLLECT	/;"	d
LUA_GCCOUNT	src/lua.h	/^#define LUA_GCCOUNT	/;"	d
LUA_GCCOUNTB	src/lua.h	/^#define LUA_GCCOUNTB	/;"	d
LUA_GCRESTART	src/lua.h	/^#define LUA_GCRESTART	/;"	d
LUA_GCSETPAUSE	src/lua.h	/^#define LUA_GCSETPAUSE	/;"	d
LUA_GCSETSTEPMUL	src/lua.h	/^#define LUA_GCSETSTEPMUL	/;"	d
LUA_GCSTEP	src/lua.h	/^#define LUA_GCSTEP	/;"	d
LUA_GCSTOP	src/lua.h	/^#define LUA_GCSTOP	/;"	d
LUA_GLOBALSINDEX	src/lua.h	/^#define LUA_GLOBALSINDEX	/;"	d
LUA_HOOKCALL	src/lua.h	/^#define LUA_HOOKCALL	/;"	d
LUA_HOOKCOUNT	src/lua.h	/^#define LUA_HOOKCOUNT	/;"	d
LUA_HOOKLINE	src/lua.h	/^#define LUA_HOOKLINE	/;"	d
LUA_HOOKRET	src/lua.h	/^#define LUA_HOOKRET	/;"	d
LUA_HOOKTAILRET	src/lua.h	/^#define LUA_HOOKTAILRET /;"	d
LUA_IDSIZE	src/luaconf.h	/^#define LUA_IDSIZE	/;"	d
LUA_IGMARK	src/luaconf.h	/^#define LUA_IGMARK	/;"	d
LUA_INIT	src/luaconf.h	/^#define LUA_INIT	/;"	d
LUA_INTEGER	src/luaconf.h	/^#define LUA_INTEGER	/;"	d
LUA_INTFRMLEN	src/luaconf.h	/^#define LUA_INTFRMLEN	/;"	d
LUA_INTFRM_T	src/luaconf.h	/^#define LUA_INTFRM_T	/;"	d
LUA_IOLIBNAME	src/lualib.h	/^#define LUA_IOLIBNAME	/;"	d
LUA_LDIR	src/luaconf.h	/^#define LUA_LDIR	/;"	d
LUA_LIB	src/lauxlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/lbaselib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/ldblib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/linit.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/liolib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/lmathlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/loadlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/loslib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/lstrlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	src/ltablib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LOADLIBNAME	src/lualib.h	/^#define LUA_LOADLIBNAME	/;"	d
LUA_MASKCALL	src/lua.h	/^#define LUA_MASKCALL	/;"	d
LUA_MASKCOUNT	src/lua.h	/^#define LUA_MASKCOUNT	/;"	d
LUA_MASKLINE	src/lua.h	/^#define LUA_MASKLINE	/;"	d
LUA_MASKRET	src/lua.h	/^#define LUA_MASKRET	/;"	d
LUA_MATHLIBNAME	src/lualib.h	/^#define LUA_MATHLIBNAME	/;"	d
LUA_MAXCAPTURES	src/luaconf.h	/^#define LUA_MAXCAPTURES	/;"	d
LUA_MAXINPUT	src/luaconf.h	/^#define LUA_MAXINPUT	/;"	d
LUA_MINBUFFER	src/llimits.h	/^#define LUA_MINBUFFER	/;"	d
LUA_MINSTACK	src/lua.h	/^#define LUA_MINSTACK	/;"	d
LUA_MULTRET	src/lua.h	/^#define LUA_MULTRET	/;"	d
LUA_NOREF	src/lauxlib.h	/^#define LUA_NOREF /;"	d
LUA_NUMBER	src/luaconf.h	/^#define LUA_NUMBER	/;"	d
LUA_NUMBER_DOUBLE	src/luaconf.h	/^#define LUA_NUMBER_DOUBLE$/;"	d
LUA_NUMBER_FMT	src/luaconf.h	/^#define LUA_NUMBER_FMT	/;"	d
LUA_NUMBER_SCAN	src/luaconf.h	/^#define LUA_NUMBER_SCAN	/;"	d
LUA_O	src/Makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	src/loadlib.c	/^#define LUA_OFSEP	/;"	d	file:
LUA_OSLIBNAME	src/lualib.h	/^#define LUA_OSLIBNAME	/;"	d
LUA_PATH	src/luaconf.h	/^#define LUA_PATH /;"	d
LUA_PATHSEP	src/luaconf.h	/^#define LUA_PATHSEP	/;"	d
LUA_PATH_DEFAULT	src/luaconf.h	/^#define LUA_PATH_DEFAULT /;"	d
LUA_PATH_MARK	src/luaconf.h	/^#define LUA_PATH_MARK	/;"	d
LUA_POF	src/loadlib.c	/^#define LUA_POF	/;"	d	file:
LUA_PROGNAME	src/luaconf.h	/^#define LUA_PROGNAME	/;"	d
LUA_PROMPT	src/luaconf.h	/^#define LUA_PROMPT	/;"	d
LUA_PROMPT2	src/luaconf.h	/^#define LUA_PROMPT2	/;"	d
LUA_QL	src/luaconf.h	/^#define LUA_QL(/;"	d
LUA_QS	src/luaconf.h	/^#define LUA_QS	/;"	d
LUA_REFNIL	src/lauxlib.h	/^#define LUA_REFNIL /;"	d
LUA_REGISTRYINDEX	src/lua.h	/^#define LUA_REGISTRYINDEX	/;"	d
LUA_RELEASE	src/lua.h	/^#define LUA_RELEASE	/;"	d
LUA_ROOT	src/luaconf.h	/^#define LUA_ROOT	/;"	d
LUA_SIGNATURE	src/lua.h	/^#define	LUA_SIGNATURE	/;"	d
LUA_STRLIBNAME	src/lualib.h	/^#define LUA_STRLIBNAME	/;"	d
LUA_T	src/Makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	src/lualib.h	/^#define LUA_TABLIBNAME	/;"	d
LUA_TBOOLEAN	src/lua.h	/^#define LUA_TBOOLEAN	/;"	d
LUA_TDEADKEY	src/lobject.h	/^#define LUA_TDEADKEY	/;"	d
LUA_TFUNCTION	src/lua.h	/^#define LUA_TFUNCTION	/;"	d
LUA_TLIGHTUSERDATA	src/lua.h	/^#define LUA_TLIGHTUSERDATA	/;"	d
LUA_TMPNAMBUFSIZE	src/luaconf.h	/^#define LUA_TMPNAMBUFSIZE	/;"	d
LUA_TNIL	src/lua.h	/^#define LUA_TNIL	/;"	d
LUA_TNONE	src/lua.h	/^#define LUA_TNONE	/;"	d
LUA_TNUMBER	src/lua.h	/^#define LUA_TNUMBER	/;"	d
LUA_TPROTO	src/lobject.h	/^#define LUA_TPROTO	/;"	d
LUA_TSTRING	src/lua.h	/^#define LUA_TSTRING	/;"	d
LUA_TTABLE	src/lua.h	/^#define LUA_TTABLE	/;"	d
LUA_TTHREAD	src/lua.h	/^#define LUA_TTHREAD	/;"	d
LUA_TUPVAL	src/lobject.h	/^#define LUA_TUPVAL	/;"	d
LUA_TUSERDATA	src/lua.h	/^#define LUA_TUSERDATA	/;"	d
LUA_USE_DLOPEN	src/luaconf.h	/^#define LUA_USE_DLOPEN	/;"	d
LUA_USE_ISATTY	src/luaconf.h	/^#define LUA_USE_ISATTY$/;"	d
LUA_USE_MKSTEMP	src/luaconf.h	/^#define LUA_USE_MKSTEMP$/;"	d
LUA_USE_POPEN	src/luaconf.h	/^#define LUA_USE_POPEN$/;"	d
LUA_USE_POSIX	src/luaconf.h	/^#define LUA_USE_POSIX$/;"	d
LUA_USE_READLINE	src/luaconf.h	/^#define LUA_USE_READLINE	/;"	d
LUA_USE_ULONGJMP	src/luaconf.h	/^#define LUA_USE_ULONGJMP$/;"	d
LUA_VERSION	src/lua.h	/^#define LUA_VERSION	/;"	d
LUA_VERSION_NUM	src/lua.h	/^#define LUA_VERSION_NUM	/;"	d
LUA_WIN	src/luaconf.h	/^#define LUA_WIN$/;"	d
LUA_YIELD	src/lua.h	/^#define LUA_YIELD	/;"	d
L_ESC	src/lstrlib.c	/^#define L_ESC	/;"	d	file:
L_Umaxalign	src/llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
LexState	src/llex.h	/^typedef struct LexState {$/;"	s
LexState	src/llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LexState::L	src/llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State	access:public
LexState::buff	src/llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState	access:public
LexState::current	src/llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState	access:public
LexState::decpoint	src/llex.h	/^  char decpoint;  \/* locale decimal point *\/$/;"	m	struct:LexState	access:public
LexState::fs	src/llex.h	/^  struct FuncState *fs;  \/* `FuncState' is private to the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState	access:public
LexState::lastline	src/llex.h	/^  int lastline;  \/* line of last token `consumed' *\/$/;"	m	struct:LexState	access:public
LexState::linenumber	src/llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState	access:public
LexState::lookahead	src/llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState	access:public
LexState::source	src/llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState	access:public
LexState::t	src/llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState	access:public
LexState::z	src/llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState	access:public
LoadBlock	src/lundump.c	/^static void LoadBlock(LoadState* S, void* b, size_t size)$/;"	f	file:	signature:(LoadState* S, void* b, size_t size)
LoadByte	src/lundump.c	/^#define	LoadByte(/;"	d	file:
LoadChar	src/lundump.c	/^static int LoadChar(LoadState* S)$/;"	f	file:	signature:(LoadState* S)
LoadCode	src/lundump.c	/^static void LoadCode(LoadState* S, Proto* f)$/;"	f	file:	signature:(LoadState* S, Proto* f)
LoadConstants	src/lundump.c	/^static void LoadConstants(LoadState* S, Proto* f)$/;"	f	file:	signature:(LoadState* S, Proto* f)
LoadDebug	src/lundump.c	/^static void LoadDebug(LoadState* S, Proto* f)$/;"	f	file:	signature:(LoadState* S, Proto* f)
LoadF	src/lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	src/lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadF::buff	src/lauxlib.c	/^  char buff[LUAL_BUFFERSIZE];$/;"	m	struct:LoadF	file:	access:public
LoadF::extraline	src/lauxlib.c	/^  int extraline;$/;"	m	struct:LoadF	file:	access:public
LoadF::f	src/lauxlib.c	/^  FILE *f;$/;"	m	struct:LoadF	file:	access:public
LoadFunction	src/lundump.c	/^static Proto* LoadFunction(LoadState* S, TString* p)$/;"	f	file:	signature:(LoadState* S, TString* p)
LoadFunction	src/lundump.c	/^static Proto* LoadFunction(LoadState* S, TString* p);$/;"	p	file:	signature:(LoadState* S, TString* p)
LoadHeader	src/lundump.c	/^static void LoadHeader(LoadState* S)$/;"	f	file:	signature:(LoadState* S)
LoadInt	src/lundump.c	/^static int LoadInt(LoadState* S)$/;"	f	file:	signature:(LoadState* S)
LoadMem	src/lundump.c	/^#define LoadMem(/;"	d	file:
LoadNumber	src/lundump.c	/^static lua_Number LoadNumber(LoadState* S)$/;"	f	file:	signature:(LoadState* S)
LoadS	src/lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	src/lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadS::s	src/lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	file:	access:public
LoadS::size	src/lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	file:	access:public
LoadState	src/lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon16	file:
LoadString	src/lundump.c	/^static TString* LoadString(LoadState* S)$/;"	f	file:	signature:(LoadState* S)
LoadVar	src/lundump.c	/^#define LoadVar(/;"	d	file:
LoadVector	src/lundump.c	/^#define LoadVector(/;"	d	file:
LocVar	src/lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	src/lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
LocVar::endpc	src/lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar	access:public
LocVar::startpc	src/lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar	access:public
LocVar::varname	src/lobject.h	/^  TString *varname;$/;"	m	struct:LocVar	access:public
MASK0	src/lopcodes.h	/^#define MASK0(/;"	d
MASK1	src/lopcodes.h	/^#define MASK1(/;"	d
MAXARG_A	src/lopcodes.h	/^#define MAXARG_A /;"	d
MAXARG_B	src/lopcodes.h	/^#define MAXARG_B /;"	d
MAXARG_Bx	src/lopcodes.h	/^#define MAXARG_Bx /;"	d
MAXARG_C	src/lopcodes.h	/^#define MAXARG_C /;"	d
MAXARG_sBx	src/lopcodes.h	/^#define MAXARG_sBx /;"	d
MAXASIZE	src/ltable.c	/^#define MAXASIZE	/;"	d	file:
MAXBITS	src/ltable.c	/^#define MAXBITS	/;"	d	file:
MAXINDEXRK	src/lopcodes.h	/^#define MAXINDEXRK	/;"	d
MAXSRC	src/llex.c	/^#define MAXSRC /;"	d	file:
MAXSTACK	src/llimits.h	/^#define MAXSTACK	/;"	d
MAXTAGLOOP	src/lvm.c	/^#define MAXTAGLOOP	/;"	d	file:
MAX_FORMAT	src/lstrlib.c	/^#define MAX_FORMAT	/;"	d	file:
MAX_INT	src/llimits.h	/^#define MAX_INT /;"	d
MAX_ITEM	src/lstrlib.c	/^#define MAX_ITEM	/;"	d	file:
MAX_LUMEM	src/llimits.h	/^#define MAX_LUMEM	/;"	d
MAX_SIZET	src/llimits.h	/^#define MAX_SIZET	/;"	d
MEMERRMSG	src/lmem.h	/^#define MEMERRMSG	/;"	d
MINSIZEARRAY	src/lmem.c	/^#define MINSIZEARRAY	/;"	d	file:
MINSTRTABSIZE	src/llimits.h	/^#define MINSTRTABSIZE	/;"	d
MYCFLAGS	src/Makefile	/^MYCFLAGS=$/;"	m
MYLDFLAGS	src/Makefile	/^MYLDFLAGS=$/;"	m
MYLIBS	src/Makefile	/^MYLIBS=$/;"	m
MatchState	src/lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	src/lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
MatchState::L	src/lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:	access:public
MatchState::__anon14::init	src/lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon14	file:	access:public
MatchState::__anon14::len	src/lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon14	file:	access:public
MatchState::capture	src/lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon14	file:	access:public
MatchState::level	src/lstrlib.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:	access:public
MatchState::src_end	src/lstrlib.c	/^  const char *src_end;  \/* end (`\\0') of source string *\/$/;"	m	struct:MatchState	file:	access:public
MatchState::src_init	src/lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:	access:public
Mbuffer	src/lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	src/lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
Mbuffer::buffer	src/lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer	access:public
Mbuffer::buffsize	src/lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer	access:public
Mbuffer::n	src/lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer	access:public
NO_JUMP	src/lcode.h	/^#define NO_JUMP /;"	d
NO_REG	src/lopcodes.h	/^#define NO_REG	/;"	d
NUM_OPCODES	src/lopcodes.h	/^#define NUM_OPCODES	/;"	d
NUM_RESERVED	src/llex.h	/^#define NUM_RESERVED	/;"	d
NUM_TAGS	src/lobject.h	/^#define NUM_TAGS	/;"	d
Node	src/lobject.h	/^typedef struct Node {$/;"	s
Node	src/lobject.h	/^} Node;$/;"	t	typeref:struct:Node
Node::i_key	src/lobject.h	/^  TKey i_key;$/;"	m	struct:Node	access:public
Node::i_val	src/lobject.h	/^  TValue i_val;$/;"	m	struct:Node	access:public
OPR_ADD	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_CONCAT	src/lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_EQ	src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_GE	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LE	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LEN	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_MINUS	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_NOBINOPR	src/lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SUB	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	src/lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon9
OP_CALL	src/lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon9
OP_CLOSE	src/lopcodes.h	/^OP_CLOSE,\/*	A 	close all variables in the stack up to (>=) R(A)*\/$/;"	e	enum:__anon9
OP_CLOSURE	src/lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))	*\/$/;"	e	enum:__anon9
OP_CONCAT	src/lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon9
OP_DIV	src/lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon9
OP_EQ	src/lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon9
OP_FORLOOP	src/lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon9
OP_FORPREP	src/lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon9
OP_GETGLOBAL	src/lopcodes.h	/^OP_GETGLOBAL,\/*	A Bx	R(A) := Gbl[Kst(Bx)]				*\/$/;"	e	enum:__anon9
OP_GETTABLE	src/lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon9
OP_GETUPVAL	src/lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon9
OP_JMP	src/lopcodes.h	/^OP_JMP,\/*	sBx	pc+=sBx					*\/$/;"	e	enum:__anon9
OP_LE	src/lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon9
OP_LEN	src/lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon9
OP_LOADBOOL	src/lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon9
OP_LOADK	src/lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon9
OP_LOADNIL	src/lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A) := ... := R(B) := nil			*\/$/;"	e	enum:__anon9
OP_LT	src/lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon9
OP_MOD	src/lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon9
OP_MOVE	src/lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon9
OP_MUL	src/lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon9
OP_NEWTABLE	src/lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon9
OP_NOT	src/lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon9
OP_POW	src/lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon9
OP_RETURN	src/lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon9
OP_SELF	src/lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon9
OP_SETGLOBAL	src/lopcodes.h	/^OP_SETGLOBAL,\/*	A Bx	Gbl[Kst(Bx)] := R(A)				*\/$/;"	e	enum:__anon9
OP_SETLIST	src/lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon9
OP_SETTABLE	src/lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon9
OP_SETUPVAL	src/lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon9
OP_SUB	src/lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon9
OP_TAILCALL	src/lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon9
OP_TEST	src/lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/ $/;"	e	enum:__anon9
OP_TESTSET	src/lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/ $/;"	e	enum:__anon9
OP_TFORLOOP	src/lopcodes.h	/^OP_TFORLOOP,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2)); $/;"	e	enum:__anon9
OP_UNM	src/lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon9
OP_VARARG	src/lopcodes.h	/^OP_VARARG\/*	A B	R(A), R(A+1), ..., R(A+B-1) = vararg		*\/$/;"	e	enum:__anon9
OUTPUT	src/luac.c	/^#define	OUTPUT	/;"	d	file:
OpArgK	src/lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	src/lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	src/lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	src/lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	src/lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	src/lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon9
OpMode	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	g
Output	src/luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	file:
PCRC	src/ldo.h	/^#define PCRC	/;"	d
PCRLUA	src/ldo.h	/^#define PCRLUA	/;"	d
PCRYIELD	src/ldo.h	/^#define PCRYIELD	/;"	d
PI	src/lmathlib.c	/^#define PI /;"	d	file:
PI	src/lmathlib.c	/^#undef PI$/;"	d	file:
PLAT	src/Makefile	/^PLAT= none$/;"	m
PLATS	src/Makefile	/^PLATS= aix ansi bsd freebsd generic linux macosx mingw posix solaris$/;"	m
POF	src/loadlib.c	/^#define POF	/;"	d	file:
POF	src/loadlib.c	/^#undef POF$/;"	d	file:
POS_A	src/lopcodes.h	/^#define POS_A	/;"	d
POS_B	src/lopcodes.h	/^#define POS_B	/;"	d
POS_Bx	src/lopcodes.h	/^#define POS_Bx	/;"	d
POS_C	src/lopcodes.h	/^#define POS_C	/;"	d
POS_OP	src/lopcodes.h	/^#define POS_OP	/;"	d
PROGNAME	src/luac.c	/^#define PROGNAME	/;"	d	file:
Pfunc	src/ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
PrintCode	src/print.c	/^static void PrintCode(const Proto* f)$/;"	f	file:	signature:(const Proto* f)
PrintConstant	src/print.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	file:	signature:(const Proto* f, int i)
PrintConstants	src/print.c	/^static void PrintConstants(const Proto* f)$/;"	f	file:	signature:(const Proto* f)
PrintFunction	src/print.c	/^#define PrintFunction	/;"	d	file:
PrintFunction	src/print.c	/^void PrintFunction(const Proto* f, int full)$/;"	f	signature:(const Proto* f, int full)
PrintHeader	src/print.c	/^static void PrintHeader(const Proto* f)$/;"	f	file:	signature:(const Proto* f)
PrintLocals	src/print.c	/^static void PrintLocals(const Proto* f)$/;"	f	file:	signature:(const Proto* f)
PrintString	src/print.c	/^static void PrintString(const TString* ts)$/;"	f	file:	signature:(const TString* ts)
PrintUpvalues	src/print.c	/^static void PrintUpvalues(const Proto* f)$/;"	f	file:	signature:(const Proto* f)
Protect	src/lvm.c	/^#define Protect(/;"	d	file:
Proto	src/lobject.h	/^typedef struct Proto {$/;"	s
Proto	src/lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
Proto::CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:Proto	access:public
Proto::code	src/lobject.h	/^  Instruction *code;$/;"	m	struct:Proto	access:public
Proto::gclist	src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto	access:public
Proto::is_vararg	src/lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto	access:public
Proto::k	src/lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto	access:public
Proto::lastlinedefined	src/lobject.h	/^  int lastlinedefined;$/;"	m	struct:Proto	access:public
Proto::linedefined	src/lobject.h	/^  int linedefined;$/;"	m	struct:Proto	access:public
Proto::lineinfo	src/lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines *\/$/;"	m	struct:Proto	access:public
Proto::locvars	src/lobject.h	/^  struct LocVar *locvars;  \/* information about local variables *\/$/;"	m	struct:Proto	typeref:struct:Proto::LocVar	access:public
Proto::maxstacksize	src/lobject.h	/^  lu_byte maxstacksize;$/;"	m	struct:Proto	access:public
Proto::numparams	src/lobject.h	/^  lu_byte numparams;$/;"	m	struct:Proto	access:public
Proto::nups	src/lobject.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:Proto	access:public
Proto::p	src/lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto	access:public
Proto::sizecode	src/lobject.h	/^  int sizecode;$/;"	m	struct:Proto	access:public
Proto::sizek	src/lobject.h	/^  int sizek;  \/* size of `k' *\/$/;"	m	struct:Proto	access:public
Proto::sizelineinfo	src/lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto	access:public
Proto::sizelocvars	src/lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto	access:public
Proto::sizep	src/lobject.h	/^  int sizep;  \/* size of `p' *\/$/;"	m	struct:Proto	access:public
Proto::sizeupvalues	src/lobject.h	/^  int sizeupvalues;$/;"	m	struct:Proto	access:public
Proto::source	src/lobject.h	/^  TString  *source;$/;"	m	struct:Proto	access:public
Proto::upvalues	src/lobject.h	/^  TString **upvalues;  \/* upvalue names *\/$/;"	m	struct:Proto	access:public
RA	src/lvm.c	/^#define RA(/;"	d	file:
RADIANS_PER_DEGREE	src/lmathlib.c	/^#define RADIANS_PER_DEGREE /;"	d	file:
RANLIB	src/Makefile	/^RANLIB= ranlib$/;"	m
RB	src/lvm.c	/^#define RB(/;"	d	file:
RC	src/lvm.c	/^#define RC(/;"	d	file:
RESERVED	src/llex.h	/^enum RESERVED {$/;"	g
RKASK	src/lopcodes.h	/^#define RKASK(/;"	d
RKB	src/lvm.c	/^#define RKB(/;"	d	file:
RKC	src/lvm.c	/^#define RKC(/;"	d	file:
RM	src/Makefile	/^RM= rm -f$/;"	m
S	src/print.c	/^#define S(/;"	d	file:
SETARG_A	src/lopcodes.h	/^#define SETARG_A(/;"	d
SETARG_B	src/lopcodes.h	/^#define SETARG_B(/;"	d
SETARG_Bx	src/lopcodes.h	/^#define SETARG_Bx(/;"	d
SETARG_C	src/lopcodes.h	/^#define SETARG_C(/;"	d
SETARG_sBx	src/lopcodes.h	/^#define SETARG_sBx(/;"	d
SET_OPCODE	src/lopcodes.h	/^#define SET_OPCODE(/;"	d
SFIXEDBIT	src/lgc.h	/^#define SFIXEDBIT	/;"	d
SIZE_A	src/lopcodes.h	/^#define SIZE_A	/;"	d
SIZE_B	src/lopcodes.h	/^#define SIZE_B	/;"	d
SIZE_Bx	src/lopcodes.h	/^#define SIZE_Bx	/;"	d
SIZE_C	src/lopcodes.h	/^#define SIZE_C	/;"	d
SIZE_OP	src/lopcodes.h	/^#define SIZE_OP	/;"	d
SPECIALS	src/lstrlib.c	/^#define SPECIALS	/;"	d	file:
SParser	src/ldo.c	/^struct SParser {  \/* data to `f_parser' *\/$/;"	s	file:
SParser::buff	src/ldo.c	/^  Mbuffer buff;  \/* buffer to be used by the scanner *\/$/;"	m	struct:SParser	file:	access:public
SParser::name	src/ldo.c	/^  const char *name;$/;"	m	struct:SParser	file:	access:public
SParser::z	src/ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	file:	access:public
SS	src/print.c	/^#define SS(/;"	d	file:
SemInfo	src/llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon2
Sizeof	src/print.c	/^#define Sizeof(/;"	d	file:
Smain	src/lua.c	/^struct Smain {$/;"	s	file:
Smain	src/luac.c	/^struct Smain {$/;"	s	file:
Smain::argc	src/lua.c	/^  int argc;$/;"	m	struct:Smain	file:	access:public
Smain::argc	src/luac.c	/^ int argc;$/;"	m	struct:Smain	file:	access:public
Smain::argv	src/lua.c	/^  char **argv;$/;"	m	struct:Smain	file:	access:public
Smain::argv	src/luac.c	/^ char** argv;$/;"	m	struct:Smain	file:	access:public
Smain::status	src/lua.c	/^  int status;$/;"	m	struct:Smain	file:	access:public
StkId	src/lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
TK_AND	src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_DO	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_ELSE	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_EQ	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_FALSE	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FOR	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_IF	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_LE	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_LOCAL	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_NE	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_NIL	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NUMBER	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_OR	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_STRING	src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_THEN	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	src/lobject.h	/^typedef union TKey {$/;"	u
TKey	src/lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TKey::__anon8::TValuefields	src/lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon8	access:public
TKey::__anon8::next	src/lobject.h	/^    struct Node *next;  \/* for chaining *\/$/;"	m	struct:TKey::__anon8	typeref:struct:TKey::__anon8::Node	access:public
TKey::nk	src/lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon8	access:public
TKey::tvk	src/lobject.h	/^  TValue tvk;$/;"	m	union:TKey	access:public
TMS	src/ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon15
TM_ADD	src/ltm.h	/^  TM_ADD,$/;"	e	enum:__anon15
TM_CALL	src/ltm.h	/^  TM_CALL,$/;"	e	enum:__anon15
TM_CONCAT	src/ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon15
TM_DIV	src/ltm.h	/^  TM_DIV,$/;"	e	enum:__anon15
TM_EQ	src/ltm.h	/^  TM_EQ,  \/* last tag method with `fast' access *\/$/;"	e	enum:__anon15
TM_GC	src/ltm.h	/^  TM_GC,$/;"	e	enum:__anon15
TM_INDEX	src/ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon15
TM_LE	src/ltm.h	/^  TM_LE,$/;"	e	enum:__anon15
TM_LEN	src/ltm.h	/^  TM_LEN,$/;"	e	enum:__anon15
TM_LT	src/ltm.h	/^  TM_LT,$/;"	e	enum:__anon15
TM_MOD	src/ltm.h	/^  TM_MOD,$/;"	e	enum:__anon15
TM_MODE	src/ltm.h	/^  TM_MODE,$/;"	e	enum:__anon15
TM_MUL	src/ltm.h	/^  TM_MUL,$/;"	e	enum:__anon15
TM_N	src/ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon15
TM_NEWINDEX	src/ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon15
TM_POW	src/ltm.h	/^  TM_POW,$/;"	e	enum:__anon15
TM_SUB	src/ltm.h	/^  TM_SUB,$/;"	e	enum:__anon15
TM_UNM	src/ltm.h	/^  TM_UNM,$/;"	e	enum:__anon15
TOKEN_LEN	src/llex.h	/^#define TOKEN_LEN	/;"	d
TString	src/lobject.h	/^typedef union TString {$/;"	u
TString	src/lobject.h	/^} TString;$/;"	t	typeref:union:TString
TString::__anon4::CommonHeader	src/lobject.h	/^    CommonHeader;$/;"	m	struct:TString::__anon4	access:public
TString::__anon4::hash	src/lobject.h	/^    unsigned int hash;$/;"	m	struct:TString::__anon4	access:public
TString::__anon4::len	src/lobject.h	/^    size_t len;$/;"	m	struct:TString::__anon4	access:public
TString::__anon4::reserved	src/lobject.h	/^    lu_byte reserved;$/;"	m	struct:TString::__anon4	access:public
TString::dummy	src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:TString	access:public
TString::tsv	src/lobject.h	/^  } tsv;$/;"	m	union:TString	typeref:struct:TString::__anon4	access:public
TValue	src/lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	src/lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon8	access:public
TValuefields	src/lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue	access:public
TValuefields	src/lobject.h	/^#define TValuefields	/;"	d
Table	src/lobject.h	/^typedef struct Table {$/;"	s
Table	src/lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Table::CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:Table	access:public
Table::array	src/lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table	access:public
Table::flags	src/lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/ $/;"	m	struct:Table	access:public
Table::gclist	src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table	access:public
Table::lastfree	src/lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table	access:public
Table::lsizenode	src/lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of `node' array *\/$/;"	m	struct:Table	access:public
Table::metatable	src/lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table	access:public
Table::node	src/lobject.h	/^  Node *node;$/;"	m	struct:Table	access:public
Table::sizearray	src/lobject.h	/^  int sizearray;  \/* size of `array' array *\/$/;"	m	struct:Table	access:public
Token	src/llex.h	/^typedef struct Token {$/;"	s
Token	src/llex.h	/^} Token;$/;"	t	typeref:struct:Token
Token::seminfo	src/llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token	access:public
Token::token	src/llex.h	/^  int token;$/;"	m	struct:Token	access:public
UNARY_PRIORITY	src/lparser.c	/^#define UNARY_PRIORITY	/;"	d	file:
UNUSED	src/llimits.h	/^#define UNUSED(/;"	d
Udata	src/lobject.h	/^typedef union Udata {$/;"	u
Udata	src/lobject.h	/^} Udata;$/;"	t	typeref:union:Udata
Udata::__anon5::CommonHeader	src/lobject.h	/^    CommonHeader;$/;"	m	struct:Udata::__anon5	access:public
Udata::__anon5::env	src/lobject.h	/^    struct Table *env;$/;"	m	struct:Udata::__anon5	typeref:struct:Udata::__anon5::Table	access:public
Udata::__anon5::len	src/lobject.h	/^    size_t len;$/;"	m	struct:Udata::__anon5	access:public
Udata::__anon5::metatable	src/lobject.h	/^    struct Table *metatable;$/;"	m	struct:Udata::__anon5	typeref:struct:Udata::__anon5::Table	access:public
Udata::dummy	src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for `local' udata *\/$/;"	m	union:Udata	access:public
Udata::uv	src/lobject.h	/^  } uv;$/;"	m	union:Udata	typeref:struct:Udata::__anon5	access:public
UnOpr	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	src/lobject.h	/^typedef struct UpVal {$/;"	s
UpVal	src/lobject.h	/^} UpVal;$/;"	t	typeref:struct:UpVal
UpVal::CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:UpVal	access:public
UpVal::__anon6::__anon7::next	src/lobject.h	/^      struct UpVal *next;$/;"	m	struct:UpVal::__anon6::__anon7	typeref:struct:UpVal::__anon6::__anon7::UpVal	access:public
UpVal::__anon6::__anon7::prev	src/lobject.h	/^      struct UpVal *prev;$/;"	m	struct:UpVal::__anon6::__anon7	typeref:struct:UpVal::__anon6::__anon7::UpVal	access:public
UpVal::__anon6::l	src/lobject.h	/^    } l;$/;"	m	union:UpVal::__anon6	typeref:struct:UpVal::__anon6::__anon7	access:public
UpVal::__anon6::value	src/lobject.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon6	access:public
UpVal::u	src/lobject.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon6	access:public
UpVal::v	src/lobject.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal	access:public
VALUEWEAK	src/lgc.c	/^#define VALUEWEAK /;"	d	file:
VALUEWEAKBIT	src/lgc.h	/^#define VALUEWEAKBIT	/;"	d
VARARG_HASARG	src/lobject.h	/^#define VARARG_HASARG	/;"	d
VARARG_ISVARARG	src/lobject.h	/^#define VARARG_ISVARARG	/;"	d
VARARG_NEEDSARG	src/lobject.h	/^#define VARARG_NEEDSARG	/;"	d
VCALL	src/lparser.h	/^  VCALL,	\/* info = instruction pc *\/$/;"	e	enum:__anon11
VFALSE	src/lparser.h	/^  VFALSE,$/;"	e	enum:__anon11
VGLOBAL	src/lparser.h	/^  VGLOBAL,	\/* info = index of table; aux = index of global name in `k' *\/$/;"	e	enum:__anon11
VINDEXED	src/lparser.h	/^  VINDEXED,	\/* info = table register; aux = index register (or `k') *\/$/;"	e	enum:__anon11
VJMP	src/lparser.h	/^  VJMP,		\/* info = instruction pc *\/$/;"	e	enum:__anon11
VK	src/lparser.h	/^  VK,		\/* info = index of constant in `k' *\/$/;"	e	enum:__anon11
VKNUM	src/lparser.h	/^  VKNUM,	\/* nval = numerical value *\/$/;"	e	enum:__anon11
VLOCAL	src/lparser.h	/^  VLOCAL,	\/* info = local register *\/$/;"	e	enum:__anon11
VNIL	src/lparser.h	/^  VNIL,$/;"	e	enum:__anon11
VNONRELOC	src/lparser.h	/^  VNONRELOC,	\/* info = result register *\/$/;"	e	enum:__anon11
VOID	src/print.c	/^#define VOID(/;"	d	file:
VRELOCABLE	src/lparser.h	/^  VRELOCABLE,	\/* info = instruction pc *\/$/;"	e	enum:__anon11
VTRUE	src/lparser.h	/^  VTRUE,$/;"	e	enum:__anon11
VUPVAL	src/lparser.h	/^  VUPVAL,       \/* info = index of upvalue in `upvalues' *\/$/;"	e	enum:__anon11
VVARARG	src/lparser.h	/^  VVARARG	\/* info = instruction pc *\/$/;"	e	enum:__anon11
VVOID	src/lparser.h	/^  VVOID,	\/* no value *\/$/;"	e	enum:__anon11
Value	src/lobject.h	/^} Value;$/;"	t	typeref:union:__anon3
WHITE0BIT	src/lgc.h	/^#define WHITE0BIT	/;"	d
WHITE1BIT	src/lgc.h	/^#define WHITE1BIT	/;"	d
WHITEBITS	src/lgc.h	/^#define WHITEBITS	/;"	d
Z	src/lundump.c	/^ ZIO* Z;$/;"	m	struct:__anon16	file:	access:public
ZIO	src/lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zio	src/lzio.h	/^struct Zio {$/;"	s
Zio::L	src/lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio	access:public
Zio::data	src/lzio.h	/^  void* data;			\/* additional data *\/$/;"	m	struct:Zio	access:public
Zio::n	src/lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio	access:public
Zio::p	src/lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio	access:public
Zio::reader	src/lzio.h	/^  lua_Reader reader;$/;"	m	struct:Zio	access:public
__anon10::left	src/lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon10	file:	access:public
__anon10::right	src/lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon10	file:	access:public
__anon16::L	src/lundump.c	/^ lua_State* L;$/;"	m	struct:__anon16	file:	access:public
__anon16::Z	src/lundump.c	/^ ZIO* Z;$/;"	m	struct:__anon16	file:	access:public
__anon16::b	src/lundump.c	/^ Mbuffer* b;$/;"	m	struct:__anon16	file:	access:public
__anon16::name	src/lundump.c	/^ const char* name;$/;"	m	struct:__anon16	file:	access:public
__anon1::L	src/ldump.c	/^ lua_State* L;$/;"	m	struct:__anon1	file:	access:public
__anon1::data	src/ldump.c	/^ void* data;$/;"	m	struct:__anon1	file:	access:public
__anon1::status	src/ldump.c	/^ int status;$/;"	m	struct:__anon1	file:	access:public
__anon1::strip	src/ldump.c	/^ int strip;$/;"	m	struct:__anon1	file:	access:public
__anon1::writer	src/ldump.c	/^ lua_Writer writer;$/;"	m	struct:__anon1	file:	access:public
__anon2::r	src/llex.h	/^  lua_Number r;$/;"	m	union:__anon2	access:public
__anon2::ts	src/llex.h	/^  TString *ts;$/;"	m	union:__anon2	access:public
__anon3::b	src/lobject.h	/^  int b;$/;"	m	union:__anon3	access:public
__anon3::gc	src/lobject.h	/^  GCObject *gc;$/;"	m	union:__anon3	access:public
__anon3::n	src/lobject.h	/^  lua_Number n;$/;"	m	union:__anon3	access:public
__anon3::p	src/lobject.h	/^  void *p;$/;"	m	union:__anon3	access:public
abs_index	src/lauxlib.c	/^#define abs_index(/;"	d	file:
actvar	src/lparser.h	/^  unsigned short actvar[LUAI_MAXVARS];  \/* declared-variable stack *\/$/;"	m	struct:FuncState	access:public
add_s	src/lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:	signature:(MatchState *ms, luaL_Buffer *b, const char *s, const char *e)
add_value	src/lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:	signature:(MatchState *ms, luaL_Buffer *b, const char *s, const char *e)
addfield	src/ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, int i) {$/;"	f	file:	signature:(lua_State *L, luaL_Buffer *b, int i)
addinfo	src/ldebug.c	/^static void addinfo (lua_State *L, const char *msg) {$/;"	f	file:	signature:(lua_State *L, const char *msg)
addintlen	src/lstrlib.c	/^static void addintlen (char *form) {$/;"	f	file:	signature:(char *form)
addk	src/lcode.c	/^static int addk (FuncState *fs, TValue *k, TValue *v) {$/;"	f	file:	signature:(FuncState *fs, TValue *k, TValue *v)
addquoted	src/lstrlib.c	/^static void addquoted (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	file:	signature:(lua_State *L, luaL_Buffer *b, int arg)
adjust_assign	src/lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	file:	signature:(LexState *ls, int nvars, int nexps, expdesc *e)
adjust_varargs	src/ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	file:	signature:(lua_State *L, Proto *p, int actual)
adjustlocalvars	src/lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	file:	signature:(LexState *ls, int nvars)
adjustresults	src/lapi.c	/^#define adjustresults(/;"	d	file:
adjuststack	src/lauxlib.c	/^static void adjuststack (luaL_Buffer *B) {$/;"	f	file:	signature:(luaL_Buffer *B)
allowhook	src/lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State	access:public
anchor_token	src/lparser.c	/^static void anchor_token (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
api_check	src/llimits.h	/^#define api_check	/;"	d
api_check	src/llimits.h	/^#define api_check(/;"	d
api_checknelems	src/lapi.c	/^#define api_checknelems(/;"	d	file:
api_checkvalidindex	src/lapi.c	/^#define api_checkvalidindex(/;"	d	file:
api_incr_top	src/lapi.c	/^#define api_incr_top(/;"	d	file:
argc	src/lua.c	/^  int argc;$/;"	m	struct:Smain	file:	access:public
argc	src/luac.c	/^ int argc;$/;"	m	struct:Smain	file:	access:public
argv	src/lua.c	/^  char **argv;$/;"	m	struct:Smain	file:	access:public
argv	src/luac.c	/^ char** argv;$/;"	m	struct:Smain	file:	access:public
arith_op	src/lvm.c	/^#define arith_op(/;"	d	file:
array	src/lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table	access:public
arrayindex	src/ltable.c	/^static int arrayindex (const TValue *key) {$/;"	f	file:	signature:(const TValue *key)
assignment	src/lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	file:	signature:(LexState *ls, struct LHS_assign *lh, int nvars)
atomic	src/lgc.c	/^static void atomic (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
aux	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon12::__anon13	access:public
aux_close	src/liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
aux_getn	src/ltablib.c	/^#define aux_getn(/;"	d	file:
aux_lines	src/liolib.c	/^static void aux_lines (lua_State *L, int idx, int toclose) {$/;"	f	file:	signature:(lua_State *L, int idx, int toclose)
aux_upvalue	src/lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val) {$/;"	f	file:	signature:(StkId fi, int n, TValue **val)
auxgetinfo	src/ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	file:	signature:(lua_State *L, const char *what, lua_Debug *ar, Closure *f, CallInfo *ci)
auxopen	src/lbaselib.c	/^static void auxopen (lua_State *L, const char *name,$/;"	f	file:	signature:(lua_State *L, const char *name, lua_CFunction f, lua_CFunction u)
auxresume	src/lbaselib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	file:	signature:(lua_State *L, lua_State *co, int narg)
auxsort	src/ltablib.c	/^static void auxsort (lua_State *L, int l, int u) {$/;"	f	file:	signature:(lua_State *L, int l, int u)
auxupvalue	src/ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	file:	signature:(lua_State *L, int get)
b	src/ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:	access:public
b	src/lobject.h	/^  int b;$/;"	m	union:__anon3	access:public
b	src/lundump.c	/^ Mbuffer* b;$/;"	m	struct:__anon16	file:	access:public
base	src/lstate.h	/^  StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo	access:public
base	src/lstate.h	/^  StkId base;  \/* base of current function *\/$/;"	m	struct:lua_State	access:public
baseCcalls	src/lstate.h	/^  unsigned short baseCcalls;  \/* nested C calls when resuming coroutine *\/$/;"	m	struct:lua_State	access:public
base_ci	src/lstate.h	/^  CallInfo *base_ci;  \/* array of CallInfo's *\/$/;"	m	struct:lua_State	access:public
base_funcs	src/lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	file:
base_open	src/lbaselib.c	/^static void base_open (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
basehookcount	src/lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State	access:public
bit2mask	src/lgc.h	/^#define bit2mask(/;"	d
bitmask	src/lgc.h	/^#define bitmask(/;"	d
bl	src/lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt	access:public
black2gray	src/lgc.c	/^#define black2gray(/;"	d	file:
block	src/lparser.c	/^static void block (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
block_follow	src/lparser.c	/^static int block_follow (int token) {$/;"	f	file:	signature:(int token)
body	src/lparser.c	/^static void body (LexState *ls, expdesc *e, int needself, int line) {$/;"	f	file:	signature:(LexState *ls, expdesc *e, int needself, int line)
boolK	src/lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	file:	signature:(FuncState *fs, int b)
breaklist	src/lparser.c	/^  int breaklist;  \/* list of jumps out of this loop *\/$/;"	m	struct:BlockCnt	file:	access:public
breakstat	src/lparser.c	/^static void breakstat (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
buff	src/lauxlib.c	/^  char buff[LUAL_BUFFERSIZE];$/;"	m	struct:LoadF	file:	access:public
buff	src/ldo.c	/^  Mbuffer buff;  \/* buffer to be used by the scanner *\/$/;"	m	struct:SParser	file:	access:public
buff	src/llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState	access:public
buff	src/lstate.h	/^  Mbuffer buff;  \/* temporary buffer for string concatentation *\/$/;"	m	struct:global_State	access:public
buffer	src/lauxlib.h	/^  char buffer[LUAL_BUFFERSIZE];$/;"	m	struct:luaL_Buffer	access:public
buffer	src/lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer	access:public
bufffree	src/lauxlib.c	/^#define bufffree(/;"	d	file:
bufflen	src/lauxlib.c	/^#define bufflen(/;"	d	file:
buffreplace	src/llex.c	/^static void buffreplace (LexState *ls, char from, char to) {$/;"	f	file:	signature:(LexState *ls, char from, char to)
buffsize	src/lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer	access:public
bvalue	src/lobject.h	/^#define bvalue(/;"	d
c	src/lobject.h	/^  CClosure c;$/;"	m	union:Closure	access:public
callTM	src/lvm.c	/^static void callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	file:	signature:(lua_State *L, const TValue *f, const TValue *p1, const TValue *p2, const TValue *p3)
callTMres	src/lvm.c	/^static void callTMres (lua_State *L, StkId res, const TValue *f,$/;"	f	file:	signature:(lua_State *L, StkId res, const TValue *f, const TValue *p1, const TValue *p2)
call_binTM	src/lvm.c	/^static int call_binTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:	signature:(lua_State *L, const TValue *p1, const TValue *p2, StkId res, TMS event)
call_orderTM	src/lvm.c	/^static int call_orderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:	signature:(lua_State *L, const TValue *p1, const TValue *p2, TMS event)
callallgcTM	src/lstate.c	/^static void callallgcTM (lua_State *L, void *ud) {$/;"	f	file:	signature:(lua_State *L, void *ud)
callrethooks	src/ldo.c	/^static StkId callrethooks (lua_State *L, StkId firstResult) {$/;"	f	file:	signature:(lua_State *L, StkId firstResult)
cannot	src/luac.c	/^static void cannot(const char* what)$/;"	f	file:	signature:(const char* what)
capture	src/lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon14	file:	access:public
capture_to_close	src/lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	file:	signature:(MatchState *ms)
cast	src/llimits.h	/^#define cast(/;"	d
cast_byte	src/llimits.h	/^#define cast_byte(/;"	d
cast_int	src/llimits.h	/^#define cast_int(/;"	d
cast_num	src/llimits.h	/^#define cast_num(/;"	d
ceillog2	src/lobject.h	/^#define ceillog2(/;"	d
changewhite	src/lgc.h	/^#define changewhite(/;"	d
char2int	src/lzio.h	/^#define char2int(/;"	d
check	src/ldebug.c	/^#define check(/;"	d	file:
check	src/ldebug.c	/^#undef check$/;"	d	file:
check	src/lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	file:	signature:(LexState *ls, int c)
checkArgMode	src/ldebug.c	/^static int checkArgMode (const Proto *pt, int r, enum OpArgMask mode) {$/;"	f	file:	signature:(const Proto *pt, int r, enum OpArgMask mode)
checkSizes	src/lgc.c	/^static void checkSizes (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
check_capture	src/lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	file:	signature:(MatchState *ms, int l)
check_condition	src/lparser.c	/^#define check_condition(/;"	d	file:
check_conflict	src/lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, struct LHS_assign *lh, expdesc *v)
check_exp	src/llimits.h	/^#define check_exp(/;"	d
check_match	src/lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	file:	signature:(LexState *ls, int what, int who, int where)
check_next	src/llex.c	/^static int check_next (LexState *ls, const char *set) {$/;"	f	file:	signature:(LexState *ls, const char *set)
checkconsistency	src/lobject.h	/^#define checkconsistency(/;"	d
checkint	src/lauxlib.c	/^static int checkint (lua_State *L, int topop) {$/;"	f	file:	signature:(lua_State *L, int topop)
checkjump	src/ldebug.c	/^#define checkjump(/;"	d	file:
checkjump	src/ldebug.c	/^#undef checkjump$/;"	d	file:
checkliveness	src/lobject.h	/^#define checkliveness(/;"	d
checkname	src/lparser.c	/^static void checkname(LexState *ls, expdesc *e) {$/;"	f	file:	signature:(LexState *ls, expdesc *e)
checknext	src/lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	file:	signature:(LexState *ls, int c)
checkopenop	src/ldebug.c	/^#define checkopenop(/;"	d	file:
checkreg	src/ldebug.c	/^#define checkreg(/;"	d	file:
checkreg	src/ldebug.c	/^#undef checkreg$/;"	d	file:
checkresults	src/lapi.c	/^#define checkresults(/;"	d	file:
checkstacksizes	src/lgc.c	/^static void checkstacksizes (lua_State *L, StkId max) {$/;"	f	file:	signature:(lua_State *L, StkId max)
chunk	src/lparser.c	/^static void chunk (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
chunk	src/lparser.c	/^static void chunk (LexState *ls);$/;"	p	file:	signature:(LexState *ls)
ci	src/lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State	access:public
ci_func	src/lstate.h	/^#define ci_func(/;"	d
cl	src/lstate.h	/^  union Closure cl;$/;"	m	union:GCObject	typeref:union:GCObject::Closure	access:public
classend	src/lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	file:	signature:(MatchState *ms, const char *p)
cleartable	src/lgc.c	/^static void cleartable (GCObject *l) {$/;"	f	file:	signature:(GCObject *l)
close_func	src/lparser.c	/^static void close_func (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
close_state	src/lstate.c	/^static void close_state (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
closelistfield	src/lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:	signature:(FuncState *fs, struct ConsControl *cc)
clvalue	src/lobject.h	/^#define clvalue(/;"	d
co_funcs	src/lbaselib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	file:
code	src/lobject.h	/^  Instruction *code;$/;"	m	struct:Proto	access:public
code_label	src/lcode.c	/^static int code_label (FuncState *fs, int A, int b, int jump) {$/;"	f	file:	signature:(FuncState *fs, int A, int b, int jump)
codearith	src/lcode.c	/^static void codearith (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	file:	signature:(FuncState *fs, OpCode op, expdesc *e1, expdesc *e2)
codecomp	src/lcode.c	/^static void codecomp (FuncState *fs, OpCode op, int cond, expdesc *e1,$/;"	f	file:	signature:(FuncState *fs, OpCode op, int cond, expdesc *e1, expdesc *e2)
codenot	src/lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e)
codestring	src/lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	file:	signature:(LexState *ls, expdesc *e, TString *s)
collectargs	src/lua.c	/^static int collectargs (char **argv, int *pi, int *pv, int *pe) {$/;"	f	file:	signature:(char **argv, int *pi, int *pv, int *pe)
collectvalidlines	src/ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	file:	signature:(lua_State *L, Closure *f)
combine	src/luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	file:	signature:(lua_State* L, int n)
computesizes	src/ltable.c	/^static int computesizes (int nums[], int *narray) {$/;"	f	file:	signature:(int nums[], int *narray)
cond	src/lparser.c	/^static int cond (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
condhardstacktests	src/llimits.h	/^#define condhardstacktests(/;"	d
condjump	src/lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	file:	signature:(FuncState *fs, OpCode op, int A, int B, int C)
constfolding	src/lcode.c	/^static int constfolding (OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	file:	signature:(OpCode op, expdesc *e1, expdesc *e2)
constructor	src/lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	file:	signature:(LexState *ls, expdesc *t)
correctstack	src/ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	file:	signature:(lua_State *L, TValue *oldstack)
costatus	src/lbaselib.c	/^static int costatus (lua_State *L, lua_State *co) {$/;"	f	file:	signature:(lua_State *L, lua_State *co)
countint	src/ltable.c	/^static int countint (const TValue *key, int *nums) {$/;"	f	file:	signature:(const TValue *key, int *nums)
createmeta	src/liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
createmetatable	src/lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
createstdfile	src/liolib.c	/^static void createstdfile (lua_State *L, FILE *f, int k, const char *fname) {$/;"	f	file:	signature:(lua_State *L, FILE *f, int k, const char *fname)
currIsNewline	src/llex.c	/^#define currIsNewline(/;"	d	file:
curr_func	src/lstate.h	/^#define curr_func(/;"	d
current	src/llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState	access:public
currentline	src/ldebug.c	/^static int currentline (lua_State *L, CallInfo *ci) {$/;"	f	file:	signature:(lua_State *L, CallInfo *ci)
currentline	src/lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug	access:public
currentpc	src/ldebug.c	/^static int currentpc (lua_State *L, CallInfo *ci) {$/;"	f	file:	signature:(lua_State *L, CallInfo *ci)
currentwhite	src/lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State	access:public
data	src/ldump.c	/^ void* data;$/;"	m	struct:__anon1	file:	access:public
data	src/lzio.h	/^  void* data;			\/* additional data *\/$/;"	m	struct:Zio	access:public
db_debug	src/ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_errorfb	src/ldblib.c	/^static int db_errorfb (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_getfenv	src/ldblib.c	/^static int db_getfenv (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_gethook	src/ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_getinfo	src/ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_getlocal	src/ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_getmetatable	src/ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_getregistry	src/ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_getupvalue	src/ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_setfenv	src/ldblib.c	/^static int db_setfenv (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_sethook	src/ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_setlocal	src/ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_setmetatable	src/ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
db_setupvalue	src/ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
dblib	src/ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	file:
decpoint	src/llex.h	/^  char decpoint;  \/* locale decimal point *\/$/;"	m	struct:LexState	access:public
discharge2anyreg	src/lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e)
discharge2reg	src/lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e, int reg)
dischargejpc	src/lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	file:	signature:(FuncState *fs)
doargs	src/luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	file:	signature:(int argc, char* argv[])
docall	src/lua.c	/^static int docall (lua_State *L, int narg, int clear) {$/;"	f	file:	signature:(lua_State *L, int narg, int clear)
dofile	src/lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	file:	signature:(lua_State *L, const char *name)
dojump	src/lvm.c	/^#define dojump(/;"	d	file:
dolibrary	src/lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	file:	signature:(lua_State *L, const char *name)
dooptions	src/loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	file:	signature:(lua_State *L, int n)
dostring	src/lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	file:	signature:(lua_State *L, const char *s, const char *name)
dotty	src/lua.c	/^static void dotty (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
dummy	src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for `local' udata *\/$/;"	m	union:Udata	access:public
dummy	src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:TString	access:public
dummynode	src/ltable.c	/^#define dummynode	/;"	d	file:
dummynode_	src/ltable.c	/^static const Node dummynode_ = {$/;"	v	file:
dumping	src/luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	file:
emptybuffer	src/lauxlib.c	/^static int emptybuffer (luaL_Buffer *B) {$/;"	f	file:	signature:(luaL_Buffer *B)
end_capture	src/lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	file:	signature:(MatchState *ms, const char *s, const char *p)
end_ci	src/lstate.h	/^  CallInfo *end_ci;  \/* points after end of ci array*\/$/;"	m	struct:lua_State	access:public
endpc	src/lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar	access:public
enterblock	src/lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isbreakable) {$/;"	f	file:	signature:(FuncState *fs, BlockCnt *bl, lu_byte isbreakable)
enterlevel	src/lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
env	src/lobject.h	/^    struct Table *env;$/;"	m	struct:Udata::__anon5	typeref:struct:Udata::__anon5::Table	access:public
env	src/lstate.h	/^  TValue env;  \/* temporary place for environments *\/$/;"	m	struct:lua_State	access:public
equalobj	src/lvm.h	/^#define equalobj(/;"	d
errfile	src/lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	file:	signature:(lua_State *L, const char *what, int fnameindex)
errfunc	src/lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State	access:public
error	src/lundump.c	/^#define error(/;"	d	file:
error	src/lundump.c	/^static void error(LoadState* S, const char* why)$/;"	f	file:	signature:(LoadState* S, const char* why)
errorJmp	src/lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp	access:public
error_expected	src/lparser.c	/^static void error_expected (LexState *ls, int token) {$/;"	f	file:	signature:(LexState *ls, int token)
errorfromcode	src/loadlib.c	/^static const char *errorfromcode (NSObjectFileImageReturnCode ret) {$/;"	f	file:	signature:(NSObjectFileImageReturnCode ret)
errorlimit	src/lparser.c	/^static void errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	file:	signature:(FuncState *fs, int limit, const char *what)
estimate	src/lstate.h	/^  lu_mem estimate;  \/* an estimate of number of bytes actually in use *\/$/;"	m	struct:global_State	access:public
event	src/lua.h	/^  int event;$/;"	m	struct:lua_Debug	access:public
exp1	src/lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
exp2reg	src/lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e, int reg)
expdesc	src/lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	src/lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expdesc::__anon12::__anon13::aux	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon12::__anon13	access:public
expdesc::__anon12::__anon13::info	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon12::__anon13	access:public
expdesc::__anon12::nval	src/lparser.h	/^    lua_Number nval;$/;"	m	union:expdesc::__anon12	access:public
expdesc::__anon12::s	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	union:expdesc::__anon12	typeref:struct:expdesc::__anon12::__anon13	access:public
expdesc::f	src/lparser.h	/^  int f;  \/* patch list of `exit when false' *\/$/;"	m	struct:expdesc	access:public
expdesc::k	src/lparser.h	/^  expkind k;$/;"	m	struct:expdesc	access:public
expdesc::t	src/lparser.h	/^  int t;  \/* patch list of `exit when true' *\/$/;"	m	struct:expdesc	access:public
expdesc::u	src/lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon12	access:public
expkind	src/lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon11
explist1	src/lparser.c	/^static int explist1 (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
expr	src/lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
expr	src/lparser.c	/^static void expr (LexState *ls, expdesc *v);$/;"	p	file:	signature:(LexState *ls, expdesc *v)
exprstat	src/lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
extraline	src/lauxlib.c	/^  int extraline;$/;"	m	struct:LoadF	file:	access:public
f	src/lauxlib.c	/^  FILE *f;$/;"	m	struct:LoadF	file:	access:public
f	src/lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure	access:public
f	src/lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState	access:public
f	src/lparser.h	/^  int f;  \/* patch list of `exit when false' *\/$/;"	m	struct:expdesc	access:public
f_Ccall	src/lapi.c	/^static void f_Ccall (lua_State *L, void *ud) {$/;"	f	file:	signature:(lua_State *L, void *ud)
f_call	src/lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	file:	signature:(lua_State *L, void *ud)
f_flush	src/liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
f_isLua	src/lstate.h	/^#define f_isLua(/;"	d
f_lines	src/liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
f_luaopen	src/lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	file:	signature:(lua_State *L, void *ud)
f_parser	src/ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	file:	signature:(lua_State *L, void *ud)
f_read	src/liolib.c	/^static int f_read (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
f_seek	src/liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
f_setvbuf	src/liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
f_write	src/liolib.c	/^static int f_write (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
fasttm	src/ltm.h	/^#define fasttm(/;"	d
fatal	src/luac.c	/^static void fatal(const char* message)$/;"	f	file:	signature:(const char* message)
field	src/lparser.c	/^static void field (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
fileerror	src/liolib.c	/^static void fileerror (lua_State *L, int arg, const char *filename) {$/;"	f	file:	signature:(lua_State *L, int arg, const char *filename)
findfile	src/loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	file:	signature:(lua_State *L, const char *name, const char *pname)
findindex	src/ltable.c	/^static int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	file:	signature:(lua_State *L, Table *t, StkId key)
findlocal	src/ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n) {$/;"	f	file:	signature:(lua_State *L, CallInfo *ci, int n)
fixjump	src/lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	file:	signature:(FuncState *fs, int pc, int dest)
flags	src/lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/ $/;"	m	struct:Table	access:public
flib	src/liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	file:
fnames	src/liolib.c	/^static const char *const fnames[] = {"input", "output"};$/;"	v	file:
forbody	src/lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	file:	signature:(LexState *ls, int base, int line, int nvars, int isnum)
foreach	src/ltablib.c	/^static int foreach (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
foreachi	src/ltablib.c	/^static int foreachi (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
forlist	src/lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	file:	signature:(LexState *ls, TString *indexname)
fornum	src/lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	file:	signature:(LexState *ls, TString *varname, int line)
forstat	src/lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	file:	signature:(LexState *ls, int line)
frealloc	src/lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State	access:public
freeexp	src/lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e)
freeobj	src/lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	file:	signature:(lua_State *L, GCObject *o)
freereg	src/lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	file:	signature:(FuncState *fs, int reg)
freereg	src/lparser.h	/^  int freereg;  \/* first free register *\/$/;"	m	struct:FuncState	access:public
freestack	src/lstate.c	/^static void freestack (lua_State *L, lua_State *L1) {$/;"	f	file:	signature:(lua_State *L, lua_State *L1)
fromstate	src/lstate.c	/^#define fromstate(/;"	d	file:
fs	src/llex.h	/^  struct FuncState *fs;  \/* `FuncState' is private to the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState	access:public
func	src/lapi.c	/^  StkId func;$/;"	m	struct:CallS	file:	access:public
func	src/lapi.c	/^  lua_CFunction func;$/;"	m	struct:CCallS	file:	access:public
func	src/lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg	access:public
func	src/lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo	access:public
funcargs	src/lparser.c	/^static void funcargs (LexState *ls, expdesc *f) {$/;"	f	file:	signature:(LexState *ls, expdesc *f)
funcinfo	src/ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	file:	signature:(lua_Debug *ar, Closure *cl)
funcname	src/lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
funcstat	src/lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	file:	signature:(LexState *ls, int line)
g	src/lstate.c	/^  global_State g;$/;"	m	struct:LG	file:	access:public
g_iofile	src/liolib.c	/^static int g_iofile (lua_State *L, int f, const char *mode) {$/;"	f	file:	signature:(lua_State *L, int f, const char *mode)
g_read	src/liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	file:	signature:(lua_State *L, FILE *f, int first)
g_write	src/liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	file:	signature:(lua_State *L, FILE *f, int arg)
gc	src/lobject.h	/^  GCObject *gc;$/;"	m	union:__anon3	access:public
gcdept	src/lstate.h	/^  lu_mem gcdept;  \/* how much GC is `behind schedule' *\/$/;"	m	struct:global_State	access:public
gch	src/lstate.h	/^  GCheader gch;$/;"	m	union:GCObject	access:public
gclist	src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto	access:public
gclist	src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table	access:public
gclist	src/lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State	access:public
gco2cl	src/lstate.h	/^#define gco2cl(/;"	d
gco2h	src/lstate.h	/^#define gco2h(/;"	d
gco2p	src/lstate.h	/^#define gco2p(/;"	d
gco2th	src/lstate.h	/^#define gco2th(/;"	d
gco2ts	src/lstate.h	/^#define gco2ts(/;"	d
gco2u	src/lstate.h	/^#define gco2u(/;"	d
gco2uv	src/lstate.h	/^#define gco2uv(/;"	d
gcpause	src/lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State	access:public
gcstate	src/lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State	access:public
gcstepmul	src/lstate.h	/^  int gcstepmul;  \/* GC `granularity' *\/$/;"	m	struct:global_State	access:public
gctm	src/loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
gcvalue	src/lobject.h	/^#define gcvalue(/;"	d
generic_reader	src/lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	file:	signature:(lua_State *L, void *ud, size_t *size)
getBMode	src/lopcodes.h	/^#define getBMode(/;"	d
getCMode	src/lopcodes.h	/^#define getCMode(/;"	d
getF	src/lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	file:	signature:(lua_State *L, void *ud, size_t *size)
getOpMode	src/lopcodes.h	/^#define getOpMode(/;"	d
getS	src/lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	file:	signature:(lua_State *L, void *ud, size_t *size)
get_compTM	src/lvm.c	/^static const TValue *get_compTM (lua_State *L, Table *mt1, Table *mt2,$/;"	f	file:	signature:(lua_State *L, Table *mt1, Table *mt2, TMS event)
get_prompt	src/lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	file:	signature:(lua_State *L, int firstline)
getargs	src/lua.c	/^static int getargs (lua_State *L, char **argv, int n) {$/;"	f	file:	signature:(lua_State *L, char **argv, int n)
getbinopr	src/lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	file:	signature:(int op)
getboolfield	src/loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	file:	signature:(lua_State *L, const char *key)
getcode	src/lcode.h	/^#define getcode(/;"	d
getcurrenv	src/lapi.c	/^static Table *getcurrenv (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
getfield	src/loslib.c	/^static int getfield (lua_State *L, const char *key, int d) {$/;"	f	file:	signature:(lua_State *L, const char *key, int d)
getfreepos	src/ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	file:	signature:(Table *t)
getfunc	src/lbaselib.c	/^static void getfunc (lua_State *L, int opt) {$/;"	f	file:	signature:(lua_State *L, int opt)
getfuncname	src/ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	file:	signature:(lua_State *L, CallInfo *ci, const char **name)
getfuncname	src/ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name);$/;"	p	file:	signature:(lua_State *L, CallInfo *ci, const char **name)
gethooktable	src/ldblib.c	/^static void gethooktable (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
getiofile	src/liolib.c	/^static FILE *getiofile (lua_State *L, int findex) {$/;"	f	file:	signature:(lua_State *L, int findex)
getjump	src/lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	file:	signature:(FuncState *fs, int pc)
getjumpcontrol	src/lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	file:	signature:(FuncState *fs, int pc)
getline	src/ldebug.h	/^#define getline(/;"	d
getlocvar	src/lparser.c	/^#define getlocvar(/;"	d	file:
getluaproto	src/ldebug.c	/^static Proto *getluaproto (CallInfo *ci) {$/;"	f	file:	signature:(CallInfo *ci)
getn	src/ltablib.c	/^static int getn (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
getobjname	src/ldebug.c	/^static const char *getobjname (lua_State *L, CallInfo *ci, int stackpos,$/;"	f	file:	signature:(lua_State *L, CallInfo *ci, int stackpos, const char **name)
getsizes	src/lauxlib.c	/^static void getsizes (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
getstr	src/lobject.h	/^#define getstr(/;"	d
getthread	src/ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	file:	signature:(lua_State *L, int *arg)
getunopr	src/lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	file:	signature:(int op)
gfasttm	src/ltm.h	/^#define gfasttm(/;"	d
gfind_nodef	src/lstrlib.c	/^static int gfind_nodef (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
gkey	src/ltable.h	/^#define gkey(/;"	d
globalL	src/lua.c	/^static lua_State *globalL = NULL;$/;"	v	file:
global_State	src/lstate.h	/^typedef struct global_State {$/;"	s
global_State	src/lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
global_State::GCthreshold	src/lstate.h	/^  lu_mem GCthreshold;$/;"	m	struct:global_State	access:public
global_State::buff	src/lstate.h	/^  Mbuffer buff;  \/* temporary buffer for string concatentation *\/$/;"	m	struct:global_State	access:public
global_State::currentwhite	src/lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State	access:public
global_State::estimate	src/lstate.h	/^  lu_mem estimate;  \/* an estimate of number of bytes actually in use *\/$/;"	m	struct:global_State	access:public
global_State::frealloc	src/lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State	access:public
global_State::gcdept	src/lstate.h	/^  lu_mem gcdept;  \/* how much GC is `behind schedule' *\/$/;"	m	struct:global_State	access:public
global_State::gcpause	src/lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State	access:public
global_State::gcstate	src/lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State	access:public
global_State::gcstepmul	src/lstate.h	/^  int gcstepmul;  \/* GC `granularity' *\/$/;"	m	struct:global_State	access:public
global_State::gray	src/lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State	access:public
global_State::grayagain	src/lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State	access:public
global_State::l_registry	src/lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State	access:public
global_State::mainthread	src/lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State	access:public
global_State::mt	src/lstate.h	/^  struct Table *mt[NUM_TAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table	access:public
global_State::panic	src/lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State	access:public
global_State::rootgc	src/lstate.h	/^  GCObject *rootgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State	access:public
global_State::strt	src/lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State	access:public
global_State::sweepgc	src/lstate.h	/^  GCObject **sweepgc;  \/* position of sweep in `rootgc' *\/$/;"	m	struct:global_State	access:public
global_State::sweepstrgc	src/lstate.h	/^  int sweepstrgc;  \/* position of sweep in `strt' *\/$/;"	m	struct:global_State	access:public
global_State::tmname	src/lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State	access:public
global_State::tmudata	src/lstate.h	/^  GCObject *tmudata;  \/* last element of list of userdata to be GC *\/$/;"	m	struct:global_State	access:public
global_State::totalbytes	src/lstate.h	/^  lu_mem totalbytes;  \/* number of bytes currently allocated *\/$/;"	m	struct:global_State	access:public
global_State::ud	src/lstate.h	/^  void *ud;         \/* auxiliary data to `frealloc' *\/$/;"	m	struct:global_State	access:public
global_State::uvhead	src/lstate.h	/^  UpVal uvhead;  \/* head of double-linked list of all open upvalues *\/$/;"	m	struct:global_State	access:public
global_State::weak	src/lstate.h	/^  GCObject *weak;  \/* list of weak tables (to be cleared) *\/$/;"	m	struct:global_State	access:public
gmatch	src/lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
gmatch_aux	src/lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
gnext	src/ltable.h	/^#define gnext(/;"	d
gnode	src/ltable.h	/^#define gnode(/;"	d
gray	src/lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State	access:public
gray2black	src/lgc.h	/^#define gray2black(/;"	d
grayagain	src/lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State	access:public
growCI	src/ldo.c	/^static CallInfo *growCI (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
gt	src/lstate.h	/^#define gt(/;"	d
gval	src/ltable.h	/^#define gval(/;"	d
h	src/lparser.h	/^  Table *h;  \/* table to find (and reuse) elements in `k' *\/$/;"	m	struct:FuncState	access:public
h	src/lstate.h	/^  struct Table h;$/;"	m	union:GCObject	typeref:struct:GCObject::Table	access:public
handle_luainit	src/lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
handle_script	src/lua.c	/^static int handle_script (lua_State *L, char **argv, int n) {$/;"	f	file:	signature:(lua_State *L, char **argv, int n)
hash	src/lobject.h	/^    unsigned int hash;$/;"	m	struct:TString::__anon4	access:public
hash	src/lstate.h	/^  GCObject **hash;$/;"	m	struct:stringtable	access:public
hashboolean	src/ltable.c	/^#define hashboolean(/;"	d	file:
hashmod	src/ltable.c	/^#define hashmod(/;"	d	file:
hashnum	src/ltable.c	/^static Node *hashnum (const Table *t, lua_Number n) {$/;"	f	file:	signature:(const Table *t, lua_Number n)
hashpointer	src/ltable.c	/^#define hashpointer(/;"	d	file:
hashpow2	src/ltable.c	/^#define hashpow2(/;"	d	file:
hashstr	src/ltable.c	/^#define hashstr(/;"	d	file:
hasjumps	src/lcode.c	/^#define hasjumps(/;"	d	file:
hasmultret	src/lparser.c	/^#define hasmultret(/;"	d	file:
hook	src/lstate.h	/^  lua_Hook hook;$/;"	m	struct:lua_State	access:public
hookcount	src/lstate.h	/^  int hookcount;$/;"	m	struct:lua_State	access:public
hookf	src/ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	file:	signature:(lua_State *L, lua_Debug *ar)
hookmask	src/lstate.h	/^  lu_byte hookmask;$/;"	m	struct:lua_State	access:public
hvalue	src/lobject.h	/^#define hvalue(/;"	d
iABC	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	src/lua.h	/^  int i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	access:public
i_key	src/lobject.h	/^  TKey i_key;$/;"	m	struct:Node	access:public
i_val	src/lobject.h	/^  TValue i_val;$/;"	m	struct:Node	access:public
ifstat	src/lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	file:	signature:(LexState *ls, int line)
inc_ci	src/ldo.c	/^#define inc_ci(/;"	d	file:
inclinenumber	src/llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
incomplete	src/lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	file:	signature:(lua_State *L, int status)
incr_top	src/ldo.h	/^#define incr_top(/;"	d
index2adr	src/lapi.c	/^static TValue *index2adr (lua_State *L, int idx) {$/;"	f	file:	signature:(lua_State *L, int idx)
indexupvalue	src/lparser.c	/^static int indexupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	file:	signature:(FuncState *fs, TString *name, expdesc *v)
info	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon12::__anon13	access:public
info	src/lparser.h	/^  lu_byte info;$/;"	m	struct:upvaldesc	access:public
info_tailcall	src/ldebug.c	/^static void info_tailcall (lua_Debug *ar) {$/;"	f	file:	signature:(lua_Debug *ar)
init	src/lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon14	file:	access:public
init_exp	src/lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	file:	signature:(expdesc *e, expkind k, int i)
invertjump	src/lcode.c	/^static void invertjump (FuncState *fs, expdesc *e) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e)
io_close	src/liolib.c	/^static int io_close (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_fclose	src/liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_flush	src/liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_gc	src/liolib.c	/^static int io_gc (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_input	src/liolib.c	/^static int io_input (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_lines	src/liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_noclose	src/liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_open	src/liolib.c	/^static int io_open (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_output	src/liolib.c	/^static int io_output (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_pclose	src/liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_popen	src/liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_read	src/liolib.c	/^static int io_read (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_readline	src/liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_readline	src/liolib.c	/^static int io_readline (lua_State *L);$/;"	p	file:	signature:(lua_State *L)
io_tmpfile	src/liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_tostring	src/liolib.c	/^static int io_tostring (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_type	src/liolib.c	/^static int io_type (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
io_write	src/liolib.c	/^static int io_write (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
iolib	src/liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	file:
ipairsaux	src/lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
isLfunction	src/lobject.h	/^#define isLfunction(/;"	d
isLua	src/lstate.h	/^#define isLua(/;"	d
is_vararg	src/lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto	access:public
isblack	src/lgc.h	/^#define isblack(/;"	d
isbreakable	src/lparser.c	/^  lu_byte isbreakable;  \/* true if `block' is a loop *\/$/;"	m	struct:BlockCnt	file:	access:public
iscfunction	src/lobject.h	/^#define iscfunction(/;"	d
iscleared	src/lgc.c	/^static int iscleared (const TValue *o, int iskey) {$/;"	f	file:	signature:(const TValue *o, int iskey)
iscollectable	src/lobject.h	/^#define iscollectable(/;"	d
isdead	src/lgc.h	/^#define isdead(/;"	d
isfinalized	src/lgc.c	/^#define isfinalized(/;"	d	file:
isgray	src/lgc.h	/^#define isgray(/;"	d
isinstack	src/ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	file:	signature:(CallInfo *ci, const TValue *o)
isnumeral	src/lcode.c	/^static int isnumeral(expdesc *e) {$/;"	f	file:	signature:(expdesc *e)
iswhite	src/lgc.h	/^#define iswhite(/;"	d
jpc	src/lparser.h	/^  int jpc;  \/* list of pending jumps to `pc' *\/$/;"	m	struct:FuncState	access:public
jumponcond	src/lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e, int cond)
k	src/lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto	access:public
k	src/lparser.h	/^  expkind k;$/;"	m	struct:expdesc	access:public
k	src/lparser.h	/^  lu_byte k;$/;"	m	struct:upvaldesc	access:public
key2tval	src/ltable.h	/^#define key2tval(/;"	d
kname	src/ldebug.c	/^static const char *kname (Proto *p, int c) {$/;"	f	file:	signature:(Proto *p, int c)
l	src/lobject.h	/^    } l;$/;"	m	union:UpVal::__anon6	typeref:struct:UpVal::__anon6::__anon7	access:public
l	src/lobject.h	/^  LClosure l;$/;"	m	union:Closure	access:public
l	src/lstate.c	/^  lua_State l;$/;"	m	struct:LG	file:	access:public
l_G	src/lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State	access:public
l_alloc	src/lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	file:	signature:(void *ud, void *ptr, size_t osize, size_t nsize)
l_d	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast	access:public
l_gt	src/lstate.h	/^  TValue l_gt;  \/* table of globals *\/$/;"	m	struct:lua_State	access:public
l_isfalse	src/lobject.h	/^#define l_isfalse(/;"	d
l_l	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast	access:public
l_mem	src/llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_message	src/lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	file:	signature:(const char *pname, const char *msg)
l_registry	src/lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State	access:public
l_setbit	src/lgc.h	/^#define l_setbit(/;"	d
l_strcmp	src/lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	file:	signature:(const TString *ls, const TString *rs)
l_uacNumber	src/llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
laction	src/lua.c	/^static void laction (int i) {$/;"	f	file:	signature:(int i)
lapi_c	src/lapi.c	/^#define lapi_c$/;"	d	file:
lapi_h	src/lapi.h	/^#define lapi_h$/;"	d
lastfree	src/lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table	access:public
lastline	src/llex.h	/^  int lastline;  \/* line of last token `consumed' *\/$/;"	m	struct:LexState	access:public
lastlinedefined	src/lobject.h	/^  int lastlinedefined;$/;"	m	struct:Proto	access:public
lastlinedefined	src/lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	access:public
lastlistfield	src/lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:	signature:(FuncState *fs, struct ConsControl *cc)
lasttarget	src/lparser.h	/^  int lasttarget;   \/* `pc' of last `jump target' *\/$/;"	m	struct:FuncState	access:public
lauxlib_c	src/lauxlib.c	/^#define lauxlib_c$/;"	d	file:
lauxlib_h	src/lauxlib.h	/^#define lauxlib_h$/;"	d
lbaselib_c	src/lbaselib.c	/^#define lbaselib_c$/;"	d	file:
lcode_c	src/lcode.c	/^#define lcode_c$/;"	d	file:
lcode_h	src/lcode.h	/^#define lcode_h$/;"	d
lconfig_h	src/luaconf.h	/^#define lconfig_h$/;"	d
ldblib_c	src/ldblib.c	/^#define ldblib_c$/;"	d	file:
ldebug_c	src/ldebug.c	/^#define ldebug_c$/;"	d	file:
ldebug_h	src/ldebug.h	/^#define ldebug_h$/;"	d
ldo_c	src/ldo.c	/^#define ldo_c$/;"	d	file:
ldo_h	src/ldo.h	/^#define ldo_h$/;"	d
ldump_c	src/ldump.c	/^#define ldump_c$/;"	d	file:
leaveblock	src/lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	file:	signature:(FuncState *fs)
leavelevel	src/lparser.c	/^#define leavelevel(/;"	d	file:
left	src/lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon10	file:	access:public
len	src/lobject.h	/^    size_t len;$/;"	m	struct:TString::__anon4	access:public
len	src/lobject.h	/^    size_t len;$/;"	m	struct:Udata::__anon5	access:public
len	src/lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon14	file:	access:public
lessequal	src/lvm.c	/^static int lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	file:	signature:(lua_State *L, const TValue *l, const TValue *r)
level	src/lstrlib.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:	access:public
lfunc_c	src/lfunc.c	/^#define lfunc_c$/;"	d	file:
lfunc_h	src/lfunc.h	/^#define lfunc_h$/;"	d
lgc_c	src/lgc.c	/^#define lgc_c$/;"	d	file:
lgc_h	src/lgc.h	/^#define lgc_h$/;"	d
libsize	src/lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	file:	signature:(const luaL_Reg *l)
linedefined	src/lobject.h	/^  int linedefined;$/;"	m	struct:Proto	access:public
linedefined	src/lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	access:public
lineinfo	src/lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines *\/$/;"	m	struct:Proto	access:public
linenumber	src/llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState	access:public
linit_c	src/linit.c	/^#define linit_c$/;"	d	file:
liolib_c	src/liolib.c	/^#define liolib_c$/;"	d	file:
listfield	src/lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:	signature:(LexState *ls, struct ConsControl *cc)
listing	src/luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	file:
ll_funcs	src/loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	file:
ll_load	src/loadlib.c	/^static void *ll_load (lua_State *L, const char *path) {$/;"	f	file:	signature:(lua_State *L, const char *path)
ll_load	src/loadlib.c	/^static void *ll_load (lua_State *L, const char *path);$/;"	p	file:	signature:(lua_State *L, const char *path)
ll_loadfunc	src/loadlib.c	/^static int ll_loadfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	file:	signature:(lua_State *L, const char *path, const char *sym)
ll_loadlib	src/loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
ll_module	src/loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
ll_register	src/loadlib.c	/^static void **ll_register (lua_State *L, const char *path) {$/;"	f	file:	signature:(lua_State *L, const char *path)
ll_require	src/loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
ll_seeall	src/loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
ll_sym	src/loadlib.c	/^static lua_CFunction ll_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	file:	signature:(lua_State *L, void *lib, const char *sym)
ll_sym	src/loadlib.c	/^static lua_CFunction ll_sym (lua_State *L, void *lib, const char *sym);$/;"	p	file:	signature:(lua_State *L, void *lib, const char *sym)
ll_unloadlib	src/loadlib.c	/^static void ll_unloadlib (void *lib) {$/;"	f	file:	signature:(void *lib)
ll_unloadlib	src/loadlib.c	/^static void ll_unloadlib (void *lib);$/;"	p	file:	signature:(void *lib)
llex	src/llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	file:	signature:(LexState *ls, SemInfo *seminfo)
llex_c	src/llex.c	/^#define llex_c$/;"	d	file:
llex_h	src/llex.h	/^#define llex_h$/;"	d
llimits_h	src/llimits.h	/^#define llimits_h$/;"	d
lmathlib_c	src/lmathlib.c	/^#define lmathlib_c$/;"	d	file:
lmem_c	src/lmem.c	/^#define lmem_c$/;"	d	file:
lmem_h	src/lmem.h	/^#define lmem_h$/;"	d
lmemfind	src/lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	file:	signature:(const char *s1, size_t l1, const char *s2, size_t l2)
lmod	src/lobject.h	/^#define lmod(/;"	d
load_aux	src/lbaselib.c	/^static int load_aux (lua_State *L, int status) {$/;"	f	file:	signature:(lua_State *L, int status)
loader_C	src/loadlib.c	/^static int loader_C (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
loader_Croot	src/loadlib.c	/^static int loader_Croot (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
loader_Lua	src/loadlib.c	/^static int loader_Lua (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
loader_preload	src/loadlib.c	/^static int loader_preload (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
loaderror	src/loadlib.c	/^static void loaderror (lua_State *L, const char *filename) {$/;"	f	file:	signature:(lua_State *L, const char *filename)
loaders	src/loadlib.c	/^static const lua_CFunction loaders[] =$/;"	v	file:
loadlib_c	src/loadlib.c	/^#define loadlib_c$/;"	d	file:
loadline	src/lua.c	/^static int loadline (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
lobject_c	src/lobject.c	/^#define lobject_c$/;"	d	file:
lobject_h	src/lobject.h	/^#define lobject_h$/;"	d
localfunc	src/lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
localstat	src/lparser.c	/^static void localstat (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
locvars	src/lobject.h	/^  struct LocVar *locvars;  \/* information about local variables *\/$/;"	m	struct:Proto	typeref:struct:Proto::LocVar	access:public
lookahead	src/llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState	access:public
lopcodes_c	src/lopcodes.c	/^#define lopcodes_c$/;"	d	file:
lopcodes_h	src/lopcodes.h	/^#define lopcodes_h$/;"	d
loslib_c	src/loslib.c	/^#define loslib_c$/;"	d	file:
lparser_c	src/lparser.c	/^#define lparser_c$/;"	d	file:
lparser_h	src/lparser.h	/^#define lparser_h$/;"	d
ls	src/lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState	access:public
lsizenode	src/lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of `node' array *\/$/;"	m	struct:Table	access:public
lstate_c	src/lstate.c	/^#define lstate_c$/;"	d	file:
lstate_h	src/lstate.h	/^#define lstate_h$/;"	d
lstop	src/lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	file:	signature:(lua_State *L, lua_Debug *ar)
lstring_c	src/lstring.c	/^#define lstring_c$/;"	d	file:
lstring_h	src/lstring.h	/^#define lstring_h$/;"	d
lstrlib_c	src/lstrlib.c	/^#define lstrlib_c$/;"	d	file:
ltable_c	src/ltable.c	/^#define ltable_c$/;"	d	file:
ltable_h	src/ltable.h	/^#define ltable_h$/;"	d
ltablib_c	src/ltablib.c	/^#define ltablib_c$/;"	d	file:
ltm_c	src/ltm.c	/^#define ltm_c$/;"	d	file:
ltm_h	src/ltm.h	/^#define ltm_h$/;"	d
lu_byte	src/llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_int32	src/llimits.h	/^typedef LUAI_UINT32 lu_int32;$/;"	t
lu_mem	src/llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
luaA_pushobject	src/lapi.c	/^void luaA_pushobject (lua_State *L, const TValue *o) {$/;"	f	signature:(lua_State *L, const TValue *o)
luaA_pushobject	src/lapi.h	/^LUAI_FUNC void luaA_pushobject (lua_State *L, const TValue *o);$/;"	p	signature:(lua_State *L, const TValue *o)
luaB_assert	src/lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_auxwrap	src/lbaselib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_cocreate	src/lbaselib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_collectgarbage	src/lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_coresume	src/lbaselib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_corunning	src/lbaselib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_costatus	src/lbaselib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_cowrap	src/lbaselib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_dofile	src/lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_error	src/lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_gcinfo	src/lbaselib.c	/^static int luaB_gcinfo (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_getfenv	src/lbaselib.c	/^static int luaB_getfenv (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_getmetatable	src/lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_ipairs	src/lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_load	src/lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_loadfile	src/lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_loadstring	src/lbaselib.c	/^static int luaB_loadstring (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_newproxy	src/lbaselib.c	/^static int luaB_newproxy (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_next	src/lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_pairs	src/lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_pcall	src/lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_print	src/lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_rawequal	src/lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_rawget	src/lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_rawset	src/lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_select	src/lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_setfenv	src/lbaselib.c	/^static int luaB_setfenv (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_setmetatable	src/lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_tonumber	src/lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_tostring	src/lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_type	src/lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_unpack	src/lbaselib.c	/^static int luaB_unpack (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_xpcall	src/lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaB_yield	src/lbaselib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
luaC_barrier	src/lgc.h	/^#define luaC_barrier(/;"	d
luaC_barrierback	src/lgc.c	/^void luaC_barrierback (lua_State *L, Table *t) {$/;"	f	signature:(lua_State *L, Table *t)
luaC_barrierback	src/lgc.h	/^LUAI_FUNC void luaC_barrierback (lua_State *L, Table *t);$/;"	p	signature:(lua_State *L, Table *t)
luaC_barrierf	src/lgc.c	/^void luaC_barrierf (lua_State *L, GCObject *o, GCObject *v) {$/;"	f	signature:(lua_State *L, GCObject *o, GCObject *v)
luaC_barrierf	src/lgc.h	/^LUAI_FUNC void luaC_barrierf (lua_State *L, GCObject *o, GCObject *v);$/;"	p	signature:(lua_State *L, GCObject *o, GCObject *v)
luaC_barriert	src/lgc.h	/^#define luaC_barriert(/;"	d
luaC_callGCTM	src/lgc.c	/^void luaC_callGCTM (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaC_callGCTM	src/lgc.h	/^LUAI_FUNC void luaC_callGCTM (lua_State *L);$/;"	p	signature:(lua_State *L)
luaC_checkGC	src/lgc.h	/^#define luaC_checkGC(/;"	d
luaC_freeall	src/lgc.c	/^void luaC_freeall (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaC_freeall	src/lgc.h	/^LUAI_FUNC void luaC_freeall (lua_State *L);$/;"	p	signature:(lua_State *L)
luaC_fullgc	src/lgc.c	/^void luaC_fullgc (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaC_fullgc	src/lgc.h	/^LUAI_FUNC void luaC_fullgc (lua_State *L);$/;"	p	signature:(lua_State *L)
luaC_link	src/lgc.c	/^void luaC_link (lua_State *L, GCObject *o, lu_byte tt) {$/;"	f	signature:(lua_State *L, GCObject *o, lu_byte tt)
luaC_link	src/lgc.h	/^LUAI_FUNC void luaC_link (lua_State *L, GCObject *o, lu_byte tt);$/;"	p	signature:(lua_State *L, GCObject *o, lu_byte tt)
luaC_linkupval	src/lgc.c	/^void luaC_linkupval (lua_State *L, UpVal *uv) {$/;"	f	signature:(lua_State *L, UpVal *uv)
luaC_linkupval	src/lgc.h	/^LUAI_FUNC void luaC_linkupval (lua_State *L, UpVal *uv);$/;"	p	signature:(lua_State *L, UpVal *uv)
luaC_objbarrier	src/lgc.h	/^#define luaC_objbarrier(/;"	d
luaC_objbarriert	src/lgc.h	/^#define luaC_objbarriert(/;"	d
luaC_separateudata	src/lgc.c	/^size_t luaC_separateudata (lua_State *L, int all) {$/;"	f	signature:(lua_State *L, int all)
luaC_separateudata	src/lgc.h	/^LUAI_FUNC size_t luaC_separateudata (lua_State *L, int all);$/;"	p	signature:(lua_State *L, int all)
luaC_step	src/lgc.c	/^void luaC_step (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaC_step	src/lgc.h	/^LUAI_FUNC void luaC_step (lua_State *L);$/;"	p	signature:(lua_State *L)
luaC_white	src/lgc.h	/^#define luaC_white(/;"	d
luaD_call	src/ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f	signature:(lua_State *L, StkId func, int nResults)
luaD_call	src/ldo.h	/^LUAI_FUNC void luaD_call (lua_State *L, StkId func, int nResults);$/;"	p	signature:(lua_State *L, StkId func, int nResults)
luaD_callhook	src/ldo.c	/^void luaD_callhook (lua_State *L, int event, int line) {$/;"	f	signature:(lua_State *L, int event, int line)
luaD_callhook	src/ldo.h	/^LUAI_FUNC void luaD_callhook (lua_State *L, int event, int line);$/;"	p	signature:(lua_State *L, int event, int line)
luaD_checkstack	src/ldo.h	/^#define luaD_checkstack(/;"	d
luaD_growstack	src/ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f	signature:(lua_State *L, int n)
luaD_growstack	src/ldo.h	/^LUAI_FUNC void luaD_growstack (lua_State *L, int n);$/;"	p	signature:(lua_State *L, int n)
luaD_pcall	src/ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f	signature:(lua_State *L, Pfunc func, void *u, ptrdiff_t old_top, ptrdiff_t ef)
luaD_pcall	src/ldo.h	/^LUAI_FUNC int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	p	signature:(lua_State *L, Pfunc func, void *u, ptrdiff_t oldtop, ptrdiff_t ef)
luaD_poscall	src/ldo.c	/^int luaD_poscall (lua_State *L, StkId firstResult) {$/;"	f	signature:(lua_State *L, StkId firstResult)
luaD_poscall	src/ldo.h	/^LUAI_FUNC int luaD_poscall (lua_State *L, StkId firstResult);$/;"	p	signature:(lua_State *L, StkId firstResult)
luaD_precall	src/ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f	signature:(lua_State *L, StkId func, int nresults)
luaD_precall	src/ldo.h	/^LUAI_FUNC int luaD_precall (lua_State *L, StkId func, int nresults);$/;"	p	signature:(lua_State *L, StkId func, int nresults)
luaD_protectedparser	src/ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name) {$/;"	f	signature:(lua_State *L, ZIO *z, const char *name)
luaD_protectedparser	src/ldo.h	/^LUAI_FUNC int luaD_protectedparser (lua_State *L, ZIO *z, const char *name);$/;"	p	signature:(lua_State *L, ZIO *z, const char *name)
luaD_rawrunprotected	src/ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f	signature:(lua_State *L, Pfunc f, void *ud)
luaD_rawrunprotected	src/ldo.h	/^LUAI_FUNC int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud);$/;"	p	signature:(lua_State *L, Pfunc f, void *ud)
luaD_reallocCI	src/ldo.c	/^void luaD_reallocCI (lua_State *L, int newsize) {$/;"	f	signature:(lua_State *L, int newsize)
luaD_reallocCI	src/ldo.h	/^LUAI_FUNC void luaD_reallocCI (lua_State *L, int newsize);$/;"	p	signature:(lua_State *L, int newsize)
luaD_reallocstack	src/ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f	signature:(lua_State *L, int newsize)
luaD_reallocstack	src/ldo.h	/^LUAI_FUNC void luaD_reallocstack (lua_State *L, int newsize);$/;"	p	signature:(lua_State *L, int newsize)
luaD_seterrorobj	src/ldo.c	/^void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	signature:(lua_State *L, int errcode, StkId oldtop)
luaD_seterrorobj	src/ldo.h	/^LUAI_FUNC void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop);$/;"	p	signature:(lua_State *L, int errcode, StkId oldtop)
luaD_throw	src/ldo.c	/^void luaD_throw (lua_State *L, int errcode) {$/;"	f	signature:(lua_State *L, int errcode)
luaD_throw	src/ldo.h	/^LUAI_FUNC void luaD_throw (lua_State *L, int errcode);$/;"	p	signature:(lua_State *L, int errcode)
luaE_freethread	src/lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f	signature:(lua_State *L, lua_State *L1)
luaE_freethread	src/lstate.h	/^LUAI_FUNC void luaE_freethread (lua_State *L, lua_State *L1);$/;"	p	signature:(lua_State *L, lua_State *L1)
luaE_newthread	src/lstate.c	/^lua_State *luaE_newthread (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaE_newthread	src/lstate.h	/^LUAI_FUNC lua_State *luaE_newthread (lua_State *L);$/;"	p	signature:(lua_State *L)
luaF_close	src/lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f	signature:(lua_State *L, StkId level)
luaF_close	src/lfunc.h	/^LUAI_FUNC void luaF_close (lua_State *L, StkId level);$/;"	p	signature:(lua_State *L, StkId level)
luaF_findupval	src/lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f	signature:(lua_State *L, StkId level)
luaF_findupval	src/lfunc.h	/^LUAI_FUNC UpVal *luaF_findupval (lua_State *L, StkId level);$/;"	p	signature:(lua_State *L, StkId level)
luaF_freeclosure	src/lfunc.c	/^void luaF_freeclosure (lua_State *L, Closure *c) {$/;"	f	signature:(lua_State *L, Closure *c)
luaF_freeclosure	src/lfunc.h	/^LUAI_FUNC void luaF_freeclosure (lua_State *L, Closure *c);$/;"	p	signature:(lua_State *L, Closure *c)
luaF_freeproto	src/lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f	signature:(lua_State *L, Proto *f)
luaF_freeproto	src/lfunc.h	/^LUAI_FUNC void luaF_freeproto (lua_State *L, Proto *f);$/;"	p	signature:(lua_State *L, Proto *f)
luaF_freeupval	src/lfunc.c	/^void luaF_freeupval (lua_State *L, UpVal *uv) {$/;"	f	signature:(lua_State *L, UpVal *uv)
luaF_freeupval	src/lfunc.h	/^LUAI_FUNC void luaF_freeupval (lua_State *L, UpVal *uv);$/;"	p	signature:(lua_State *L, UpVal *uv)
luaF_getlocalname	src/lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f	signature:(const Proto *f, int local_number, int pc)
luaF_getlocalname	src/lfunc.h	/^LUAI_FUNC const char *luaF_getlocalname (const Proto *func, int local_number,$/;"	p	signature:(const Proto *func, int local_number, int pc)
luaF_newCclosure	src/lfunc.c	/^Closure *luaF_newCclosure (lua_State *L, int nelems, Table *e) {$/;"	f	signature:(lua_State *L, int nelems, Table *e)
luaF_newCclosure	src/lfunc.h	/^LUAI_FUNC Closure *luaF_newCclosure (lua_State *L, int nelems, Table *e);$/;"	p	signature:(lua_State *L, int nelems, Table *e)
luaF_newLclosure	src/lfunc.c	/^Closure *luaF_newLclosure (lua_State *L, int nelems, Table *e) {$/;"	f	signature:(lua_State *L, int nelems, Table *e)
luaF_newLclosure	src/lfunc.h	/^LUAI_FUNC Closure *luaF_newLclosure (lua_State *L, int nelems, Table *e);$/;"	p	signature:(lua_State *L, int nelems, Table *e)
luaF_newproto	src/lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaF_newproto	src/lfunc.h	/^LUAI_FUNC Proto *luaF_newproto (lua_State *L);$/;"	p	signature:(lua_State *L)
luaF_newupval	src/lfunc.c	/^UpVal *luaF_newupval (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaF_newupval	src/lfunc.h	/^LUAI_FUNC UpVal *luaF_newupval (lua_State *L);$/;"	p	signature:(lua_State *L)
luaG_aritherror	src/ldebug.c	/^void luaG_aritherror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	signature:(lua_State *L, const TValue *p1, const TValue *p2)
luaG_aritherror	src/ldebug.h	/^LUAI_FUNC void luaG_aritherror (lua_State *L, const TValue *p1,$/;"	p	signature:(lua_State *L, const TValue *p1, const TValue *p2)
luaG_checkcode	src/ldebug.c	/^int luaG_checkcode (const Proto *pt) {$/;"	f	signature:(const Proto *pt)
luaG_checkcode	src/ldebug.h	/^LUAI_FUNC int luaG_checkcode (const Proto *pt);$/;"	p	signature:(const Proto *pt)
luaG_checkopenop	src/ldebug.c	/^int luaG_checkopenop (Instruction i) {$/;"	f	signature:(Instruction i)
luaG_checkopenop	src/ldebug.h	/^LUAI_FUNC int luaG_checkopenop (Instruction i);$/;"	p	signature:(Instruction i)
luaG_concaterror	src/ldebug.c	/^void luaG_concaterror (lua_State *L, StkId p1, StkId p2) {$/;"	f	signature:(lua_State *L, StkId p1, StkId p2)
luaG_concaterror	src/ldebug.h	/^LUAI_FUNC void luaG_concaterror (lua_State *L, StkId p1, StkId p2);$/;"	p	signature:(lua_State *L, StkId p1, StkId p2)
luaG_errormsg	src/ldebug.c	/^void luaG_errormsg (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaG_errormsg	src/ldebug.h	/^LUAI_FUNC void luaG_errormsg (lua_State *L);$/;"	p	signature:(lua_State *L)
luaG_ordererror	src/ldebug.c	/^int luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	signature:(lua_State *L, const TValue *p1, const TValue *p2)
luaG_ordererror	src/ldebug.h	/^LUAI_FUNC int luaG_ordererror (lua_State *L, const TValue *p1,$/;"	p	signature:(lua_State *L, const TValue *p1, const TValue *p2)
luaG_runerror	src/ldebug.c	/^void luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f	signature:(lua_State *L, const char *fmt, ...)
luaG_runerror	src/ldebug.h	/^LUAI_FUNC void luaG_runerror (lua_State *L, const char *fmt, ...);$/;"	p	signature:(lua_State *L, const char *fmt, ...)
luaG_typeerror	src/ldebug.c	/^void luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f	signature:(lua_State *L, const TValue *o, const char *op)
luaG_typeerror	src/ldebug.h	/^LUAI_FUNC void luaG_typeerror (lua_State *L, const TValue *o,$/;"	p	signature:(lua_State *L, const TValue *o, const char *opname)
luaH_free	src/ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f	signature:(lua_State *L, Table *t)
luaH_free	src/ltable.h	/^LUAI_FUNC void luaH_free (lua_State *L, Table *t);$/;"	p	signature:(lua_State *L, Table *t)
luaH_get	src/ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f	signature:(Table *t, const TValue *key)
luaH_get	src/ltable.h	/^LUAI_FUNC const TValue *luaH_get (Table *t, const TValue *key);$/;"	p	signature:(Table *t, const TValue *key)
luaH_getn	src/ltable.c	/^int luaH_getn (Table *t) {$/;"	f	signature:(Table *t)
luaH_getn	src/ltable.h	/^LUAI_FUNC int luaH_getn (Table *t);$/;"	p	signature:(Table *t)
luaH_getnum	src/ltable.c	/^const TValue *luaH_getnum (Table *t, int key) {$/;"	f	signature:(Table *t, int key)
luaH_getnum	src/ltable.h	/^LUAI_FUNC const TValue *luaH_getnum (Table *t, int key);$/;"	p	signature:(Table *t, int key)
luaH_getstr	src/ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f	signature:(Table *t, TString *key)
luaH_getstr	src/ltable.h	/^LUAI_FUNC const TValue *luaH_getstr (Table *t, TString *key);$/;"	p	signature:(Table *t, TString *key)
luaH_isdummy	src/ltable.c	/^int luaH_isdummy (Node *n) { return n == dummynode; }$/;"	f	signature:(Node *n)
luaH_isdummy	src/ltable.h	/^LUAI_FUNC int luaH_isdummy (Node *n);$/;"	p	signature:(Node *n)
luaH_mainposition	src/ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f	signature:(const Table *t, const TValue *key)
luaH_mainposition	src/ltable.h	/^LUAI_FUNC Node *luaH_mainposition (const Table *t, const TValue *key);$/;"	p	signature:(const Table *t, const TValue *key)
luaH_new	src/ltable.c	/^Table *luaH_new (lua_State *L, int narray, int nhash) {$/;"	f	signature:(lua_State *L, int narray, int nhash)
luaH_new	src/ltable.h	/^LUAI_FUNC Table *luaH_new (lua_State *L, int narray, int lnhash);$/;"	p	signature:(lua_State *L, int narray, int lnhash)
luaH_next	src/ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f	signature:(lua_State *L, Table *t, StkId key)
luaH_next	src/ltable.h	/^LUAI_FUNC int luaH_next (lua_State *L, Table *t, StkId key);$/;"	p	signature:(lua_State *L, Table *t, StkId key)
luaH_resizearray	src/ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, int nasize) {$/;"	f	signature:(lua_State *L, Table *t, int nasize)
luaH_resizearray	src/ltable.h	/^LUAI_FUNC void luaH_resizearray (lua_State *L, Table *t, int nasize);$/;"	p	signature:(lua_State *L, Table *t, int nasize)
luaH_set	src/ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f	signature:(lua_State *L, Table *t, const TValue *key)
luaH_set	src/ltable.h	/^LUAI_FUNC TValue *luaH_set (lua_State *L, Table *t, const TValue *key);$/;"	p	signature:(lua_State *L, Table *t, const TValue *key)
luaH_setnum	src/ltable.c	/^TValue *luaH_setnum (lua_State *L, Table *t, int key) {$/;"	f	signature:(lua_State *L, Table *t, int key)
luaH_setnum	src/ltable.h	/^LUAI_FUNC TValue *luaH_setnum (lua_State *L, Table *t, int key);$/;"	p	signature:(lua_State *L, Table *t, int key)
luaH_setstr	src/ltable.c	/^TValue *luaH_setstr (lua_State *L, Table *t, TString *key) {$/;"	f	signature:(lua_State *L, Table *t, TString *key)
luaH_setstr	src/ltable.h	/^LUAI_FUNC TValue *luaH_setstr (lua_State *L, Table *t, TString *key);$/;"	p	signature:(lua_State *L, Table *t, TString *key)
luaI_openlib	src/lauxlib.c	/^LUALIB_API void luaI_openlib (lua_State *L, const char *libname,$/;"	f	signature:(lua_State *L, const char *libname, const luaL_Reg *l, int nup)
luaI_openlib	src/lauxlib.h	/^#define luaI_openlib	/;"	d
luaI_openlib	src/lauxlib.h	/^LUALIB_API void (luaI_openlib) (lua_State *L, const char *libname,$/;"	p	signature:(lua_State *L, const char *libname, const luaL_Reg *l, int nup)
luaK_checkstack	src/lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f	signature:(FuncState *fs, int n)
luaK_checkstack	src/lcode.h	/^LUAI_FUNC void luaK_checkstack (FuncState *fs, int n);$/;"	p	signature:(FuncState *fs, int n)
luaK_code	src/lcode.c	/^static int luaK_code (FuncState *fs, Instruction i, int line) {$/;"	f	file:	signature:(FuncState *fs, Instruction i, int line)
luaK_codeABC	src/lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f	signature:(FuncState *fs, OpCode o, int a, int b, int c)
luaK_codeABC	src/lcode.h	/^LUAI_FUNC int luaK_codeABC (FuncState *fs, OpCode o, int A, int B, int C);$/;"	p	signature:(FuncState *fs, OpCode o, int A, int B, int C)
luaK_codeABx	src/lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f	signature:(FuncState *fs, OpCode o, int a, unsigned int bc)
luaK_codeABx	src/lcode.h	/^LUAI_FUNC int luaK_codeABx (FuncState *fs, OpCode o, int A, unsigned int Bx);$/;"	p	signature:(FuncState *fs, OpCode o, int A, unsigned int Bx)
luaK_codeAsBx	src/lcode.h	/^#define luaK_codeAsBx(/;"	d
luaK_concat	src/lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f	signature:(FuncState *fs, int *l1, int l2)
luaK_concat	src/lcode.h	/^LUAI_FUNC void luaK_concat (FuncState *fs, int *l1, int l2);$/;"	p	signature:(FuncState *fs, int *l1, int l2)
luaK_dischargevars	src/lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f	signature:(FuncState *fs, expdesc *e)
luaK_dischargevars	src/lcode.h	/^LUAI_FUNC void luaK_dischargevars (FuncState *fs, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *e)
luaK_exp2RK	src/lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f	signature:(FuncState *fs, expdesc *e)
luaK_exp2RK	src/lcode.h	/^LUAI_FUNC int luaK_exp2RK (FuncState *fs, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *e)
luaK_exp2anyreg	src/lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f	signature:(FuncState *fs, expdesc *e)
luaK_exp2anyreg	src/lcode.h	/^LUAI_FUNC int luaK_exp2anyreg (FuncState *fs, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *e)
luaK_exp2nextreg	src/lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f	signature:(FuncState *fs, expdesc *e)
luaK_exp2nextreg	src/lcode.h	/^LUAI_FUNC void luaK_exp2nextreg (FuncState *fs, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *e)
luaK_exp2val	src/lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f	signature:(FuncState *fs, expdesc *e)
luaK_exp2val	src/lcode.h	/^LUAI_FUNC void luaK_exp2val (FuncState *fs, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *e)
luaK_fixline	src/lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f	signature:(FuncState *fs, int line)
luaK_fixline	src/lcode.h	/^LUAI_FUNC void luaK_fixline (FuncState *fs, int line);$/;"	p	signature:(FuncState *fs, int line)
luaK_getlabel	src/lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f	signature:(FuncState *fs)
luaK_getlabel	src/lcode.h	/^LUAI_FUNC int luaK_getlabel (FuncState *fs);$/;"	p	signature:(FuncState *fs)
luaK_goiffalse	src/lcode.c	/^static void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f	file:	signature:(FuncState *fs, expdesc *e)
luaK_goiftrue	src/lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f	signature:(FuncState *fs, expdesc *e)
luaK_goiftrue	src/lcode.h	/^LUAI_FUNC void luaK_goiftrue (FuncState *fs, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *e)
luaK_indexed	src/lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f	signature:(FuncState *fs, expdesc *t, expdesc *k)
luaK_indexed	src/lcode.h	/^LUAI_FUNC void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k);$/;"	p	signature:(FuncState *fs, expdesc *t, expdesc *k)
luaK_infix	src/lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f	signature:(FuncState *fs, BinOpr op, expdesc *v)
luaK_infix	src/lcode.h	/^LUAI_FUNC void luaK_infix (FuncState *fs, BinOpr op, expdesc *v);$/;"	p	signature:(FuncState *fs, BinOpr op, expdesc *v)
luaK_jump	src/lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f	signature:(FuncState *fs)
luaK_jump	src/lcode.h	/^LUAI_FUNC int luaK_jump (FuncState *fs);$/;"	p	signature:(FuncState *fs)
luaK_nil	src/lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f	signature:(FuncState *fs, int from, int n)
luaK_nil	src/lcode.h	/^LUAI_FUNC void luaK_nil (FuncState *fs, int from, int n);$/;"	p	signature:(FuncState *fs, int from, int n)
luaK_numberK	src/lcode.c	/^int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f	signature:(FuncState *fs, lua_Number r)
luaK_numberK	src/lcode.h	/^LUAI_FUNC int luaK_numberK (FuncState *fs, lua_Number r);$/;"	p	signature:(FuncState *fs, lua_Number r)
luaK_patchlist	src/lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f	signature:(FuncState *fs, int list, int target)
luaK_patchlist	src/lcode.h	/^LUAI_FUNC void luaK_patchlist (FuncState *fs, int list, int target);$/;"	p	signature:(FuncState *fs, int list, int target)
luaK_patchtohere	src/lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f	signature:(FuncState *fs, int list)
luaK_patchtohere	src/lcode.h	/^LUAI_FUNC void luaK_patchtohere (FuncState *fs, int list);$/;"	p	signature:(FuncState *fs, int list)
luaK_posfix	src/lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2) {$/;"	f	signature:(FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2)
luaK_posfix	src/lcode.h	/^LUAI_FUNC void luaK_posfix (FuncState *fs, BinOpr op, expdesc *v1, expdesc *v2);$/;"	p	signature:(FuncState *fs, BinOpr op, expdesc *v1, expdesc *v2)
luaK_prefix	src/lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e) {$/;"	f	signature:(FuncState *fs, UnOpr op, expdesc *e)
luaK_prefix	src/lcode.h	/^LUAI_FUNC void luaK_prefix (FuncState *fs, UnOpr op, expdesc *v);$/;"	p	signature:(FuncState *fs, UnOpr op, expdesc *v)
luaK_reserveregs	src/lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f	signature:(FuncState *fs, int n)
luaK_reserveregs	src/lcode.h	/^LUAI_FUNC void luaK_reserveregs (FuncState *fs, int n);$/;"	p	signature:(FuncState *fs, int n)
luaK_ret	src/lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f	signature:(FuncState *fs, int first, int nret)
luaK_ret	src/lcode.h	/^LUAI_FUNC void luaK_ret (FuncState *fs, int first, int nret);$/;"	p	signature:(FuncState *fs, int first, int nret)
luaK_self	src/lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f	signature:(FuncState *fs, expdesc *e, expdesc *key)
luaK_self	src/lcode.h	/^LUAI_FUNC void luaK_self (FuncState *fs, expdesc *e, expdesc *key);$/;"	p	signature:(FuncState *fs, expdesc *e, expdesc *key)
luaK_setlist	src/lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f	signature:(FuncState *fs, int base, int nelems, int tostore)
luaK_setlist	src/lcode.h	/^LUAI_FUNC void luaK_setlist (FuncState *fs, int base, int nelems, int tostore);$/;"	p	signature:(FuncState *fs, int base, int nelems, int tostore)
luaK_setmultret	src/lcode.h	/^#define luaK_setmultret(/;"	d
luaK_setoneret	src/lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f	signature:(FuncState *fs, expdesc *e)
luaK_setoneret	src/lcode.h	/^LUAI_FUNC void luaK_setoneret (FuncState *fs, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *e)
luaK_setreturns	src/lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f	signature:(FuncState *fs, expdesc *e, int nresults)
luaK_setreturns	src/lcode.h	/^LUAI_FUNC void luaK_setreturns (FuncState *fs, expdesc *e, int nresults);$/;"	p	signature:(FuncState *fs, expdesc *e, int nresults)
luaK_storevar	src/lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f	signature:(FuncState *fs, expdesc *var, expdesc *ex)
luaK_storevar	src/lcode.h	/^LUAI_FUNC void luaK_storevar (FuncState *fs, expdesc *var, expdesc *e);$/;"	p	signature:(FuncState *fs, expdesc *var, expdesc *e)
luaK_stringK	src/lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f	signature:(FuncState *fs, TString *s)
luaK_stringK	src/lcode.h	/^LUAI_FUNC int luaK_stringK (FuncState *fs, TString *s);$/;"	p	signature:(FuncState *fs, TString *s)
luaL_Buffer	src/lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	src/lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Buffer::L	src/lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer	access:public
luaL_Buffer::buffer	src/lauxlib.h	/^  char buffer[LUAL_BUFFERSIZE];$/;"	m	struct:luaL_Buffer	access:public
luaL_Buffer::lvl	src/lauxlib.h	/^  int lvl;  \/* number of strings in the stack (level) *\/$/;"	m	struct:luaL_Buffer	access:public
luaL_Buffer::p	src/lauxlib.h	/^  char *p;			\/* current position in buffer *\/$/;"	m	struct:luaL_Buffer	access:public
luaL_Reg	src/lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	src/lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Reg::func	src/lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg	access:public
luaL_Reg::name	src/lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg	access:public
luaL_addchar	src/lauxlib.h	/^#define luaL_addchar(/;"	d
luaL_addlstring	src/lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f	signature:(luaL_Buffer *B, const char *s, size_t l)
luaL_addlstring	src/lauxlib.h	/^LUALIB_API void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);$/;"	p	signature:(luaL_Buffer *B, const char *s, size_t l)
luaL_addsize	src/lauxlib.h	/^#define luaL_addsize(/;"	d
luaL_addstring	src/lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f	signature:(luaL_Buffer *B, const char *s)
luaL_addstring	src/lauxlib.h	/^LUALIB_API void (luaL_addstring) (luaL_Buffer *B, const char *s);$/;"	p	signature:(luaL_Buffer *B, const char *s)
luaL_addvalue	src/lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f	signature:(luaL_Buffer *B)
luaL_addvalue	src/lauxlib.h	/^LUALIB_API void (luaL_addvalue) (luaL_Buffer *B);$/;"	p	signature:(luaL_Buffer *B)
luaL_argcheck	src/lauxlib.h	/^#define luaL_argcheck(/;"	d
luaL_argerror	src/lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int narg, const char *extramsg) {$/;"	f	signature:(lua_State *L, int narg, const char *extramsg)
luaL_argerror	src/lauxlib.h	/^LUALIB_API int (luaL_argerror) (lua_State *L, int numarg, const char *extramsg);$/;"	p	signature:(lua_State *L, int numarg, const char *extramsg)
luaL_buffinit	src/lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f	signature:(lua_State *L, luaL_Buffer *B)
luaL_buffinit	src/lauxlib.h	/^LUALIB_API void (luaL_buffinit) (lua_State *L, luaL_Buffer *B);$/;"	p	signature:(lua_State *L, luaL_Buffer *B)
luaL_callmeta	src/lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f	signature:(lua_State *L, int obj, const char *event)
luaL_callmeta	src/lauxlib.h	/^LUALIB_API int (luaL_callmeta) (lua_State *L, int obj, const char *e);$/;"	p	signature:(lua_State *L, int obj, const char *e)
luaL_checkany	src/lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int narg) {$/;"	f	signature:(lua_State *L, int narg)
luaL_checkany	src/lauxlib.h	/^LUALIB_API void (luaL_checkany) (lua_State *L, int narg);$/;"	p	signature:(lua_State *L, int narg)
luaL_checkint	src/lauxlib.h	/^#define luaL_checkint(/;"	d
luaL_checkinteger	src/lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int narg) {$/;"	f	signature:(lua_State *L, int narg)
luaL_checkinteger	src/lauxlib.h	/^LUALIB_API lua_Integer (luaL_checkinteger) (lua_State *L, int numArg);$/;"	p	signature:(lua_State *L, int numArg)
luaL_checklong	src/lauxlib.h	/^#define luaL_checklong(/;"	d
luaL_checklstring	src/lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int narg, size_t *len) {$/;"	f	signature:(lua_State *L, int narg, size_t *len)
luaL_checklstring	src/lauxlib.h	/^LUALIB_API const char *(luaL_checklstring) (lua_State *L, int numArg,$/;"	p	signature:(lua_State *L, int numArg, size_t *l)
luaL_checknumber	src/lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int narg) {$/;"	f	signature:(lua_State *L, int narg)
luaL_checknumber	src/lauxlib.h	/^LUALIB_API lua_Number (luaL_checknumber) (lua_State *L, int numArg);$/;"	p	signature:(lua_State *L, int numArg)
luaL_checkoption	src/lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int narg, const char *def,$/;"	f	signature:(lua_State *L, int narg, const char *def, const char *const lst[])
luaL_checkoption	src/lauxlib.h	/^LUALIB_API int (luaL_checkoption) (lua_State *L, int narg, const char *def,$/;"	p	signature:(lua_State *L, int narg, const char *def, const char *const lst[])
luaL_checkstack	src/lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *mes) {$/;"	f	signature:(lua_State *L, int space, const char *mes)
luaL_checkstack	src/lauxlib.h	/^LUALIB_API void (luaL_checkstack) (lua_State *L, int sz, const char *msg);$/;"	p	signature:(lua_State *L, int sz, const char *msg)
luaL_checkstring	src/lauxlib.h	/^#define luaL_checkstring(/;"	d
luaL_checktype	src/lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int narg, int t) {$/;"	f	signature:(lua_State *L, int narg, int t)
luaL_checktype	src/lauxlib.h	/^LUALIB_API void (luaL_checktype) (lua_State *L, int narg, int t);$/;"	p	signature:(lua_State *L, int narg, int t)
luaL_checkudata	src/lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f	signature:(lua_State *L, int ud, const char *tname)
luaL_checkudata	src/lauxlib.h	/^LUALIB_API void *(luaL_checkudata) (lua_State *L, int ud, const char *tname);$/;"	p	signature:(lua_State *L, int ud, const char *tname)
luaL_dofile	src/lauxlib.h	/^#define luaL_dofile(/;"	d
luaL_dostring	src/lauxlib.h	/^#define luaL_dostring(/;"	d
luaL_error	src/lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f	signature:(lua_State *L, const char *fmt, ...)
luaL_error	src/lauxlib.h	/^LUALIB_API int (luaL_error) (lua_State *L, const char *fmt, ...);$/;"	p	signature:(lua_State *L, const char *fmt, ...)
luaL_findtable	src/lauxlib.c	/^LUALIB_API const char *luaL_findtable (lua_State *L, int idx,$/;"	f	signature:(lua_State *L, int idx, const char *fname, int szhint)
luaL_findtable	src/lauxlib.h	/^LUALIB_API const char *(luaL_findtable) (lua_State *L, int idx,$/;"	p	signature:(lua_State *L, int idx, const char *fname, int szhint)
luaL_getmetafield	src/lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f	signature:(lua_State *L, int obj, const char *event)
luaL_getmetafield	src/lauxlib.h	/^LUALIB_API int (luaL_getmetafield) (lua_State *L, int obj, const char *e);$/;"	p	signature:(lua_State *L, int obj, const char *e)
luaL_getmetatable	src/lauxlib.h	/^#define luaL_getmetatable(/;"	d
luaL_getn	src/lauxlib.c	/^LUALIB_API int luaL_getn (lua_State *L, int t) {$/;"	f	signature:(lua_State *L, int t)
luaL_getn	src/lauxlib.h	/^#define luaL_getn(/;"	d
luaL_getn	src/lauxlib.h	/^LUALIB_API int (luaL_getn) (lua_State *L, int t);$/;"	p	signature:(lua_State *L, int t)
luaL_gsub	src/lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f	signature:(lua_State *L, const char *s, const char *p, const char *r)
luaL_gsub	src/lauxlib.h	/^LUALIB_API const char *(luaL_gsub) (lua_State *L, const char *s, const char *p,$/;"	p	signature:(lua_State *L, const char *s, const char *p, const char *r)
luaL_loadbuffer	src/lauxlib.c	/^LUALIB_API int luaL_loadbuffer (lua_State *L, const char *buff, size_t size,$/;"	f	signature:(lua_State *L, const char *buff, size_t size, const char *name)
luaL_loadbuffer	src/lauxlib.h	/^LUALIB_API int (luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz,$/;"	p	signature:(lua_State *L, const char *buff, size_t sz, const char *name)
luaL_loadfile	src/lauxlib.c	/^LUALIB_API int luaL_loadfile (lua_State *L, const char *filename) {$/;"	f	signature:(lua_State *L, const char *filename)
luaL_loadfile	src/lauxlib.h	/^LUALIB_API int (luaL_loadfile) (lua_State *L, const char *filename);$/;"	p	signature:(lua_State *L, const char *filename)
luaL_loadstring	src/lauxlib.c	/^LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s) {$/;"	f	signature:(lua_State *L, const char *s)
luaL_loadstring	src/lauxlib.h	/^LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s);$/;"	p	signature:(lua_State *L, const char *s)
luaL_newmetatable	src/lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f	signature:(lua_State *L, const char *tname)
luaL_newmetatable	src/lauxlib.h	/^LUALIB_API int   (luaL_newmetatable) (lua_State *L, const char *tname);$/;"	p	signature:(lua_State *L, const char *tname)
luaL_newstate	src/lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f	signature:(void)
luaL_newstate	src/lauxlib.h	/^LUALIB_API lua_State *(luaL_newstate) (void);$/;"	p	signature:(void)
luaL_openlibs	src/linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaL_openlibs	src/lualib.h	/^LUALIB_API void (luaL_openlibs) (lua_State *L); $/;"	p	signature:(lua_State *L)
luaL_opt	src/lauxlib.h	/^#define luaL_opt(/;"	d
luaL_optint	src/lauxlib.h	/^#define luaL_optint(/;"	d
luaL_optinteger	src/lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int narg,$/;"	f	signature:(lua_State *L, int narg, lua_Integer def)
luaL_optinteger	src/lauxlib.h	/^LUALIB_API lua_Integer (luaL_optinteger) (lua_State *L, int nArg,$/;"	p	signature:(lua_State *L, int nArg, lua_Integer def)
luaL_optlong	src/lauxlib.h	/^#define luaL_optlong(/;"	d
luaL_optlstring	src/lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int narg,$/;"	f	signature:(lua_State *L, int narg, const char *def, size_t *len)
luaL_optlstring	src/lauxlib.h	/^LUALIB_API const char *(luaL_optlstring) (lua_State *L, int numArg,$/;"	p	signature:(lua_State *L, int numArg, const char *def, size_t *l)
luaL_optnumber	src/lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int narg, lua_Number def) {$/;"	f	signature:(lua_State *L, int narg, lua_Number def)
luaL_optnumber	src/lauxlib.h	/^LUALIB_API lua_Number (luaL_optnumber) (lua_State *L, int nArg, lua_Number def);$/;"	p	signature:(lua_State *L, int nArg, lua_Number def)
luaL_optstring	src/lauxlib.h	/^#define luaL_optstring(/;"	d
luaL_prepbuffer	src/lauxlib.c	/^LUALIB_API char *luaL_prepbuffer (luaL_Buffer *B) {$/;"	f	signature:(luaL_Buffer *B)
luaL_prepbuffer	src/lauxlib.h	/^LUALIB_API char *(luaL_prepbuffer) (luaL_Buffer *B);$/;"	p	signature:(luaL_Buffer *B)
luaL_pushresult	src/lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f	signature:(luaL_Buffer *B)
luaL_pushresult	src/lauxlib.h	/^LUALIB_API void (luaL_pushresult) (luaL_Buffer *B);$/;"	p	signature:(luaL_Buffer *B)
luaL_putchar	src/lauxlib.h	/^#define luaL_putchar(/;"	d
luaL_ref	src/lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f	signature:(lua_State *L, int t)
luaL_ref	src/lauxlib.h	/^LUALIB_API int (luaL_ref) (lua_State *L, int t);$/;"	p	signature:(lua_State *L, int t)
luaL_reg	src/lauxlib.h	/^#define luaL_reg	/;"	d
luaL_register	src/lauxlib.c	/^LUALIB_API void (luaL_register) (lua_State *L, const char *libname,$/;"	f	signature:(lua_State *L, const char *libname, const luaL_Reg *l)
luaL_register	src/lauxlib.h	/^LUALIB_API void (luaL_register) (lua_State *L, const char *libname,$/;"	p	signature:(lua_State *L, const char *libname, const luaL_Reg *l)
luaL_setn	src/lauxlib.c	/^LUALIB_API void luaL_setn (lua_State *L, int t, int n) {$/;"	f	signature:(lua_State *L, int t, int n)
luaL_setn	src/lauxlib.h	/^#define luaL_setn(/;"	d
luaL_setn	src/lauxlib.h	/^LUALIB_API void (luaL_setn) (lua_State *L, int t, int n);$/;"	p	signature:(lua_State *L, int t, int n)
luaL_typename	src/lauxlib.h	/^#define luaL_typename(/;"	d
luaL_typerror	src/lauxlib.c	/^LUALIB_API int luaL_typerror (lua_State *L, int narg, const char *tname) {$/;"	f	signature:(lua_State *L, int narg, const char *tname)
luaL_typerror	src/lauxlib.h	/^LUALIB_API int (luaL_typerror) (lua_State *L, int narg, const char *tname);$/;"	p	signature:(lua_State *L, int narg, const char *tname)
luaL_unref	src/lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f	signature:(lua_State *L, int t, int ref)
luaL_unref	src/lauxlib.h	/^LUALIB_API void (luaL_unref) (lua_State *L, int t, int ref);$/;"	p	signature:(lua_State *L, int t, int ref)
luaL_where	src/lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f	signature:(lua_State *L, int level)
luaL_where	src/lauxlib.h	/^LUALIB_API void (luaL_where) (lua_State *L, int lvl);$/;"	p	signature:(lua_State *L, int lvl)
luaM_free	src/lmem.h	/^#define luaM_free(/;"	d
luaM_freearray	src/lmem.h	/^#define luaM_freearray(/;"	d
luaM_freemem	src/lmem.h	/^#define luaM_freemem(/;"	d
luaM_growaux_	src/lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f	signature:(lua_State *L, void *block, int *size, size_t size_elems, int limit, const char *errormsg)
luaM_growaux_	src/lmem.h	/^LUAI_FUNC void *luaM_growaux_ (lua_State *L, void *block, int *size,$/;"	p	signature:(lua_State *L, void *block, int *size, size_t size_elem, int limit, const char *errormsg)
luaM_growvector	src/lmem.h	/^#define luaM_growvector(/;"	d
luaM_malloc	src/lmem.h	/^#define luaM_malloc(/;"	d
luaM_new	src/lmem.h	/^#define luaM_new(/;"	d
luaM_newvector	src/lmem.h	/^#define luaM_newvector(/;"	d
luaM_realloc_	src/lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f	signature:(lua_State *L, void *block, size_t osize, size_t nsize)
luaM_realloc_	src/lmem.h	/^LUAI_FUNC void *luaM_realloc_ (lua_State *L, void *block, size_t oldsize,$/;"	p	signature:(lua_State *L, void *block, size_t oldsize, size_t size)
luaM_reallocv	src/lmem.h	/^#define luaM_reallocv(/;"	d
luaM_reallocvector	src/lmem.h	/^#define luaM_reallocvector(/;"	d
luaM_toobig	src/lmem.c	/^void *luaM_toobig (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaM_toobig	src/lmem.h	/^LUAI_FUNC void *luaM_toobig (lua_State *L);$/;"	p	signature:(lua_State *L)
luaO_chunkid	src/lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f	signature:(char *out, const char *source, size_t bufflen)
luaO_chunkid	src/lobject.h	/^LUAI_FUNC void luaO_chunkid (char *out, const char *source, size_t len);$/;"	p	signature:(char *out, const char *source, size_t len)
luaO_fb2int	src/lobject.c	/^int luaO_fb2int (int x) {$/;"	f	signature:(int x)
luaO_fb2int	src/lobject.h	/^LUAI_FUNC int luaO_fb2int (int x);$/;"	p	signature:(int x)
luaO_int2fb	src/lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f	signature:(unsigned int x)
luaO_int2fb	src/lobject.h	/^LUAI_FUNC int luaO_int2fb (unsigned int x);$/;"	p	signature:(unsigned int x)
luaO_log2	src/lobject.c	/^int luaO_log2 (unsigned int x) {$/;"	f	signature:(unsigned int x)
luaO_log2	src/lobject.h	/^LUAI_FUNC int luaO_log2 (unsigned int x);$/;"	p	signature:(unsigned int x)
luaO_nilobject	src/lobject.h	/^#define luaO_nilobject	/;"	d
luaO_nilobject_	src/lobject.c	/^const TValue luaO_nilobject_ = {{NULL}, LUA_TNIL};$/;"	v
luaO_nilobject_	src/lobject.h	/^LUAI_DATA const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	src/lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	signature:(lua_State *L, const char *fmt, ...)
luaO_pushfstring	src/lobject.h	/^LUAI_FUNC const char *luaO_pushfstring (lua_State *L, const char *fmt, ...);$/;"	p	signature:(lua_State *L, const char *fmt, ...)
luaO_pushvfstring	src/lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f	signature:(lua_State *L, const char *fmt, va_list argp)
luaO_pushvfstring	src/lobject.h	/^LUAI_FUNC const char *luaO_pushvfstring (lua_State *L, const char *fmt,$/;"	p	signature:(lua_State *L, const char *fmt, va_list argp)
luaO_rawequalObj	src/lobject.c	/^int luaO_rawequalObj (const TValue *t1, const TValue *t2) {$/;"	f	signature:(const TValue *t1, const TValue *t2)
luaO_rawequalObj	src/lobject.h	/^LUAI_FUNC int luaO_rawequalObj (const TValue *t1, const TValue *t2);$/;"	p	signature:(const TValue *t1, const TValue *t2)
luaO_str2d	src/lobject.c	/^int luaO_str2d (const char *s, lua_Number *result) {$/;"	f	signature:(const char *s, lua_Number *result)
luaO_str2d	src/lobject.h	/^LUAI_FUNC int luaO_str2d (const char *s, lua_Number *result);$/;"	p	signature:(const char *s, lua_Number *result)
luaP_opmodes	src/lopcodes.c	/^const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	src/lopcodes.h	/^LUAI_DATA const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	src/lopcodes.c	/^const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	src/lopcodes.h	/^LUAI_DATA const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaS_fix	src/lstring.h	/^#define luaS_fix(/;"	d
luaS_new	src/lstring.h	/^#define luaS_new(/;"	d
luaS_newliteral	src/lstring.h	/^#define luaS_newliteral(/;"	d
luaS_newlstr	src/lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f	signature:(lua_State *L, const char *str, size_t l)
luaS_newlstr	src/lstring.h	/^LUAI_FUNC TString *luaS_newlstr (lua_State *L, const char *str, size_t l);$/;"	p	signature:(lua_State *L, const char *str, size_t l)
luaS_newudata	src/lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s, Table *e) {$/;"	f	signature:(lua_State *L, size_t s, Table *e)
luaS_newudata	src/lstring.h	/^LUAI_FUNC Udata *luaS_newudata (lua_State *L, size_t s, Table *e);$/;"	p	signature:(lua_State *L, size_t s, Table *e)
luaS_resize	src/lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f	signature:(lua_State *L, int newsize)
luaS_resize	src/lstring.h	/^LUAI_FUNC void luaS_resize (lua_State *L, int newsize);$/;"	p	signature:(lua_State *L, int newsize)
luaT_gettm	src/ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f	signature:(Table *events, TMS event, TString *ename)
luaT_gettm	src/ltm.h	/^LUAI_FUNC const TValue *luaT_gettm (Table *events, TMS event, TString *ename);$/;"	p	signature:(Table *events, TMS event, TString *ename)
luaT_gettmbyobj	src/ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f	signature:(lua_State *L, const TValue *o, TMS event)
luaT_gettmbyobj	src/ltm.h	/^LUAI_FUNC const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o,$/;"	p	signature:(lua_State *L, const TValue *o, TMS event)
luaT_init	src/ltm.c	/^void luaT_init (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaT_init	src/ltm.h	/^LUAI_FUNC void luaT_init (lua_State *L);$/;"	p	signature:(lua_State *L)
luaT_typenames	src/ltm.c	/^const char *const luaT_typenames[] = {$/;"	v
luaT_typenames	src/ltm.h	/^LUAI_DATA const char *const luaT_typenames[];$/;"	v
luaU_dump	src/ldump.c	/^int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)$/;"	f	signature:(lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)
luaU_dump	src/lundump.h	/^LUAI_FUNC int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip);$/;"	p	signature:(lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)
luaU_header	src/lundump.c	/^void luaU_header (char* h)$/;"	f	signature:(char* h)
luaU_header	src/lundump.h	/^LUAI_FUNC void luaU_header (char* h);$/;"	p	signature:(char* h)
luaU_print	src/lundump.h	/^LUAI_FUNC void luaU_print (const Proto* f, int full);$/;"	p	signature:(const Proto* f, int full)
luaU_undump	src/lundump.c	/^Proto* luaU_undump (lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)$/;"	f	signature:(lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)
luaU_undump	src/lundump.h	/^LUAI_FUNC Proto* luaU_undump (lua_State* L, ZIO* Z, Mbuffer* buff, const char* name);$/;"	p	signature:(lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)
luaV_concat	src/lvm.c	/^void luaV_concat (lua_State *L, int total, int last) {$/;"	f	signature:(lua_State *L, int total, int last)
luaV_concat	src/lvm.h	/^LUAI_FUNC void luaV_concat (lua_State *L, int total, int last);$/;"	p	signature:(lua_State *L, int total, int last)
luaV_equalval	src/lvm.c	/^int luaV_equalval (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f	signature:(lua_State *L, const TValue *t1, const TValue *t2)
luaV_equalval	src/lvm.h	/^LUAI_FUNC int luaV_equalval (lua_State *L, const TValue *t1, const TValue *t2);$/;"	p	signature:(lua_State *L, const TValue *t1, const TValue *t2)
luaV_execute	src/lvm.c	/^void luaV_execute (lua_State *L, int nexeccalls) {$/;"	f	signature:(lua_State *L, int nexeccalls)
luaV_execute	src/lvm.h	/^LUAI_FUNC void luaV_execute (lua_State *L, int nexeccalls);$/;"	p	signature:(lua_State *L, int nexeccalls)
luaV_gettable	src/lvm.c	/^void luaV_gettable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f	signature:(lua_State *L, const TValue *t, TValue *key, StkId val)
luaV_gettable	src/lvm.h	/^LUAI_FUNC void luaV_gettable (lua_State *L, const TValue *t, TValue *key,$/;"	p	signature:(lua_State *L, const TValue *t, TValue *key, StkId val)
luaV_lessthan	src/lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	signature:(lua_State *L, const TValue *l, const TValue *r)
luaV_lessthan	src/lvm.h	/^LUAI_FUNC int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r);$/;"	p	signature:(lua_State *L, const TValue *l, const TValue *r)
luaV_settable	src/lvm.c	/^void luaV_settable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f	signature:(lua_State *L, const TValue *t, TValue *key, StkId val)
luaV_settable	src/lvm.h	/^LUAI_FUNC void luaV_settable (lua_State *L, const TValue *t, TValue *key,$/;"	p	signature:(lua_State *L, const TValue *t, TValue *key, StkId val)
luaV_tonumber	src/lvm.c	/^const TValue *luaV_tonumber (const TValue *obj, TValue *n) {$/;"	f	signature:(const TValue *obj, TValue *n)
luaV_tonumber	src/lvm.h	/^LUAI_FUNC const TValue *luaV_tonumber (const TValue *obj, TValue *n);$/;"	p	signature:(const TValue *obj, TValue *n)
luaV_tostring	src/lvm.c	/^int luaV_tostring (lua_State *L, StkId obj) {$/;"	f	signature:(lua_State *L, StkId obj)
luaV_tostring	src/lvm.h	/^LUAI_FUNC int luaV_tostring (lua_State *L, StkId obj);$/;"	p	signature:(lua_State *L, StkId obj)
luaX_init	src/llex.c	/^void luaX_init (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaX_init	src/llex.h	/^LUAI_FUNC void luaX_init (lua_State *L);$/;"	p	signature:(lua_State *L)
luaX_lexerror	src/llex.c	/^void luaX_lexerror (LexState *ls, const char *msg, int token) {$/;"	f	signature:(LexState *ls, const char *msg, int token)
luaX_lexerror	src/llex.h	/^LUAI_FUNC void luaX_lexerror (LexState *ls, const char *msg, int token);$/;"	p	signature:(LexState *ls, const char *msg, int token)
luaX_lookahead	src/llex.c	/^void luaX_lookahead (LexState *ls) {$/;"	f	signature:(LexState *ls)
luaX_lookahead	src/llex.h	/^LUAI_FUNC void luaX_lookahead (LexState *ls);$/;"	p	signature:(LexState *ls)
luaX_newstring	src/llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f	signature:(LexState *ls, const char *str, size_t l)
luaX_newstring	src/llex.h	/^LUAI_FUNC TString *luaX_newstring (LexState *ls, const char *str, size_t l);$/;"	p	signature:(LexState *ls, const char *str, size_t l)
luaX_next	src/llex.c	/^void luaX_next (LexState *ls) {$/;"	f	signature:(LexState *ls)
luaX_next	src/llex.h	/^LUAI_FUNC void luaX_next (LexState *ls);$/;"	p	signature:(LexState *ls)
luaX_setinput	src/llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source) {$/;"	f	signature:(lua_State *L, LexState *ls, ZIO *z, TString *source)
luaX_setinput	src/llex.h	/^LUAI_FUNC void luaX_setinput (lua_State *L, LexState *ls, ZIO *z,$/;"	p	signature:(lua_State *L, LexState *ls, ZIO *z, TString *source)
luaX_syntaxerror	src/llex.c	/^void luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f	signature:(LexState *ls, const char *msg)
luaX_syntaxerror	src/llex.h	/^LUAI_FUNC void luaX_syntaxerror (LexState *ls, const char *s);$/;"	p	signature:(LexState *ls, const char *s)
luaX_token2str	src/llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f	signature:(LexState *ls, int token)
luaX_token2str	src/llex.h	/^LUAI_FUNC const char *luaX_token2str (LexState *ls, int token);$/;"	p	signature:(LexState *ls, int token)
luaX_tokens	src/llex.c	/^const char *const luaX_tokens [] = {$/;"	v
luaX_tokens	src/llex.h	/^LUAI_DATA const char *const luaX_tokens [];$/;"	v
luaY_checklimit	src/lparser.c	/^#define luaY_checklimit(/;"	d	file:
luaY_parser	src/lparser.c	/^Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, const char *name) {$/;"	f	signature:(lua_State *L, ZIO *z, Mbuffer *buff, const char *name)
luaY_parser	src/lparser.h	/^LUAI_FUNC Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	p	signature:(lua_State *L, ZIO *z, Mbuffer *buff, const char *name)
luaZ_buffer	src/lzio.h	/^#define luaZ_buffer(/;"	d
luaZ_bufflen	src/lzio.h	/^#define luaZ_bufflen(/;"	d
luaZ_fill	src/lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f	signature:(ZIO *z)
luaZ_fill	src/lzio.h	/^LUAI_FUNC int luaZ_fill (ZIO *z);$/;"	p	signature:(ZIO *z)
luaZ_freebuffer	src/lzio.h	/^#define luaZ_freebuffer(/;"	d
luaZ_init	src/lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f	signature:(lua_State *L, ZIO *z, lua_Reader reader, void *data)
luaZ_init	src/lzio.h	/^LUAI_FUNC void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader,$/;"	p	signature:(lua_State *L, ZIO *z, lua_Reader reader, void *data)
luaZ_initbuffer	src/lzio.h	/^#define luaZ_initbuffer(/;"	d
luaZ_lookahead	src/lzio.c	/^int luaZ_lookahead (ZIO *z) {$/;"	f	signature:(ZIO *z)
luaZ_lookahead	src/lzio.h	/^LUAI_FUNC int luaZ_lookahead (ZIO *z);$/;"	p	signature:(ZIO *z)
luaZ_openspace	src/lzio.c	/^char *luaZ_openspace (lua_State *L, Mbuffer *buff, size_t n) {$/;"	f	signature:(lua_State *L, Mbuffer *buff, size_t n)
luaZ_openspace	src/lzio.h	/^LUAI_FUNC char *luaZ_openspace (lua_State *L, Mbuffer *buff, size_t n);$/;"	p	signature:(lua_State *L, Mbuffer *buff, size_t n)
luaZ_read	src/lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f	signature:(ZIO *z, void *b, size_t n)
luaZ_read	src/lzio.h	/^LUAI_FUNC size_t luaZ_read (ZIO* z, void* b, size_t n);	\/* read next n bytes *\/$/;"	p	signature:(ZIO* z, void* b, size_t n)
luaZ_resetbuffer	src/lzio.h	/^#define luaZ_resetbuffer(/;"	d
luaZ_resizebuffer	src/lzio.h	/^#define luaZ_resizebuffer(/;"	d
luaZ_sizebuffer	src/lzio.h	/^#define luaZ_sizebuffer(/;"	d
lua_Alloc	src/lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	src/lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Chunkreader	src/lua.h	/^#define lua_Chunkreader	/;"	d
lua_Chunkwriter	src/lua.h	/^#define lua_Chunkwriter	/;"	d
lua_Debug	src/lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	src/lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Debug::currentline	src/lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::event	src/lua.h	/^  int event;$/;"	m	struct:lua_Debug	access:public
lua_Debug::i_ci	src/lua.h	/^  int i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::lastlinedefined	src/lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::linedefined	src/lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::name	src/lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::namewhat	src/lua.h	/^  const char *namewhat;	\/* (n) `global', `local', `field', `method' *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::nups	src/lua.h	/^  int nups;		\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::short_src	src/lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::source	src/lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug	access:public
lua_Debug::what	src/lua.h	/^  const char *what;	\/* (S) `Lua', `C', `main', `tail' *\/$/;"	m	struct:lua_Debug	access:public
lua_Hook	src/lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	src/lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_Number	src/lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	src/lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	src/lstate.h	/^struct lua_State {$/;"	s
lua_State	src/lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_State::CommonHeader	src/lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State	access:public
lua_State::allowhook	src/lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State	access:public
lua_State::base	src/lstate.h	/^  StkId base;  \/* base of current function *\/$/;"	m	struct:lua_State	access:public
lua_State::baseCcalls	src/lstate.h	/^  unsigned short baseCcalls;  \/* nested C calls when resuming coroutine *\/$/;"	m	struct:lua_State	access:public
lua_State::base_ci	src/lstate.h	/^  CallInfo *base_ci;  \/* array of CallInfo's *\/$/;"	m	struct:lua_State	access:public
lua_State::basehookcount	src/lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State	access:public
lua_State::ci	src/lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State	access:public
lua_State::end_ci	src/lstate.h	/^  CallInfo *end_ci;  \/* points after end of ci array*\/$/;"	m	struct:lua_State	access:public
lua_State::env	src/lstate.h	/^  TValue env;  \/* temporary place for environments *\/$/;"	m	struct:lua_State	access:public
lua_State::errfunc	src/lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State	access:public
lua_State::errorJmp	src/lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp	access:public
lua_State::gclist	src/lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State	access:public
lua_State::hook	src/lstate.h	/^  lua_Hook hook;$/;"	m	struct:lua_State	access:public
lua_State::hookcount	src/lstate.h	/^  int hookcount;$/;"	m	struct:lua_State	access:public
lua_State::hookmask	src/lstate.h	/^  lu_byte hookmask;$/;"	m	struct:lua_State	access:public
lua_State::l_G	src/lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State	access:public
lua_State::l_gt	src/lstate.h	/^  TValue l_gt;  \/* table of globals *\/$/;"	m	struct:lua_State	access:public
lua_State::nCcalls	src/lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State	access:public
lua_State::openupval	src/lstate.h	/^  GCObject *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State	access:public
lua_State::savedpc	src/lstate.h	/^  const Instruction *savedpc;  \/* `savedpc' of current function *\/$/;"	m	struct:lua_State	access:public
lua_State::size_ci	src/lstate.h	/^  int size_ci;  \/* size of array `base_ci' *\/$/;"	m	struct:lua_State	access:public
lua_State::stack	src/lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State	access:public
lua_State::stack_last	src/lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State	access:public
lua_State::stacksize	src/lstate.h	/^  int stacksize;$/;"	m	struct:lua_State	access:public
lua_State::status	src/lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State	access:public
lua_State::top	src/lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State	access:public
lua_TValue	src/lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_TValue::TValuefields	src/lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue	access:public
lua_Writer	src/lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);$/;"	t
lua_assert	src/llimits.h	/^#define lua_assert(/;"	d
lua_assert	src/lualib.h	/^#define lua_assert(/;"	d
lua_atpanic	src/lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f	signature:(lua_State *L, lua_CFunction panicf)
lua_atpanic	src/lua.h	/^LUA_API lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);$/;"	p	signature:(lua_State *L, lua_CFunction panicf)
lua_c	src/lua.c	/^#define lua_c$/;"	d	file:
lua_call	src/lapi.c	/^LUA_API void lua_call (lua_State *L, int nargs, int nresults) {$/;"	f	signature:(lua_State *L, int nargs, int nresults)
lua_call	src/lua.h	/^LUA_API void  (lua_call) (lua_State *L, int nargs, int nresults);$/;"	p	signature:(lua_State *L, int nargs, int nresults)
lua_checkstack	src/lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int size) {$/;"	f	signature:(lua_State *L, int size)
lua_checkstack	src/lua.h	/^LUA_API int   (lua_checkstack) (lua_State *L, int sz);$/;"	p	signature:(lua_State *L, int sz)
lua_close	src/lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_close	src/lua.h	/^LUA_API void       (lua_close) (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_concat	src/lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f	signature:(lua_State *L, int n)
lua_concat	src/lua.h	/^LUA_API void  (lua_concat) (lua_State *L, int n);$/;"	p	signature:(lua_State *L, int n)
lua_cpcall	src/lapi.c	/^LUA_API int lua_cpcall (lua_State *L, lua_CFunction func, void *ud) {$/;"	f	signature:(lua_State *L, lua_CFunction func, void *ud)
lua_cpcall	src/lua.h	/^LUA_API int   (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud);$/;"	p	signature:(lua_State *L, lua_CFunction func, void *ud)
lua_createtable	src/lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f	signature:(lua_State *L, int narray, int nrec)
lua_createtable	src/lua.h	/^LUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);$/;"	p	signature:(lua_State *L, int narr, int nrec)
lua_dump	src/lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data) {$/;"	f	signature:(lua_State *L, lua_Writer writer, void *data)
lua_dump	src/lua.h	/^LUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data);$/;"	p	signature:(lua_State *L, lua_Writer writer, void *data)
lua_equal	src/lapi.c	/^LUA_API int lua_equal (lua_State *L, int index1, int index2) {$/;"	f	signature:(lua_State *L, int index1, int index2)
lua_equal	src/lua.h	/^LUA_API int            (lua_equal) (lua_State *L, int idx1, int idx2);$/;"	p	signature:(lua_State *L, int idx1, int idx2)
lua_error	src/lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_error	src/lua.h	/^LUA_API int   (lua_error) (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_freeline	src/luaconf.h	/^#define lua_freeline(/;"	d
lua_gc	src/lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f	signature:(lua_State *L, int what, int data)
lua_gc	src/lua.h	/^LUA_API int (lua_gc) (lua_State *L, int what, int data);$/;"	p	signature:(lua_State *L, int what, int data)
lua_getallocf	src/lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f	signature:(lua_State *L, void **ud)
lua_getallocf	src/lua.h	/^LUA_API lua_Alloc (lua_getallocf) (lua_State *L, void **ud);$/;"	p	signature:(lua_State *L, void **ud)
lua_getfenv	src/lapi.c	/^LUA_API void lua_getfenv (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_getfenv	src/lua.h	/^LUA_API void  (lua_getfenv) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_getfield	src/lapi.c	/^LUA_API void lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f	signature:(lua_State *L, int idx, const char *k)
lua_getfield	src/lua.h	/^LUA_API void  (lua_getfield) (lua_State *L, int idx, const char *k);$/;"	p	signature:(lua_State *L, int idx, const char *k)
lua_getgccount	src/lua.h	/^#define lua_getgccount(/;"	d
lua_getglobal	src/lua.h	/^#define lua_getglobal(/;"	d
lua_gethook	src/ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_gethook	src/lua.h	/^LUA_API lua_Hook lua_gethook (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_gethookcount	src/ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_gethookcount	src/lua.h	/^LUA_API int lua_gethookcount (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_gethookmask	src/ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_gethookmask	src/lua.h	/^LUA_API int lua_gethookmask (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_getinfo	src/ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f	signature:(lua_State *L, const char *what, lua_Debug *ar)
lua_getinfo	src/lua.h	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);$/;"	p	signature:(lua_State *L, const char *what, lua_Debug *ar)
lua_getlocal	src/ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	signature:(lua_State *L, const lua_Debug *ar, int n)
lua_getlocal	src/lua.h	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);$/;"	p	signature:(lua_State *L, const lua_Debug *ar, int n)
lua_getmetatable	src/lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f	signature:(lua_State *L, int objindex)
lua_getmetatable	src/lua.h	/^LUA_API int   (lua_getmetatable) (lua_State *L, int objindex);$/;"	p	signature:(lua_State *L, int objindex)
lua_getref	src/lauxlib.h	/^#define lua_getref(/;"	d
lua_getregistry	src/lua.h	/^#define lua_getregistry(/;"	d
lua_getstack	src/ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f	signature:(lua_State *L, int level, lua_Debug *ar)
lua_getstack	src/lua.h	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar);$/;"	p	signature:(lua_State *L, int level, lua_Debug *ar)
lua_gettable	src/lapi.c	/^LUA_API void lua_gettable (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_gettable	src/lua.h	/^LUA_API void  (lua_gettable) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_gettop	src/lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_gettop	src/lua.h	/^LUA_API int   (lua_gettop) (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_getupvalue	src/lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f	signature:(lua_State *L, int funcindex, int n)
lua_getupvalue	src/lua.h	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n);$/;"	p	signature:(lua_State *L, int funcindex, int n)
lua_h	src/lua.h	/^#define lua_h$/;"	d
lua_ident	src/lapi.c	/^const char lua_ident[] =$/;"	v
lua_insert	src/lapi.c	/^LUA_API void lua_insert (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_insert	src/lua.h	/^LUA_API void  (lua_insert) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_isboolean	src/lua.h	/^#define lua_isboolean(/;"	d
lua_iscfunction	src/lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_iscfunction	src/lua.h	/^LUA_API int             (lua_iscfunction) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_isfunction	src/lua.h	/^#define lua_isfunction(/;"	d
lua_islightuserdata	src/lua.h	/^#define lua_islightuserdata(/;"	d
lua_isnil	src/lua.h	/^#define lua_isnil(/;"	d
lua_isnone	src/lua.h	/^#define lua_isnone(/;"	d
lua_isnoneornil	src/lua.h	/^#define lua_isnoneornil(/;"	d
lua_isnumber	src/lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_isnumber	src/lua.h	/^LUA_API int             (lua_isnumber) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_isstring	src/lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_isstring	src/lua.h	/^LUA_API int             (lua_isstring) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_istable	src/lua.h	/^#define lua_istable(/;"	d
lua_isthread	src/lua.h	/^#define lua_isthread(/;"	d
lua_isuserdata	src/lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_isuserdata	src/lua.h	/^LUA_API int             (lua_isuserdata) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_lessthan	src/lapi.c	/^LUA_API int lua_lessthan (lua_State *L, int index1, int index2) {$/;"	f	signature:(lua_State *L, int index1, int index2)
lua_lessthan	src/lua.h	/^LUA_API int            (lua_lessthan) (lua_State *L, int idx1, int idx2);$/;"	p	signature:(lua_State *L, int idx1, int idx2)
lua_load	src/lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f	signature:(lua_State *L, lua_Reader reader, void *data, const char *chunkname)
lua_load	src/lua.h	/^LUA_API int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,$/;"	p	signature:(lua_State *L, lua_Reader reader, void *dt, const char *chunkname)
lua_lock	src/llimits.h	/^#define lua_lock(/;"	d
lua_longjmp	src/ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_longjmp::b	src/ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:	access:public
lua_longjmp::previous	src/ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:	access:public
lua_longjmp::status	src/ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:	access:public
lua_newstate	src/lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f	signature:(lua_Alloc f, void *ud)
lua_newstate	src/lua.h	/^LUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);$/;"	p	signature:(lua_Alloc f, void *ud)
lua_newtable	src/lua.h	/^#define lua_newtable(/;"	d
lua_newthread	src/lapi.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_newthread	src/lua.h	/^LUA_API lua_State *(lua_newthread) (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_newuserdata	src/lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f	signature:(lua_State *L, size_t size)
lua_newuserdata	src/lua.h	/^LUA_API void *(lua_newuserdata) (lua_State *L, size_t sz);$/;"	p	signature:(lua_State *L, size_t sz)
lua_next	src/lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_next	src/lua.h	/^LUA_API int   (lua_next) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_number2int	src/luaconf.h	/^#define lua_number2int(/;"	d
lua_number2integer	src/luaconf.h	/^#define lua_number2integer(/;"	d
lua_number2str	src/luaconf.h	/^#define lua_number2str(/;"	d
lua_objlen	src/lapi.c	/^LUA_API size_t lua_objlen (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_objlen	src/lua.h	/^LUA_API size_t          (lua_objlen) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_open	src/lua.h	/^#define lua_open(/;"	d
lua_pcall	src/lapi.c	/^LUA_API int lua_pcall (lua_State *L, int nargs, int nresults, int errfunc) {$/;"	f	signature:(lua_State *L, int nargs, int nresults, int errfunc)
lua_pcall	src/lua.h	/^LUA_API int   (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);$/;"	p	signature:(lua_State *L, int nargs, int nresults, int errfunc)
lua_pclose	src/luaconf.h	/^#define lua_pclose(/;"	d
lua_pop	src/lua.h	/^#define lua_pop(/;"	d
lua_popen	src/luaconf.h	/^#define lua_popen(/;"	d
lua_pushboolean	src/lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f	signature:(lua_State *L, int b)
lua_pushboolean	src/lua.h	/^LUA_API void  (lua_pushboolean) (lua_State *L, int b);$/;"	p	signature:(lua_State *L, int b)
lua_pushcclosure	src/lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f	signature:(lua_State *L, lua_CFunction fn, int n)
lua_pushcclosure	src/lua.h	/^LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);$/;"	p	signature:(lua_State *L, lua_CFunction fn, int n)
lua_pushcfunction	src/lua.h	/^#define lua_pushcfunction(/;"	d
lua_pushfstring	src/lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	signature:(lua_State *L, const char *fmt, ...)
lua_pushfstring	src/lua.h	/^LUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);$/;"	p	signature:(lua_State *L, const char *fmt, ...)
lua_pushinteger	src/lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f	signature:(lua_State *L, lua_Integer n)
lua_pushinteger	src/lua.h	/^LUA_API void  (lua_pushinteger) (lua_State *L, lua_Integer n);$/;"	p	signature:(lua_State *L, lua_Integer n)
lua_pushlightuserdata	src/lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f	signature:(lua_State *L, void *p)
lua_pushlightuserdata	src/lua.h	/^LUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);$/;"	p	signature:(lua_State *L, void *p)
lua_pushliteral	src/lua.h	/^#define lua_pushliteral(/;"	d
lua_pushlstring	src/lapi.c	/^LUA_API void lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f	signature:(lua_State *L, const char *s, size_t len)
lua_pushlstring	src/lua.h	/^LUA_API void  (lua_pushlstring) (lua_State *L, const char *s, size_t l);$/;"	p	signature:(lua_State *L, const char *s, size_t l)
lua_pushnil	src/lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_pushnil	src/lua.h	/^LUA_API void  (lua_pushnil) (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_pushnumber	src/lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f	signature:(lua_State *L, lua_Number n)
lua_pushnumber	src/lua.h	/^LUA_API void  (lua_pushnumber) (lua_State *L, lua_Number n);$/;"	p	signature:(lua_State *L, lua_Number n)
lua_pushstring	src/lapi.c	/^LUA_API void lua_pushstring (lua_State *L, const char *s) {$/;"	f	signature:(lua_State *L, const char *s)
lua_pushstring	src/lua.h	/^LUA_API void  (lua_pushstring) (lua_State *L, const char *s);$/;"	p	signature:(lua_State *L, const char *s)
lua_pushthread	src/lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_pushthread	src/lua.h	/^LUA_API int   (lua_pushthread) (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_pushvalue	src/lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_pushvalue	src/lua.h	/^LUA_API void  (lua_pushvalue) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_pushvfstring	src/lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f	signature:(lua_State *L, const char *fmt, va_list argp)
lua_pushvfstring	src/lua.h	/^LUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,$/;"	p	signature:(lua_State *L, const char *fmt, va_list argp)
lua_rawequal	src/lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f	signature:(lua_State *L, int index1, int index2)
lua_rawequal	src/lua.h	/^LUA_API int            (lua_rawequal) (lua_State *L, int idx1, int idx2);$/;"	p	signature:(lua_State *L, int idx1, int idx2)
lua_rawget	src/lapi.c	/^LUA_API void lua_rawget (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_rawget	src/lua.h	/^LUA_API void  (lua_rawget) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_rawgeti	src/lapi.c	/^LUA_API void lua_rawgeti (lua_State *L, int idx, int n) {$/;"	f	signature:(lua_State *L, int idx, int n)
lua_rawgeti	src/lua.h	/^LUA_API void  (lua_rawgeti) (lua_State *L, int idx, int n);$/;"	p	signature:(lua_State *L, int idx, int n)
lua_rawset	src/lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_rawset	src/lua.h	/^LUA_API void  (lua_rawset) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_rawseti	src/lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, int n) {$/;"	f	signature:(lua_State *L, int idx, int n)
lua_rawseti	src/lua.h	/^LUA_API void  (lua_rawseti) (lua_State *L, int idx, int n);$/;"	p	signature:(lua_State *L, int idx, int n)
lua_readline	src/luaconf.h	/^#define lua_readline(/;"	d
lua_ref	src/lauxlib.h	/^#define lua_ref(/;"	d
lua_register	src/lua.h	/^#define lua_register(/;"	d
lua_remove	src/lapi.c	/^LUA_API void lua_remove (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_remove	src/lua.h	/^LUA_API void  (lua_remove) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_replace	src/lapi.c	/^LUA_API void lua_replace (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_replace	src/lua.h	/^LUA_API void  (lua_replace) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_resume	src/ldo.c	/^LUA_API int lua_resume (lua_State *L, int nargs) {$/;"	f	signature:(lua_State *L, int nargs)
lua_resume	src/lua.h	/^LUA_API int  (lua_resume) (lua_State *L, int narg);$/;"	p	signature:(lua_State *L, int narg)
lua_saveline	src/luaconf.h	/^#define lua_saveline(/;"	d
lua_setallocf	src/lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f	signature:(lua_State *L, lua_Alloc f, void *ud)
lua_setallocf	src/lua.h	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);$/;"	p	signature:(lua_State *L, lua_Alloc f, void *ud)
lua_setfenv	src/lapi.c	/^LUA_API int lua_setfenv (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_setfenv	src/lua.h	/^LUA_API int   (lua_setfenv) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_setfield	src/lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f	signature:(lua_State *L, int idx, const char *k)
lua_setfield	src/lua.h	/^LUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);$/;"	p	signature:(lua_State *L, int idx, const char *k)
lua_setglobal	src/lua.h	/^#define lua_setglobal(/;"	d
lua_sethook	src/ldebug.c	/^LUA_API int lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f	signature:(lua_State *L, lua_Hook func, int mask, int count)
lua_sethook	src/lua.h	/^LUA_API int lua_sethook (lua_State *L, lua_Hook func, int mask, int count);$/;"	p	signature:(lua_State *L, lua_Hook func, int mask, int count)
lua_setlevel	src/lapi.c	/^LUA_API void lua_setlevel (lua_State *from, lua_State *to) {$/;"	f	signature:(lua_State *from, lua_State *to)
lua_setlevel	src/lua.h	/^LUA_API void lua_setlevel	(lua_State *from, lua_State *to);$/;"	p	signature:(lua_State *from, lua_State *to)
lua_setlocal	src/ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	signature:(lua_State *L, const lua_Debug *ar, int n)
lua_setlocal	src/lua.h	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);$/;"	p	signature:(lua_State *L, const lua_Debug *ar, int n)
lua_setmetatable	src/lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f	signature:(lua_State *L, int objindex)
lua_setmetatable	src/lua.h	/^LUA_API int   (lua_setmetatable) (lua_State *L, int objindex);$/;"	p	signature:(lua_State *L, int objindex)
lua_settable	src/lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_settable	src/lua.h	/^LUA_API void  (lua_settable) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_settop	src/lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_settop	src/lua.h	/^LUA_API void  (lua_settop) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_setupvalue	src/lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f	signature:(lua_State *L, int funcindex, int n)
lua_setupvalue	src/lua.h	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n);$/;"	p	signature:(lua_State *L, int funcindex, int n)
lua_status	src/lapi.c	/^LUA_API int  lua_status (lua_State *L) {$/;"	f	signature:(lua_State *L)
lua_status	src/lua.h	/^LUA_API int  (lua_status) (lua_State *L);$/;"	p	signature:(lua_State *L)
lua_stdin_is_tty	src/luaconf.h	/^#define lua_stdin_is_tty(/;"	d
lua_str2number	src/luaconf.h	/^#define lua_str2number(/;"	d
lua_strlen	src/lua.h	/^#define lua_strlen(/;"	d
lua_tmpnam	src/luaconf.h	/^#define lua_tmpnam(/;"	d
lua_toboolean	src/lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_toboolean	src/lua.h	/^LUA_API int             (lua_toboolean) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_tocfunction	src/lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_tocfunction	src/lua.h	/^LUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_tointeger	src/lapi.c	/^LUA_API lua_Integer lua_tointeger (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_tointeger	src/lua.h	/^LUA_API lua_Integer     (lua_tointeger) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_tolstring	src/lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f	signature:(lua_State *L, int idx, size_t *len)
lua_tolstring	src/lua.h	/^LUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);$/;"	p	signature:(lua_State *L, int idx, size_t *len)
lua_tonumber	src/lapi.c	/^LUA_API lua_Number lua_tonumber (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_tonumber	src/lua.h	/^LUA_API lua_Number      (lua_tonumber) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_topointer	src/lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_topointer	src/lua.h	/^LUA_API const void     *(lua_topointer) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_tostring	src/lua.h	/^#define lua_tostring(/;"	d
lua_tothread	src/lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_tothread	src/lua.h	/^LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_touserdata	src/lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_touserdata	src/lua.h	/^LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_type	src/lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f	signature:(lua_State *L, int idx)
lua_type	src/lua.h	/^LUA_API int             (lua_type) (lua_State *L, int idx);$/;"	p	signature:(lua_State *L, int idx)
lua_typename	src/lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f	signature:(lua_State *L, int t)
lua_typename	src/lua.h	/^LUA_API const char     *(lua_typename) (lua_State *L, int tp);$/;"	p	signature:(lua_State *L, int tp)
lua_unlock	src/llimits.h	/^#define lua_unlock(/;"	d
lua_unref	src/lauxlib.h	/^#define lua_unref(/;"	d
lua_upvalueindex	src/lua.h	/^#define lua_upvalueindex(/;"	d
lua_xmove	src/lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f	signature:(lua_State *from, lua_State *to, int n)
lua_xmove	src/lua.h	/^LUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);$/;"	p	signature:(lua_State *from, lua_State *to, int n)
lua_yield	src/ldo.c	/^LUA_API int lua_yield (lua_State *L, int nresults) {$/;"	f	signature:(lua_State *L, int nresults)
lua_yield	src/lua.h	/^LUA_API int  (lua_yield) (lua_State *L, int nresults);$/;"	p	signature:(lua_State *L, int nresults)
luac_c	src/luac.c	/^#define luac_c$/;"	d	file:
luac_c	src/print.c	/^#define luac_c$/;"	d	file:
luai_Cast	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	u
luai_Cast::l_d	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast	access:public
luai_Cast::l_l	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast	access:public
luai_apicheck	src/luaconf.h	/^#define luai_apicheck(/;"	d
luai_jmpbuf	src/luaconf.h	/^#define luai_jmpbuf	/;"	d
luai_numadd	src/luaconf.h	/^#define luai_numadd(/;"	d
luai_numdiv	src/luaconf.h	/^#define luai_numdiv(/;"	d
luai_numeq	src/luaconf.h	/^#define luai_numeq(/;"	d
luai_numisnan	src/luaconf.h	/^#define luai_numisnan(/;"	d
luai_numle	src/luaconf.h	/^#define luai_numle(/;"	d
luai_numlt	src/luaconf.h	/^#define luai_numlt(/;"	d
luai_nummod	src/luaconf.h	/^#define luai_nummod(/;"	d
luai_nummul	src/luaconf.h	/^#define luai_nummul(/;"	d
luai_numpow	src/luaconf.h	/^#define luai_numpow(/;"	d
luai_numsub	src/luaconf.h	/^#define luai_numsub(/;"	d
luai_numunm	src/luaconf.h	/^#define luai_numunm(/;"	d
luai_threadyield	src/llimits.h	/^#define luai_threadyield(/;"	d
luai_userstateclose	src/luaconf.h	/^#define luai_userstateclose(/;"	d
luai_userstatefree	src/luaconf.h	/^#define luai_userstatefree(/;"	d
luai_userstateopen	src/luaconf.h	/^#define luai_userstateopen(/;"	d
luai_userstateresume	src/luaconf.h	/^#define luai_userstateresume(/;"	d
luai_userstatethread	src/luaconf.h	/^#define luai_userstatethread(/;"	d
luai_userstateyield	src/luaconf.h	/^#define luai_userstateyield(/;"	d
lualib_h	src/lualib.h	/^#define lualib_h$/;"	d
lualibs	src/linit.c	/^static const luaL_Reg lualibs[] = {$/;"	v	file:
luaopen_base	src/lbaselib.c	/^LUALIB_API int luaopen_base (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_base	src/lualib.h	/^LUALIB_API int (luaopen_base) (lua_State *L);$/;"	p	signature:(lua_State *L)
luaopen_debug	src/ldblib.c	/^LUALIB_API int luaopen_debug (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_debug	src/lualib.h	/^LUALIB_API int (luaopen_debug) (lua_State *L);$/;"	p	signature:(lua_State *L)
luaopen_io	src/liolib.c	/^LUALIB_API int luaopen_io (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_io	src/lualib.h	/^LUALIB_API int (luaopen_io) (lua_State *L);$/;"	p	signature:(lua_State *L)
luaopen_math	src/lmathlib.c	/^LUALIB_API int luaopen_math (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_math	src/lualib.h	/^LUALIB_API int (luaopen_math) (lua_State *L);$/;"	p	signature:(lua_State *L)
luaopen_os	src/loslib.c	/^LUALIB_API int luaopen_os (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_os	src/lualib.h	/^LUALIB_API int (luaopen_os) (lua_State *L);$/;"	p	signature:(lua_State *L)
luaopen_package	src/loadlib.c	/^LUALIB_API int luaopen_package (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_package	src/lualib.h	/^LUALIB_API int (luaopen_package) (lua_State *L);$/;"	p	signature:(lua_State *L)
luaopen_string	src/lstrlib.c	/^LUALIB_API int luaopen_string (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_string	src/lualib.h	/^LUALIB_API int (luaopen_string) (lua_State *L);$/;"	p	signature:(lua_State *L)
luaopen_table	src/ltablib.c	/^LUALIB_API int luaopen_table (lua_State *L) {$/;"	f	signature:(lua_State *L)
luaopen_table	src/lualib.h	/^LUALIB_API int (luaopen_table) (lua_State *L);$/;"	p	signature:(lua_State *L)
lundump_c	src/lundump.c	/^#define lundump_c$/;"	d	file:
lundump_h	src/lundump.h	/^#define lundump_h$/;"	d
lvl	src/lauxlib.h	/^  int lvl;  \/* number of strings in the stack (level) *\/$/;"	m	struct:luaL_Buffer	access:public
lvm_c	src/lvm.c	/^#define lvm_c$/;"	d	file:
lvm_h	src/lvm.h	/^#define lvm_h$/;"	d
lzio_c	src/lzio.c	/^#define lzio_c$/;"	d	file:
lzio_h	src/lzio.h	/^#define lzio_h$/;"	d
main	src/lua.c	/^int main (int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	src/luac.c	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
mainposition	src/ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	file:	signature:(const Table *t, const TValue *key)
mainthread	src/lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State	access:public
makemask	src/ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	file:	signature:(const char *smask, int count)
makewhite	src/lgc.c	/^#define makewhite(/;"	d	file:
markfinalized	src/lgc.c	/^#define markfinalized(/;"	d	file:
markmt	src/lgc.c	/^static void markmt (global_State *g) {$/;"	f	file:	signature:(global_State *g)
markobject	src/lgc.c	/^#define markobject(/;"	d	file:
markroot	src/lgc.c	/^static void markroot (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
marktmu	src/lgc.c	/^static void marktmu (global_State *g) {$/;"	f	file:	signature:(global_State *g)
markupval	src/lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	file:	signature:(FuncState *fs, int level)
markvalue	src/lgc.c	/^#define markvalue(/;"	d	file:
maskmarks	src/lgc.c	/^#define maskmarks	/;"	d	file:
match	src/lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	file:	signature:(MatchState *ms, const char *s, const char *p)
match	src/lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p);$/;"	p	file:	signature:(MatchState *ms, const char *s, const char *p)
match_capture	src/lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	file:	signature:(MatchState *ms, const char *s, int l)
match_class	src/lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	file:	signature:(int c, int cl)
matchbalance	src/lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	file:	signature:(MatchState *ms, const char *s, const char *p)
matchbracketclass	src/lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	file:	signature:(int c, const char *p, const char *ec)
math_abs	src/lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_acos	src/lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_asin	src/lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_atan	src/lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_atan2	src/lmathlib.c	/^static int math_atan2 (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_ceil	src/lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_cos	src/lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_cosh	src/lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_deg	src/lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_exp	src/lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_floor	src/lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_fmod	src/lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_frexp	src/lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_ldexp	src/lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_log	src/lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_log10	src/lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_max	src/lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_min	src/lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_modf	src/lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_pow	src/lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_rad	src/lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_random	src/lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_randomseed	src/lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_sin	src/lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_sinh	src/lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_sqrt	src/lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_tan	src/lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
math_tanh	src/lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
mathlib	src/lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	file:
max_expand	src/lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	file:	signature:(MatchState *ms, const char *s, const char *p, const char *ep)
maxn	src/ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
maxstacksize	src/lobject.h	/^  lu_byte maxstacksize;$/;"	m	struct:Proto	access:public
metatable	src/lobject.h	/^    struct Table *metatable;$/;"	m	struct:Udata::__anon5	typeref:struct:Udata::__anon5::Table	access:public
metatable	src/lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table	access:public
min_expand	src/lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	file:	signature:(MatchState *ms, const char *s, const char *p, const char *ep)
mkfuncname	src/loadlib.c	/^static const char *mkfuncname (lua_State *L, const char *modname) {$/;"	f	file:	signature:(lua_State *L, const char *modname)
modinit	src/loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	file:	signature:(lua_State *L, const char *modname)
mt	src/lstate.h	/^  struct Table *mt[NUM_TAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table	access:public
n	src/lobject.h	/^  lua_Number n;$/;"	m	union:__anon3	access:public
n	src/lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio	access:public
n	src/lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer	access:public
nCcalls	src/lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State	access:public
na	src/lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:	access:public
nactvar	src/lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the breakable structure *\/$/;"	m	struct:BlockCnt	file:	access:public
nactvar	src/lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState	access:public
name	src/lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg	access:public
name	src/ldo.c	/^  const char *name;$/;"	m	struct:SParser	file:	access:public
name	src/lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug	access:public
name	src/lundump.c	/^ const char* name;$/;"	m	struct:__anon16	file:	access:public
namewhat	src/lua.h	/^  const char *namewhat;	\/* (n) `global', `local', `field', `method' *\/$/;"	m	struct:lua_Debug	access:public
need_value	src/lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	file:	signature:(FuncState *fs, int list)
new_localvar	src/lparser.c	/^static void new_localvar (LexState *ls, TString *name, int n) {$/;"	f	file:	signature:(LexState *ls, TString *name, int n)
new_localvarliteral	src/lparser.c	/^#define new_localvarliteral(/;"	d	file:
newfenv	src/liolib.c	/^static void newfenv (lua_State *L, lua_CFunction cls) {$/;"	f	file:	signature:(lua_State *L, lua_CFunction cls)
newfile	src/liolib.c	/^static FILE **newfile (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
newkey	src/ltable.c	/^static TValue *newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f	file:	signature:(lua_State *L, Table *t, const TValue *key)
newlstr	src/lstring.c	/^static TString *newlstr (lua_State *L, const char *str, size_t l,$/;"	f	file:	signature:(lua_State *L, const char *str, size_t l, unsigned int h)
next	src/llex.c	/^#define next(/;"	d	file:
next	src/lobject.h	/^      struct UpVal *next;$/;"	m	struct:UpVal::__anon6::__anon7	typeref:struct:UpVal::__anon6::__anon7::UpVal	access:public
next	src/lobject.h	/^    struct Node *next;  \/* for chaining *\/$/;"	m	struct:TKey::__anon8	typeref:struct:TKey::__anon8::Node	access:public
ngcotouv	src/lstate.h	/^#define ngcotouv(/;"	d
nh	src/lparser.c	/^  int nh;  \/* total number of `record' elements *\/$/;"	m	struct:ConsControl	file:	access:public
nilK	src/lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	file:	signature:(FuncState *fs)
nk	src/lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon8	access:public
nk	src/lparser.h	/^  int nk;  \/* number of elements in `k' *\/$/;"	m	struct:FuncState	access:public
nlocvars	src/lparser.h	/^  short nlocvars;  \/* number of elements in `locvars' *\/$/;"	m	struct:FuncState	access:public
node	src/lobject.h	/^  Node *node;$/;"	m	struct:Table	access:public
notail	src/lua.c	/^#define notail(/;"	d	file:
np	src/lparser.h	/^  int np;  \/* number of elements in `p' *\/$/;"	m	struct:FuncState	access:public
nresults	src/lapi.c	/^  int nresults;$/;"	m	struct:CallS	file:	access:public
nresults	src/lstate.h	/^  int nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo	access:public
numints	src/ltable.c	/^#define numints	/;"	d	file:
numparams	src/lobject.h	/^  lu_byte numparams;$/;"	m	struct:Proto	access:public
numusearray	src/ltable.c	/^static int numusearray (const Table *t, int *nums) {$/;"	f	file:	signature:(const Table *t, int *nums)
numusehash	src/ltable.c	/^static int numusehash (const Table *t, int *nums, int *pnasize) {$/;"	f	file:	signature:(const Table *t, int *nums, int *pnasize)
nups	src/lobject.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:Proto	access:public
nups	src/lua.h	/^  int nups;		\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug	access:public
nuse	src/lstate.h	/^  lu_int32 nuse;  \/* number of elements *\/$/;"	m	struct:stringtable	access:public
nval	src/lparser.h	/^    lua_Number nval;$/;"	m	union:expdesc::__anon12	access:public
nvalue	src/lobject.h	/^#define nvalue(/;"	d
obj2gco	src/lstate.h	/^#define obj2gco(/;"	d
open_func	src/lparser.c	/^static void open_func (LexState *ls, FuncState *fs) {$/;"	f	file:	signature:(LexState *ls, FuncState *fs)
openupval	src/lstate.h	/^  GCObject *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State	access:public
opmode	src/lopcodes.c	/^#define opmode(/;"	d	file:
os_clock	src/loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_date	src/loslib.c	/^static int os_date (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_difftime	src/loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_execute	src/loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_exit	src/loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_getenv	src/loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_pushresult	src/loslib.c	/^static int os_pushresult (lua_State *L, int i, const char *filename) {$/;"	f	file:	signature:(lua_State *L, int i, const char *filename)
os_remove	src/loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_rename	src/loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_setlocale	src/loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_time	src/loslib.c	/^static int os_time (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
os_tmpname	src/loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
otherwhite	src/lgc.h	/^#define otherwhite(/;"	d
output	src/luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	file:
p	src/lauxlib.h	/^  char *p;			\/* current position in buffer *\/$/;"	m	struct:luaL_Buffer	access:public
p	src/lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto	access:public
p	src/lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto	access:public
p	src/lobject.h	/^  void *p;$/;"	m	union:__anon3	access:public
p	src/lstate.h	/^  struct Proto p;$/;"	m	union:GCObject	typeref:struct:GCObject::Proto	access:public
p	src/lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio	access:public
panic	src/lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
panic	src/lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State	access:public
parlist	src/lparser.c	/^static void parlist (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
patchlistaux	src/lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	file:	signature:(FuncState *fs, int list, int vtarget, int reg, int dtarget)
patchtestreg	src/lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	file:	signature:(FuncState *fs, int node, int reg)
pc	src/lparser.h	/^  int pc;  \/* next position to code (equivalent to `ncode') *\/$/;"	m	struct:FuncState	access:public
pcRel	src/ldebug.h	/^#define pcRel(/;"	d
pk_funcs	src/loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	file:
pmain	src/lua.c	/^static int pmain (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
pmain	src/luac.c	/^static int pmain(lua_State* L)$/;"	f	file:	signature:(lua_State* L)
posrelat	src/lstrlib.c	/^static ptrdiff_t posrelat (ptrdiff_t pos, size_t len) {$/;"	f	file:	signature:(ptrdiff_t pos, size_t len)
precheck	src/ldebug.c	/^static int precheck (const Proto *pt) {$/;"	f	file:	signature:(const Proto *pt)
prefixexp	src/lparser.c	/^static void prefixexp (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
preinit_state	src/lstate.c	/^static void preinit_state (lua_State *L, global_State *g) {$/;"	f	file:	signature:(lua_State *L, global_State *g)
prev	src/lobject.h	/^      struct UpVal *prev;$/;"	m	struct:UpVal::__anon6::__anon7	typeref:struct:UpVal::__anon6::__anon7::UpVal	access:public
prev	src/lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:	access:public
prev	src/lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState	access:public
previous	src/ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:	access:public
previous	src/lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:	access:public
primaryexp	src/lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
print_usage	src/lua.c	/^static void print_usage (void) {$/;"	f	file:	signature:(void)
print_version	src/lua.c	/^static void print_version (void) {$/;"	f	file:	signature:(void)
priority	src/lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon10	file:
progname	src/lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
progname	src/luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	file:
propagateall	src/lgc.c	/^static size_t propagateall (global_State *g) {$/;"	f	file:	signature:(global_State *g)
propagatemark	src/lgc.c	/^static l_mem propagatemark (global_State *g) {$/;"	f	file:	signature:(global_State *g)
push_captures	src/lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	file:	signature:(MatchState *ms, const char *s, const char *e)
push_onecapture	src/lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	file:	signature:(MatchState *ms, int i, const char *s, const char *e)
pushclosure	src/lparser.c	/^static void pushclosure (LexState *ls, FuncState *func, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, FuncState *func, expdesc *v)
pusherror	src/loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
pushline	src/lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	file:	signature:(lua_State *L, int firstline)
pushnexttemplate	src/loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	file:	signature:(lua_State *L, const char *path)
pushresult	src/liolib.c	/^static int pushresult (lua_State *L, int i, const char *filename) {$/;"	f	file:	signature:(lua_State *L, int i, const char *filename)
pushstr	src/lobject.c	/^static void pushstr (lua_State *L, const char *str) {$/;"	f	file:	signature:(lua_State *L, const char *str)
pvalue	src/lobject.h	/^#define pvalue(/;"	d
r	src/llex.h	/^  lua_Number r;$/;"	m	union:__anon2	access:public
rawgco2ts	src/lstate.h	/^#define rawgco2ts(/;"	d
rawgco2u	src/lstate.h	/^#define rawgco2u(/;"	d
rawtsvalue	src/lobject.h	/^#define rawtsvalue(/;"	d
rawuvalue	src/lobject.h	/^#define rawuvalue(/;"	d
read_chars	src/liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	file:	signature:(lua_State *L, FILE *f, size_t n)
read_line	src/liolib.c	/^static int read_line (lua_State *L, FILE *f) {$/;"	f	file:	signature:(lua_State *L, FILE *f)
read_long_string	src/llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	file:	signature:(LexState *ls, SemInfo *seminfo, int sep)
read_number	src/liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	file:	signature:(lua_State *L, FILE *f)
read_numeral	src/llex.c	/^static void read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	file:	signature:(LexState *ls, SemInfo *seminfo)
read_string	src/llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	file:	signature:(LexState *ls, int del, SemInfo *seminfo)
readable	src/loadlib.c	/^static int readable (const char *filename) {$/;"	f	file:	signature:(const char *filename)
reader	src/lzio.h	/^  lua_Reader reader;$/;"	m	struct:Zio	access:public
reallymarkobject	src/lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	file:	signature:(global_State *g, GCObject *o)
recfield	src/lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:	signature:(LexState *ls, struct ConsControl *cc)
registerlocalvar	src/lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	file:	signature:(LexState *ls, TString *varname)
registry	src/lstate.h	/^#define registry(/;"	d
rehash	src/ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	file:	signature:(lua_State *L, Table *t, const TValue *ek)
remarkupvals	src/lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	file:	signature:(global_State *g)
removeentry	src/lgc.c	/^static void removeentry (Node *n) {$/;"	f	file:	signature:(Node *n)
removevalues	src/lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	file:	signature:(FuncState *fs, int list)
removevars	src/lparser.c	/^static void removevars (LexState *ls, int tolevel) {$/;"	f	file:	signature:(LexState *ls, int tolevel)
repeatstat	src/lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	file:	signature:(LexState *ls, int line)
report	src/lua.c	/^static int report (lua_State *L, int status) {$/;"	f	file:	signature:(lua_State *L, int status)
reserved	src/lobject.h	/^    lu_byte reserved;$/;"	m	struct:TString::__anon4	access:public
reset2bits	src/lgc.h	/^#define reset2bits(/;"	d
resetbit	src/lgc.h	/^#define resetbit(/;"	d
resetbits	src/lgc.h	/^#define resetbits(/;"	d
resethookcount	src/ldebug.h	/^#define resethookcount(/;"	d
resetstack	src/ldo.c	/^static void resetstack (lua_State *L, int status) {$/;"	f	file:	signature:(lua_State *L, int status)
resize	src/ltable.c	/^static void resize (lua_State *L, Table *t, int nasize, int nhsize) {$/;"	f	file:	signature:(lua_State *L, Table *t, int nasize, int nhsize)
restore_stack_limit	src/ldo.c	/^static void restore_stack_limit (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
restoreci	src/ldo.h	/^#define restoreci(/;"	d
restorestack	src/ldo.h	/^#define restorestack(/;"	d
resume	src/ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	file:	signature:(lua_State *L, void *ud)
resume_error	src/ldo.c	/^static int resume_error (lua_State *L, const char *msg) {$/;"	f	file:	signature:(lua_State *L, const char *msg)
retstat	src/lparser.c	/^static void retstat (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
right	src/lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon10	file:	access:public
rootgc	src/lstate.h	/^  GCObject *rootgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State	access:public
runargs	src/lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	file:	signature:(lua_State *L, char **argv, int n)
runtime_check	src/lvm.c	/^#define runtime_check(/;"	d	file:
s	src/lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	file:	access:public
s	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	union:expdesc::__anon12	typeref:struct:expdesc::__anon12::__anon13	access:public
save	src/llex.c	/^static void save (LexState *ls, int c) {$/;"	f	file:	signature:(LexState *ls, int c)
save_and_next	src/llex.c	/^#define save_and_next(/;"	d	file:
saveci	src/ldo.h	/^#define saveci(/;"	d
savedpc	src/lstate.h	/^  const Instruction *savedpc;  \/* `savedpc' of current function *\/$/;"	m	struct:lua_State	access:public
savedpc	src/lstate.h	/^  const Instruction *savedpc;$/;"	m	struct:CallInfo	access:public
savestack	src/ldo.h	/^#define savestack(/;"	d
scanformat	src/lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	file:	signature:(lua_State *L, const char *strfrmt, char *form)
searchvar	src/lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	file:	signature:(FuncState *fs, TString *n)
seminfo	src/llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token	access:public
sentinel	src/loadlib.c	/^#define sentinel	/;"	d	file:
sentinel_	src/loadlib.c	/^static const int sentinel_ = 0;$/;"	v	file:
set2	src/ltablib.c	/^static void set2 (lua_State *L, int i, int j) {$/;"	f	file:	signature:(lua_State *L, int i, int j)
set2bits	src/lgc.h	/^#define set2bits(/;"	d
setarrayvector	src/ltable.c	/^static void setarrayvector (lua_State *L, Table *t, int size) {$/;"	f	file:	signature:(lua_State *L, Table *t, int size)
setbits	src/lgc.h	/^#define setbits(/;"	d
setboolfield	src/loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	file:	signature:(lua_State *L, const char *key, int value)
setbvalue	src/lobject.h	/^#define setbvalue(/;"	d
setclvalue	src/lobject.h	/^#define setclvalue(/;"	d
setfenv	src/loadlib.c	/^static void setfenv (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
setfield	src/loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	file:	signature:(lua_State *L, const char *key, int value)
sethvalue	src/lobject.h	/^#define sethvalue(/;"	d
sethvalue2s	src/lobject.h	/^#define sethvalue2s	/;"	d
setn	src/ltablib.c	/^static int setn (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
setnilvalue	src/lobject.h	/^#define setnilvalue(/;"	d
setnodevector	src/ltable.c	/^static void setnodevector (lua_State *L, Table *t, int size) {$/;"	f	file:	signature:(lua_State *L, Table *t, int size)
setnvalue	src/lobject.h	/^#define setnvalue(/;"	d
setobj	src/lobject.h	/^#define setobj(/;"	d
setobj2n	src/lobject.h	/^#define setobj2n	/;"	d
setobj2s	src/lobject.h	/^#define setobj2s	/;"	d
setobj2t	src/lobject.h	/^#define setobj2t	/;"	d
setobjs2s	src/lobject.h	/^#define setobjs2s	/;"	d
setobjt2t	src/lobject.h	/^#define setobjt2t	/;"	d
setpath	src/loadlib.c	/^static void setpath (lua_State *L, const char *fieldname, const char *envname,$/;"	f	file:	signature:(lua_State *L, const char *fieldname, const char *envname, const char *def)
setprogdir	src/loadlib.c	/^#define setprogdir(/;"	d	file:
setprogdir	src/loadlib.c	/^#undef setprogdir$/;"	d	file:
setprogdir	src/loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
setptvalue	src/lobject.h	/^#define setptvalue(/;"	d
setptvalue2s	src/lobject.h	/^#define setptvalue2s	/;"	d
setpvalue	src/lobject.h	/^#define setpvalue(/;"	d
setsvalue	src/lobject.h	/^#define setsvalue(/;"	d
setsvalue2n	src/lobject.h	/^#define setsvalue2n	/;"	d
setsvalue2s	src/lobject.h	/^#define setsvalue2s	/;"	d
settabsi	src/ldblib.c	/^static void settabsi (lua_State *L, const char *i, int v) {$/;"	f	file:	signature:(lua_State *L, const char *i, int v)
settabss	src/ldblib.c	/^static void settabss (lua_State *L, const char *i, const char *v) {$/;"	f	file:	signature:(lua_State *L, const char *i, const char *v)
setthreshold	src/lgc.c	/^#define setthreshold(/;"	d	file:
setthvalue	src/lobject.h	/^#define setthvalue(/;"	d
setttype	src/lobject.h	/^#define setttype(/;"	d
setuvalue	src/lobject.h	/^#define setuvalue(/;"	d
short_src	src/lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug	access:public
simpleexp	src/lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
singlematch	src/lstrlib.c	/^static int singlematch (int c, const char *p, const char *ep) {$/;"	f	file:	signature:(int c, const char *p, const char *ep)
singlestep	src/lgc.c	/^static l_mem singlestep (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
singlevar	src/lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	file:	signature:(LexState *ls, expdesc *var)
singlevaraux	src/lparser.c	/^static int singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	file:	signature:(FuncState *fs, TString *n, expdesc *var, int base)
size	src/lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	file:	access:public
size	src/lstate.h	/^  int size;$/;"	m	struct:stringtable	access:public
sizeCclosure	src/lfunc.h	/^#define sizeCclosure(/;"	d
sizeLclosure	src/lfunc.h	/^#define sizeLclosure(/;"	d
size_ci	src/lstate.h	/^  int size_ci;  \/* size of array `base_ci' *\/$/;"	m	struct:lua_State	access:public
sizearray	src/lobject.h	/^  int sizearray;  \/* size of `array' array *\/$/;"	m	struct:Table	access:public
sizecode	src/lobject.h	/^  int sizecode;$/;"	m	struct:Proto	access:public
sizek	src/lobject.h	/^  int sizek;  \/* size of `k' *\/$/;"	m	struct:Proto	access:public
sizelineinfo	src/lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto	access:public
sizelocvars	src/lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto	access:public
sizenode	src/lobject.h	/^#define sizenode(/;"	d
sizep	src/lobject.h	/^  int sizep;  \/* size of `p' *\/$/;"	m	struct:Proto	access:public
sizestring	src/lstring.h	/^#define sizestring(/;"	d
sizeudata	src/lstring.h	/^#define sizeudata(/;"	d
sizeupvalues	src/lobject.h	/^  int sizeupvalues;$/;"	m	struct:Proto	access:public
skip_sep	src/llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
sort	src/ltablib.c	/^static int sort (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
sort_comp	src/ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	file:	signature:(lua_State *L, int a, int b)
source	src/llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState	access:public
source	src/lobject.h	/^  TString  *source;$/;"	m	struct:Proto	access:public
source	src/lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug	access:public
src_end	src/lstrlib.c	/^  const char *src_end;  \/* end (`\\0') of source string *\/$/;"	m	struct:MatchState	file:	access:public
src_init	src/lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:	access:public
stack	src/lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State	access:public
stack_init	src/lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	file:	signature:(lua_State *L1, lua_State *L)
stack_last	src/lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State	access:public
stacksize	src/lstate.h	/^  int stacksize;$/;"	m	struct:lua_State	access:public
start_capture	src/lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	file:	signature:(MatchState *ms, const char *s, const char *p, int what)
startpc	src/lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar	access:public
state_size	src/lstate.c	/^#define state_size(/;"	d	file:
statement	src/lparser.c	/^static int statement (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
statnames	src/lbaselib.c	/^static const char *const statnames[] =$/;"	v	file:
status	src/ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:	access:public
status	src/ldump.c	/^ int status;$/;"	m	struct:__anon1	file:	access:public
status	src/lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State	access:public
status	src/lua.c	/^  int status;$/;"	m	struct:Smain	file:	access:public
str_byte	src/lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_char	src/lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_checkname	src/lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
str_dump	src/lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_find	src/lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_find_aux	src/lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	file:	signature:(lua_State *L, int find)
str_format	src/lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_gsub	src/lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_len	src/lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_lower	src/lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_match	src/lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_rep	src/lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_reverse	src/lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_sub	src/lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
str_upper	src/lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
stringmark	src/lgc.c	/^#define stringmark(/;"	d	file:
stringtable	src/lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	src/lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
stringtable::hash	src/lstate.h	/^  GCObject **hash;$/;"	m	struct:stringtable	access:public
stringtable::nuse	src/lstate.h	/^  lu_int32 nuse;  \/* number of elements *\/$/;"	m	struct:stringtable	access:public
stringtable::size	src/lstate.h	/^  int size;$/;"	m	struct:stringtable	access:public
strip	src/ldump.c	/^ int strip;$/;"	m	struct:__anon1	file:	access:public
stripping	src/luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	file:
strlib	src/lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	file:
strt	src/lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State	access:public
subexpr	src/lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, unsigned int limit) {$/;"	f	file:	signature:(LexState *ls, expdesc *v, unsigned int limit)
svalue	src/lobject.h	/^#define svalue(/;"	d
sweepgc	src/lstate.h	/^  GCObject **sweepgc;  \/* position of sweep in `rootgc' *\/$/;"	m	struct:global_State	access:public
sweeplist	src/lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	file:	signature:(lua_State *L, GCObject **p, lu_mem count)
sweepstrgc	src/lstate.h	/^  int sweepstrgc;  \/* position of sweep in `strt' *\/$/;"	m	struct:global_State	access:public
sweepwholelist	src/lgc.c	/^#define sweepwholelist(/;"	d	file:
symbexec	src/ldebug.c	/^static Instruction symbexec (const Proto *pt, int lastpc, int reg) {$/;"	f	file:	signature:(const Proto *pt, int lastpc, int reg)
syslib	src/loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	file:
t	src/llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState	access:public
t	src/lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:	access:public
t	src/lparser.h	/^  int t;  \/* patch list of `exit when true' *\/$/;"	m	struct:expdesc	access:public
tab_funcs	src/ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	file:
tag_error	src/lauxlib.c	/^static void tag_error (lua_State *L, int narg, int tag) {$/;"	f	file:	signature:(lua_State *L, int narg, int tag)
tailcalls	src/lstate.h	/^  int tailcalls;  \/* number of tail calls lost under this entry *\/$/;"	m	struct:CallInfo	access:public
tconcat	src/ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
test2bits	src/lgc.h	/^#define test2bits(/;"	d
testAMode	src/lopcodes.h	/^#define testAMode(/;"	d
testTMode	src/lopcodes.h	/^#define testTMode(/;"	d
test_eof	src/liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	file:	signature:(lua_State *L, FILE *f)
test_then_block	src/lparser.c	/^static int test_then_block (LexState *ls) {$/;"	f	file:	signature:(LexState *ls)
testbit	src/lgc.h	/^#define testbit(/;"	d
testbits	src/lgc.h	/^#define testbits(/;"	d
testnext	src/lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	file:	signature:(LexState *ls, int c)
th	src/lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCObject	typeref:struct:GCObject::lua_State	access:public
thvalue	src/lobject.h	/^#define thvalue(/;"	d
tinsert	src/ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
tmname	src/lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State	access:public
tmudata	src/lstate.h	/^  GCObject *tmudata;  \/* last element of list of userdata to be GC *\/$/;"	m	struct:global_State	access:public
tofile	src/liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
tofilep	src/liolib.c	/^#define tofilep(/;"	d	file:
token	src/llex.h	/^  int token;$/;"	m	struct:Token	access:public
tonumber	src/lvm.h	/^#define tonumber(/;"	d
top	src/lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo	access:public
top	src/lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State	access:public
toproto	src/luac.c	/^#define toproto(/;"	d	file:
tostate	src/lstate.c	/^#define tostate(/;"	d	file:
tostore	src/lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:	access:public
tostring	src/lvm.h	/^#define tostring(/;"	d
totalbytes	src/lstate.h	/^  lu_mem totalbytes;  \/* number of bytes currently allocated *\/$/;"	m	struct:global_State	access:public
traceback	src/lua.c	/^static int traceback (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
traceexec	src/lvm.c	/^static void traceexec (lua_State *L, const Instruction *pc) {$/;"	f	file:	signature:(lua_State *L, const Instruction *pc)
traverseclosure	src/lgc.c	/^static void traverseclosure (global_State *g, Closure *cl) {$/;"	f	file:	signature:(global_State *g, Closure *cl)
traverseproto	src/lgc.c	/^static void traverseproto (global_State *g, Proto *f) {$/;"	f	file:	signature:(global_State *g, Proto *f)
traversestack	src/lgc.c	/^static void traversestack (global_State *g, lua_State *l) {$/;"	f	file:	signature:(global_State *g, lua_State *l)
traversetable	src/lgc.c	/^static int traversetable (global_State *g, Table *h) {$/;"	f	file:	signature:(global_State *g, Table *h)
treatstackoption	src/ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	file:	signature:(lua_State *L, lua_State *L1, const char *fname)
tremove	src/ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
trydecpoint	src/llex.c	/^static void trydecpoint (LexState *ls, SemInfo *seminfo) {$/;"	f	file:	signature:(LexState *ls, SemInfo *seminfo)
tryfuncTM	src/ldo.c	/^static StkId tryfuncTM (lua_State *L, StkId func) {$/;"	f	file:	signature:(lua_State *L, StkId func)
ts	src/llex.h	/^  TString *ts;$/;"	m	union:__anon2	access:public
ts	src/lstate.h	/^  union TString ts;$/;"	m	union:GCObject	typeref:union:GCObject::TString	access:public
tsv	src/lobject.h	/^  } tsv;$/;"	m	union:TString	typeref:struct:TString::__anon4	access:public
tsvalue	src/lobject.h	/^#define tsvalue(/;"	d
ttisboolean	src/lobject.h	/^#define ttisboolean(/;"	d
ttisfunction	src/lobject.h	/^#define ttisfunction(/;"	d
ttislightuserdata	src/lobject.h	/^#define ttislightuserdata(/;"	d
ttisnil	src/lobject.h	/^#define ttisnil(/;"	d
ttisnumber	src/lobject.h	/^#define ttisnumber(/;"	d
ttisstring	src/lobject.h	/^#define ttisstring(/;"	d
ttistable	src/lobject.h	/^#define ttistable(/;"	d
ttisthread	src/lobject.h	/^#define ttisthread(/;"	d
ttisuserdata	src/lobject.h	/^#define ttisuserdata(/;"	d
ttype	src/lobject.h	/^#define ttype(/;"	d
tvk	src/lobject.h	/^  TValue tvk;$/;"	m	union:TKey	access:public
twoto	src/lobject.h	/^#define twoto(/;"	d
txtToken	src/llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	file:	signature:(LexState *ls, int token)
u	src/lobject.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon6	access:public
u	src/lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon12	access:public
u	src/lstate.h	/^  union Udata u;$/;"	m	union:GCObject	typeref:union:GCObject::Udata	access:public
uchar	src/lstrlib.c	/^#define uchar(/;"	d	file:
ud	src/lapi.c	/^  void *ud;$/;"	m	struct:CCallS	file:	access:public
ud	src/lstate.h	/^  void *ud;         \/* auxiliary data to `frealloc' *\/$/;"	m	struct:global_State	access:public
unbound_search	src/ltable.c	/^static int unbound_search (Table *t, unsigned int j) {$/;"	f	file:	signature:(Table *t, unsigned int j)
unlinkupval	src/lfunc.c	/^static void unlinkupval (UpVal *uv) {$/;"	f	file:	signature:(UpVal *uv)
unmakemask	src/ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	file:	signature:(int mask, char *smask)
upval	src/lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:	access:public
upvaldesc	src/lparser.h	/^typedef struct upvaldesc {$/;"	s
upvaldesc	src/lparser.h	/^} upvaldesc;$/;"	t	typeref:struct:upvaldesc
upvaldesc::info	src/lparser.h	/^  lu_byte info;$/;"	m	struct:upvaldesc	access:public
upvaldesc::k	src/lparser.h	/^  lu_byte k;$/;"	m	struct:upvaldesc	access:public
upvals	src/lobject.h	/^  UpVal *upvals[1];$/;"	m	struct:LClosure	access:public
upvalue	src/lobject.h	/^  TValue upvalue[1];$/;"	m	struct:CClosure	access:public
upvalues	src/lobject.h	/^  TString **upvalues;  \/* upvalue names *\/$/;"	m	struct:Proto	access:public
upvalues	src/lparser.h	/^  upvaldesc upvalues[LUAI_MAXUPVALUES];  \/* upvalues *\/$/;"	m	struct:FuncState	access:public
usage	src/luac.c	/^static void usage(const char* message)$/;"	f	file:	signature:(const char* message)
uv	src/lobject.h	/^  } uv;$/;"	m	union:Udata	typeref:struct:Udata::__anon5	access:public
uv	src/lstate.h	/^  struct UpVal uv;$/;"	m	union:GCObject	typeref:struct:GCObject::UpVal	access:public
uvalue	src/lobject.h	/^#define uvalue(/;"	d
uvhead	src/lstate.h	/^  UpVal uvhead;  \/* head of double-linked list of all open upvalues *\/$/;"	m	struct:global_State	access:public
v	src/lobject.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal	access:public
v	src/lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:	access:public
v	src/lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:	access:public
valiswhite	src/lgc.h	/^#define valiswhite(/;"	d
value	src/lobject.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon6	access:public
varname	src/lobject.h	/^  TString *varname;$/;"	m	struct:LocVar	access:public
weak	src/lstate.h	/^  GCObject *weak;  \/* list of weak tables (to be cleared) *\/$/;"	m	struct:global_State	access:public
what	src/lua.h	/^  const char *what;	\/* (S) `Lua', `C', `main', `tail' *\/$/;"	m	struct:lua_Debug	access:public
whilestat	src/lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	file:	signature:(LexState *ls, int line)
white2gray	src/lgc.c	/^#define white2gray(/;"	d	file:
writer	src/ldump.c	/^ lua_Writer writer;$/;"	m	struct:__anon1	file:	access:public
writer	src/lstrlib.c	/^static int writer (lua_State *L, const void* b, size_t size, void* B) {$/;"	f	file:	signature:(lua_State *L, const void* b, size_t size, void* B)
writer	src/luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	file:	signature:(lua_State* L, const void* p, size_t size, void* u)
yindex	src/lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	file:	signature:(LexState *ls, expdesc *v)
z	src/ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	file:	access:public
z	src/llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState	access:public
zgetc	src/lzio.h	/^#define zgetc(/;"	d
