!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AI_ADDRCONFIG	.\src\tcp_address.cpp	44;"	d	file:
AI_NUMERICSERV	.\src\windows.hpp	179;"	d
EADDRINUSE	.\include\zmq.h	95;"	d
EADDRNOTAVAIL	.\include\zmq.h	98;"	d
EAFNOSUPPORT	.\include\zmq.h	113;"	d
ECONNABORTED	.\include\zmq.h	119;"	d
ECONNREFUSED	.\include\zmq.h	101;"	d
ECONNRESET	.\include\zmq.h	122;"	d
EFSM	.\include\zmq.h	138;"	d
EHOSTUNREACH	.\include\zmq.h	131;"	d
EINPROGRESS	.\include\zmq.h	104;"	d
EMSGSIZE	.\include\zmq.h	110;"	d
EMTHREAD	.\include\zmq.h	141;"	d
ENETDOWN	.\include\zmq.h	92;"	d
ENETRESET	.\include\zmq.h	134;"	d
ENETUNREACH	.\include\zmq.h	116;"	d
ENOBUFS	.\include\zmq.h	89;"	d
ENOCOMPATPROTO	.\include\zmq.h	139;"	d
ENOTCONN	.\include\zmq.h	125;"	d
ENOTSOCK	.\include\zmq.h	107;"	d
ENOTSUP	.\include\zmq.h	83;"	d
EPROTONOSUPPORT	.\include\zmq.h	86;"	d
ETERM	.\include\zmq.h	140;"	d
ETIMEDOUT	.\include\zmq.h	128;"	d
MSG_ERRQUEUE	.\src\pgm_socket.cpp	47;"	d	file:
NOATOM	.\src\windows.hpp	71;"	d
NOCLIPBOARD	.\src\windows.hpp	74;"	d
NOCOLOR	.\src\windows.hpp	77;"	d
NOCOMM	.\src\windows.hpp	134;"	d
NOCTLMGR	.\src\windows.hpp	80;"	d
NODEFERWINDOWPOS	.\src\windows.hpp	146;"	d
NODRAWTEXT	.\src\windows.hpp	83;"	d
NOGDI	.\src\windows.hpp	86;"	d
NOGDICAPMASKS	.\src\windows.hpp	35;"	d
NOHELP	.\src\windows.hpp	140;"	d
NOICONS	.\src\windows.hpp	53;"	d
NOKANJI	.\src\windows.hpp	137;"	d
NOKERNEL	.\src\windows.hpp	89;"	d
NOKEYSTATES	.\src\windows.hpp	56;"	d
NOMB	.\src\windows.hpp	98;"	d
NOMCX	.\src\windows.hpp	149;"	d
NOMEMMGR	.\src\windows.hpp	101;"	d
NOMENUS	.\src\windows.hpp	50;"	d
NOMETAFILE	.\src\windows.hpp	104;"	d
NOMINMAX	.\src\encoder.hpp	27;"	d
NOMINMAX	.\src\windows.hpp	107;"	d
NOMSG	.\src\windows.hpp	110;"	d
NONLS	.\src\windows.hpp	95;"	d
NOOPENFILE	.\src\windows.hpp	113;"	d
NOPROFILER	.\src\windows.hpp	143;"	d
NORASTEROPS	.\src\windows.hpp	62;"	d
NOSCROLL	.\src\windows.hpp	116;"	d
NOSERVICE	.\src\windows.hpp	119;"	d
NOSHOWWINDOW	.\src\windows.hpp	65;"	d
NOSOUND	.\src\windows.hpp	122;"	d
NOSYSCOMMANDS	.\src\windows.hpp	59;"	d
NOSYSMETRICS	.\src\windows.hpp	47;"	d
NOTEXTMETRIC	.\src\windows.hpp	125;"	d
NOUSER	.\src\windows.hpp	92;"	d
NOVIRTUALKEYCODES	.\src\windows.hpp	38;"	d
NOWH	.\src\windows.hpp	128;"	d
NOWINMESSAGES	.\src\windows.hpp	41;"	d
NOWINOFFSETS	.\src\windows.hpp	131;"	d
NOWINSTYLES	.\src\windows.hpp	44;"	d
OEMRESOURCE	.\src\windows.hpp	68;"	d
WIN32_LEAN_AND_MEAN	.\src\windows.hpp	32;"	d
ZMQ_AFFINITY	.\include\zmq.h	221;"	d
ZMQ_ATOMIC_COUNTER_ARM	.\src\atomic_counter.hpp	190;"	d
ZMQ_ATOMIC_COUNTER_ARM	.\src\atomic_counter.hpp	33;"	d
ZMQ_ATOMIC_COUNTER_ATOMIC_H	.\src\atomic_counter.hpp	184;"	d
ZMQ_ATOMIC_COUNTER_ATOMIC_H	.\src\atomic_counter.hpp	37;"	d
ZMQ_ATOMIC_COUNTER_MUTEX	.\src\atomic_counter.hpp	193;"	d
ZMQ_ATOMIC_COUNTER_MUTEX	.\src\atomic_counter.hpp	29;"	d
ZMQ_ATOMIC_COUNTER_MUTEX	.\src\atomic_counter.hpp	39;"	d
ZMQ_ATOMIC_COUNTER_WINDOWS	.\src\atomic_counter.hpp	181;"	d
ZMQ_ATOMIC_COUNTER_WINDOWS	.\src\atomic_counter.hpp	35;"	d
ZMQ_ATOMIC_COUNTER_X86	.\src\atomic_counter.hpp	187;"	d
ZMQ_ATOMIC_COUNTER_X86	.\src\atomic_counter.hpp	31;"	d
ZMQ_ATOMIC_PTR_ARM	.\src\atomic_ptr.hpp	189;"	d
ZMQ_ATOMIC_PTR_ARM	.\src\atomic_ptr.hpp	32;"	d
ZMQ_ATOMIC_PTR_ATOMIC_H	.\src\atomic_ptr.hpp	183;"	d
ZMQ_ATOMIC_PTR_ATOMIC_H	.\src\atomic_ptr.hpp	36;"	d
ZMQ_ATOMIC_PTR_MUTEX	.\src\atomic_ptr.hpp	192;"	d
ZMQ_ATOMIC_PTR_MUTEX	.\src\atomic_ptr.hpp	28;"	d
ZMQ_ATOMIC_PTR_MUTEX	.\src\atomic_ptr.hpp	38;"	d
ZMQ_ATOMIC_PTR_WINDOWS	.\src\atomic_ptr.hpp	180;"	d
ZMQ_ATOMIC_PTR_WINDOWS	.\src\atomic_ptr.hpp	34;"	d
ZMQ_ATOMIC_PTR_X86	.\src\atomic_ptr.hpp	186;"	d
ZMQ_ATOMIC_PTR_X86	.\src\atomic_ptr.hpp	30;"	d
ZMQ_BACKLOG	.\include\zmq.h	235;"	d
ZMQ_DEALER	.\include\zmq.h	209;"	d
ZMQ_DELAY_ATTACH_ON_CONNECT	.\include\zmq.h	251;"	d
ZMQ_DONTWAIT	.\include\zmq.h	259;"	d
ZMQ_EVENTS	.\include\zmq.h	231;"	d
ZMQ_EVENT_ACCEPTED	.\include\zmq.h	279;"	d
ZMQ_EVENT_ACCEPT_FAILED	.\include\zmq.h	280;"	d
ZMQ_EVENT_ALL	.\include\zmq.h	286;"	d
ZMQ_EVENT_BIND_FAILED	.\include\zmq.h	277;"	d
ZMQ_EVENT_CLOSED	.\include\zmq.h	282;"	d
ZMQ_EVENT_CLOSE_FAILED	.\include\zmq.h	283;"	d
ZMQ_EVENT_CONNECTED	.\include\zmq.h	272;"	d
ZMQ_EVENT_CONNECT_DELAYED	.\include\zmq.h	273;"	d
ZMQ_EVENT_CONNECT_RETRIED	.\include\zmq.h	274;"	d
ZMQ_EVENT_DISCONNECTED	.\include\zmq.h	284;"	d
ZMQ_EVENT_LISTENING	.\include\zmq.h	276;"	d
ZMQ_EXPORT	.\include\zmq.h	395;"	d
ZMQ_EXPORT	.\include\zmq.h	42;"	d
ZMQ_EXPORT	.\include\zmq.h	44;"	d
ZMQ_EXPORT	.\include\zmq.h	48;"	d
ZMQ_EXPORT	.\include\zmq.h	50;"	d
ZMQ_EXPORT	.\include\zmq.h	52;"	d
ZMQ_EXPORT	.\include\zmq_utils.h	31;"	d
ZMQ_EXPORT	.\include\zmq_utils.h	33;"	d
ZMQ_EXPORT	.\include\zmq_utils.h	37;"	d
ZMQ_EXPORT	.\include\zmq_utils.h	39;"	d
ZMQ_EXPORT	.\include\zmq_utils.h	41;"	d
ZMQ_EXPORT	.\include\zmq_utils.h	58;"	d
ZMQ_FAIL_UNROUTABLE	.\include\zmq.h	264;"	d
ZMQ_FD	.\include\zmq.h	230;"	d
ZMQ_FORWARDER	.\include\zmq.h	390;"	d
ZMQ_HAUSNUMERO	.\include\zmq.h	79;"	d
ZMQ_IDENTITY	.\include\zmq.h	222;"	d
ZMQ_IO_THREADS	.\include\zmq.h	158;"	d
ZMQ_IO_THREADS_DFLT	.\include\zmq.h	162;"	d
ZMQ_IPV4ONLY	.\include\zmq.h	243;"	d
ZMQ_LAST_ENDPOINT	.\include\zmq.h	244;"	d
ZMQ_LINGER	.\include\zmq.h	233;"	d
ZMQ_MAKE_VERSION	.\include\zmq.h	65;"	d
ZMQ_MAXMSGSIZE	.\include\zmq.h	237;"	d
ZMQ_MAX_SOCKETS	.\include\zmq.h	159;"	d
ZMQ_MAX_SOCKETS_DFLT	.\include\zmq.h	163;"	d
ZMQ_MORE	.\include\zmq.h	256;"	d
ZMQ_MULTICAST_HOPS	.\include\zmq.h	240;"	d
ZMQ_NOBLOCK	.\include\zmq.h	263;"	d
ZMQ_PAIR	.\include\zmq.h	204;"	d
ZMQ_POLLERR	.\include\zmq.h	368;"	d
ZMQ_POLLIN	.\include\zmq.h	366;"	d
ZMQ_POLLOUT	.\include\zmq.h	367;"	d
ZMQ_POLL_BASED_ON_POLL	.\src\proxy.cpp	29;"	d	file:
ZMQ_POLL_BASED_ON_POLL	.\src\proxy.cpp	35;"	d	file:
ZMQ_POLL_BASED_ON_POLL	.\src\zmq.cpp	28;"	d	file:
ZMQ_POLL_BASED_ON_POLL	.\src\zmq.cpp	34;"	d	file:
ZMQ_POLL_BASED_ON_POLL	.\src\zmq.cpp	964;"	d	file:
ZMQ_POLL_BASED_ON_SELECT	.\src\proxy.cpp	27;"	d	file:
ZMQ_POLL_BASED_ON_SELECT	.\src\proxy.cpp	38;"	d	file:
ZMQ_POLL_BASED_ON_SELECT	.\src\zmq.cpp	26;"	d	file:
ZMQ_POLL_BASED_ON_SELECT	.\src\zmq.cpp	37;"	d	file:
ZMQ_POLL_BASED_ON_SELECT	.\src\zmq.cpp	961;"	d	file:
ZMQ_PUB	.\include\zmq.h	205;"	d
ZMQ_PULL	.\include\zmq.h	211;"	d
ZMQ_PUSH	.\include\zmq.h	212;"	d
ZMQ_QUEUE	.\include\zmq.h	391;"	d
ZMQ_RATE	.\include\zmq.h	225;"	d
ZMQ_RCVBUF	.\include\zmq.h	228;"	d
ZMQ_RCVHWM	.\include\zmq.h	239;"	d
ZMQ_RCVMORE	.\include\zmq.h	229;"	d
ZMQ_RCVTIMEO	.\include\zmq.h	241;"	d
ZMQ_RECONNECT_IVL	.\include\zmq.h	234;"	d
ZMQ_RECONNECT_IVL_MAX	.\include\zmq.h	236;"	d
ZMQ_RECOVERY_IVL	.\include\zmq.h	226;"	d
ZMQ_REP	.\include\zmq.h	208;"	d
ZMQ_REQ	.\include\zmq.h	207;"	d
ZMQ_ROUTER	.\include\zmq.h	210;"	d
ZMQ_ROUTER_BEHAVIOR	.\include\zmq.h	265;"	d
ZMQ_ROUTER_MANDATORY	.\include\zmq.h	245;"	d
ZMQ_SIGNALER_WAIT_BASED_ON_POLL	.\src\signaler.cpp	26;"	d	file:
ZMQ_SIGNALER_WAIT_BASED_ON_POLL	.\src\signaler.cpp	32;"	d	file:
ZMQ_SIGNALER_WAIT_BASED_ON_POLL	.\src\signaler.cpp	434;"	d	file:
ZMQ_SIGNALER_WAIT_BASED_ON_SELECT	.\src\signaler.cpp	24;"	d	file:
ZMQ_SIGNALER_WAIT_BASED_ON_SELECT	.\src\signaler.cpp	35;"	d	file:
ZMQ_SIGNALER_WAIT_BASED_ON_SELECT	.\src\signaler.cpp	431;"	d	file:
ZMQ_SNDBUF	.\include\zmq.h	227;"	d
ZMQ_SNDHWM	.\include\zmq.h	238;"	d
ZMQ_SNDMORE	.\include\zmq.h	260;"	d
ZMQ_SNDTIMEO	.\include\zmq.h	242;"	d
ZMQ_STREAMER	.\include\zmq.h	389;"	d
ZMQ_SUB	.\include\zmq.h	206;"	d
ZMQ_SUBSCRIBE	.\include\zmq.h	223;"	d
ZMQ_TCP_ACCEPT_FILTER	.\include\zmq.h	250;"	d
ZMQ_TCP_KEEPALIVE	.\include\zmq.h	246;"	d
ZMQ_TCP_KEEPALIVE_CNT	.\include\zmq.h	247;"	d
ZMQ_TCP_KEEPALIVE_IDLE	.\include\zmq.h	248;"	d
ZMQ_TCP_KEEPALIVE_INTVL	.\include\zmq.h	249;"	d
ZMQ_TYPE	.\include\zmq.h	232;"	d
ZMQ_TYPE_UNSAFE	.\src\zmq.cpp	21;"	d	file:
ZMQ_UNSUBSCRIBE	.\include\zmq.h	224;"	d
ZMQ_USE_DEVPOLL	.\src\poller.hpp	37;"	d
ZMQ_USE_DEVPOLL	.\src\poller.hpp	58;"	d
ZMQ_USE_DEVPOLL	.\src\poller.hpp	70;"	d
ZMQ_USE_EPOLL	.\src\poller.hpp	34;"	d
ZMQ_USE_EPOLL	.\src\poller.hpp	43;"	d
ZMQ_USE_KQUEUE	.\src\poller.hpp	40;"	d
ZMQ_USE_KQUEUE	.\src\poller.hpp	49;"	d
ZMQ_USE_KQUEUE	.\src\poller.hpp	52;"	d
ZMQ_USE_KQUEUE	.\src\poller.hpp	55;"	d
ZMQ_USE_KQUEUE	.\src\poller.hpp	61;"	d
ZMQ_USE_POLL	.\src\poller.hpp	31;"	d
ZMQ_USE_POLL	.\src\poller.hpp	64;"	d
ZMQ_USE_POLL	.\src\poller.hpp	67;"	d
ZMQ_USE_SELECT	.\src\poller.hpp	28;"	d
ZMQ_USE_SELECT	.\src\poller.hpp	46;"	d
ZMQ_USE_SELECT	.\src\poller.hpp	73;"	d
ZMQ_USE_SELECT	.\src\poller.hpp	76;"	d
ZMQ_VERSION	.\include\zmq.h	67;"	d
ZMQ_VERSION_MAJOR	.\include\zmq.h	61;"	d
ZMQ_VERSION_MINOR	.\include\zmq.h	62;"	d
ZMQ_VERSION_PATCH	.\include\zmq.h	63;"	d
ZMQ_XPUB	.\include\zmq.h	213;"	d
ZMQ_XPUB_VERBOSE	.\include\zmq.h	252;"	d
ZMQ_XREP	.\include\zmq.h	218;"	d
ZMQ_XREQ	.\include\zmq.h	217;"	d
ZMQ_XSUB	.\include\zmq.h	214;"	d
_	.\include\zmq.h	/^typedef struct zmq_msg_t {unsigned char _ [32];} zmq_msg_t;$/;"	m	struct:zmq_msg_t	access:public
_CRT_SECURE_NO_WARNINGS	.\src\windows.hpp	29;"	d
_WIN32_WINNT	.\src\windows.hpp	154;"	d
_WIN32_WINNT	.\src\windows.hpp	163;"	d
_WIN32_WINNT	.\src\windows.hpp	164;"	d
__IPC_CONNECTER_HPP_INCLUDED__	.\src\ipc_connecter.hpp	22;"	d
__PGM_SOCKET_HPP_INCLUDED__	.\src\pgm_socket.hpp	24;"	d
__PGM_WININT_H__	.\src\pgm_socket.hpp	32;"	d
__PGM_WININT_H__	.\src\zmq.cpp	89;"	d	file:
__TCP_CONNECTER_HPP_INCLUDED__	.\src\tcp_connecter.hpp	23;"	d
__ZMQ_ADDRESS_HPP_INCLUDED__	.\src\address.hpp	22;"	d
__ZMQ_ARRAY_INCLUDED__	.\src\array.hpp	23;"	d
__ZMQ_ATOMIC_COUNTER_HPP_INCLUDED__	.\src\atomic_counter.hpp	23;"	d
__ZMQ_ATOMIC_PTR_HPP_INCLUDED__	.\src\atomic_ptr.hpp	23;"	d
__ZMQ_BLOB_HPP_INCLUDED__	.\src\blob.hpp	22;"	d
__ZMQ_CLOCK_HPP_INCLUDED__	.\src\clock.hpp	22;"	d
__ZMQ_COMMAND_HPP_INCLUDED__	.\src\command.hpp	23;"	d
__ZMQ_CONFIG_HPP_INCLUDED__	.\src\config.hpp	23;"	d
__ZMQ_CTX_HPP_INCLUDED__	.\src\ctx.hpp	23;"	d
__ZMQ_DEALER_HPP_INCLUDED__	.\src\dealer.hpp	22;"	d
__ZMQ_DECODER_HPP_INCLUDED__	.\src\decoder.hpp	23;"	d
__ZMQ_DEVPOLL_HPP_INCLUDED__	.\src\devpoll.hpp	23;"	d
__ZMQ_DIST_HPP_INCLUDED__	.\src\dist.hpp	22;"	d
__ZMQ_ENCODER_HPP_INCLUDED__	.\src\encoder.hpp	23;"	d
__ZMQ_EPOLL_HPP_INCLUDED__	.\src\epoll.hpp	23;"	d
__ZMQ_ERR_HPP_INCLUDED__	.\src\err.hpp	23;"	d
__ZMQ_FD_HPP_INCLUDED__	.\src\fd.hpp	22;"	d
__ZMQ_FQ_HPP_INCLUDED__	.\src\fq.hpp	23;"	d
__ZMQ_H_INCLUDED__	.\include\zmq.h	24;"	d
__ZMQ_IO_OBJECT_HPP_INCLUDED__	.\src\io_object.hpp	23;"	d
__ZMQ_IO_THREAD_HPP_INCLUDED__	.\src\io_thread.hpp	23;"	d
__ZMQ_IPC_ADDRESS_HPP_INCLUDED__	.\src\ipc_address.hpp	22;"	d
__ZMQ_IPC_LISTENER_HPP_INCLUDED__	.\src\ipc_listener.hpp	22;"	d
__ZMQ_IP_HPP_INCLUDED__	.\src\ip.hpp	23;"	d
__ZMQ_I_DECODER_HPP_INCLUDED__	.\src\i_decoder.hpp	22;"	d
__ZMQ_I_ENCODER_HPP_INCLUDED__	.\src\i_encoder.hpp	22;"	d
__ZMQ_I_ENGINE_HPP_INCLUDED__	.\src\i_engine.hpp	23;"	d
__ZMQ_I_MSG_SINK_HPP_INCLUDED__	.\src\i_msg_sink.hpp	22;"	d
__ZMQ_I_MSG_SOURCE_HPP_INCLUDED__	.\src\i_msg_source.hpp	22;"	d
__ZMQ_I_POLL_EVENTS_HPP_INCLUDED__	.\src\i_poll_events.hpp	23;"	d
__ZMQ_KQUEUE_HPP_INCLUDED__	.\src\kqueue.hpp	23;"	d
__ZMQ_LB_HPP_INCLUDED__	.\src\lb.hpp	23;"	d
__ZMQ_LIKELY_HPP_INCLUDED__	.\src\likely.hpp	22;"	d
__ZMQ_MAILBOX_HPP_INCLUDED__	.\src\mailbox.hpp	23;"	d
__ZMQ_MSG_HPP_INCLUDE__	.\src\msg.hpp	24;"	d
__ZMQ_MTRIE_HPP_INCLUDED__	.\src\mtrie.hpp	23;"	d
__ZMQ_MUTEX_HPP_INCLUDED__	.\src\mutex.hpp	23;"	d
__ZMQ_OBJECT_HPP_INCLUDED__	.\src\object.hpp	23;"	d
__ZMQ_OPTIONS_HPP_INCLUDED__	.\src\options.hpp	24;"	d
__ZMQ_OWN_HPP_INCLUDED__	.\src\own.hpp	22;"	d
__ZMQ_PAIR_HPP_INCLUDED__	.\src\pair.hpp	23;"	d
__ZMQ_PGM_RECEIVER_HPP_INCLUDED__	.\src\pgm_receiver.hpp	24;"	d
__ZMQ_PGM_SENDER_HPP_INCLUDED__	.\src\pgm_sender.hpp	24;"	d
__ZMQ_PIPE_HPP_INCLUDED__	.\src\pipe.hpp	24;"	d
__ZMQ_POLLER_BASE_HPP_INCLUDED__	.\src\poller_base.hpp	22;"	d
__ZMQ_POLLER_HPP_INCLUDED__	.\src\poller.hpp	23;"	d
__ZMQ_POLL_HPP_INCLUDED__	.\src\poll.hpp	23;"	d
__ZMQ_PRECOMPILED_HPP_INCLUDED__	.\src\precompiled.hpp	22;"	d
__ZMQ_PROXY_HPP_INCLUDED__	.\src\proxy.hpp	22;"	d
__ZMQ_PUB_HPP_INCLUDED__	.\src\pub.hpp	23;"	d
__ZMQ_PULL_HPP_INCLUDED__	.\src\pull.hpp	23;"	d
__ZMQ_PUSH_HPP_INCLUDED__	.\src\push.hpp	23;"	d
__ZMQ_RANDOM_HPP_INCLUDED__	.\src\random.hpp	22;"	d
__ZMQ_REAPER_HPP_INCLUDED__	.\src\reaper.hpp	22;"	d
__ZMQ_REP_HPP_INCLUDED__	.\src\rep.hpp	23;"	d
__ZMQ_REQ_HPP_INCLUDED__	.\src\req.hpp	24;"	d
__ZMQ_ROUTER_HPP_INCLUDED__	.\src\router.hpp	24;"	d
__ZMQ_SELECT_HPP_INCLUDED__	.\src\select.hpp	23;"	d
__ZMQ_SESSION_BASE_HPP_INCLUDED__	.\src\session_base.hpp	24;"	d
__ZMQ_SIGNALER_HPP_INCLUDED__	.\src\signaler.hpp	22;"	d
__ZMQ_SOCKET_BASE_HPP_INCLUDED__	.\src\socket_base.hpp	24;"	d
__ZMQ_STDINT_HPP_INCLUDED__	.\src\stdint.hpp	22;"	d
__ZMQ_STREAM_ENGINE_HPP_INCLUDED__	.\src\stream_engine.hpp	23;"	d
__ZMQ_SUB_HPP_INCLUDED__	.\src\sub.hpp	23;"	d
__ZMQ_TCP_ADDRESS_HPP_INCLUDED__	.\src\tcp_address.hpp	23;"	d
__ZMQ_TCP_HPP_INCLUDED__	.\src\tcp.hpp	23;"	d
__ZMQ_TCP_LISTENER_HPP_INCLUDED__	.\src\tcp_listener.hpp	23;"	d
__ZMQ_THREAD_HPP_INCLUDED__	.\src\thread.hpp	23;"	d
__ZMQ_TRIE_HPP_INCLUDED__	.\src\trie.hpp	24;"	d
__ZMQ_UTILS_H_INCLUDED__	.\include\zmq_utils.h	22;"	d
__ZMQ_V1_DECODER_HPP_INCLUDED__	.\src\v1_decoder.hpp	23;"	d
__ZMQ_V1_ENCODER_HPP_INCLUDED__	.\src\v1_encoder.hpp	23;"	d
__ZMQ_V1_PROTOCOL_HPP_INCLUDED__	.\src\v1_protocol.hpp	22;"	d
__ZMQ_WINDOWS_HPP_INCLUDED__	.\src\windows.hpp	23;"	d
__ZMQ_WIRE_HPP_INCLUDED__	.\src\wire.hpp	22;"	d
__ZMQ_XPUB_HPP_INCLUDED__	.\src\xpub.hpp	22;"	d
__ZMQ_XSUB_HPP_INCLUDED__	.\src\xsub.hpp	22;"	d
__ZMQ_YPIPE_HPP_INCLUDED__	.\src\ypipe.hpp	23;"	d
__ZMQ_YQUEUE_HPP_INCLUDED__	.\src\yqueue.hpp	23;"	d
__anon13::events	.\include\zmq.h	/^    short events;$/;"	m	struct:__anon13	access:public
__anon13::fd	.\include\zmq.h	/^    SOCKET fd;$/;"	m	struct:__anon13	access:public
__anon13::fd	.\include\zmq.h	/^    int fd;$/;"	m	struct:__anon13	access:public
__anon13::revents	.\include\zmq.h	/^    short revents;$/;"	m	struct:__anon13	access:public
__anon13::socket	.\include\zmq.h	/^    void *socket;$/;"	m	struct:__anon13	access:public
__anon1::__anon2::__anon10::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon10	access:public
__anon1::__anon2::__anon10::fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon10	access:public
__anon1::__anon2::__anon11::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon11	access:public
__anon1::__anon2::__anon11::err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon11	access:public
__anon1::__anon2::__anon12::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon12	access:public
__anon1::__anon2::__anon12::fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon12	access:public
__anon1::__anon2::__anon3::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon3	access:public
__anon1::__anon2::__anon3::fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon3	access:public
__anon1::__anon2::__anon4::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon4	access:public
__anon1::__anon2::__anon4::err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon4	access:public
__anon1::__anon2::__anon5::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon5	access:public
__anon1::__anon2::__anon5::interval	.\include\zmq.h	/^        int interval;$/;"	m	struct:__anon1::__anon2::__anon5	access:public
__anon1::__anon2::__anon6::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon6	access:public
__anon1::__anon2::__anon6::fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon6	access:public
__anon1::__anon2::__anon7::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon7	access:public
__anon1::__anon2::__anon7::err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon7	access:public
__anon1::__anon2::__anon8::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon8	access:public
__anon1::__anon2::__anon8::fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon8	access:public
__anon1::__anon2::__anon9::addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon9	access:public
__anon1::__anon2::__anon9::err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon9	access:public
__anon1::__anon2::accept_failed	.\include\zmq.h	/^    } accept_failed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon9	access:public
__anon1::__anon2::accepted	.\include\zmq.h	/^    } accepted;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon8	access:public
__anon1::__anon2::bind_failed	.\include\zmq.h	/^    } bind_failed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon7	access:public
__anon1::__anon2::close_failed	.\include\zmq.h	/^    } close_failed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon11	access:public
__anon1::__anon2::closed	.\include\zmq.h	/^    } closed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon10	access:public
__anon1::__anon2::connect_delayed	.\include\zmq.h	/^    } connect_delayed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon4	access:public
__anon1::__anon2::connect_retried	.\include\zmq.h	/^    } connect_retried;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon5	access:public
__anon1::__anon2::connected	.\include\zmq.h	/^    } connected;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon3	access:public
__anon1::__anon2::disconnected	.\include\zmq.h	/^    } disconnected;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon12	access:public
__anon1::__anon2::listening	.\include\zmq.h	/^    } listening;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon6	access:public
__anon1::data	.\include\zmq.h	/^    } data;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2	access:public
__anon1::event	.\include\zmq.h	/^    int event;$/;"	m	struct:__anon1	access:public
accept	.\src\ipc_listener.cpp	/^zmq::fd_t zmq::ipc_listener_t::accept ()$/;"	f	class:zmq::ipc_listener_t	signature:()
accept	.\src\ipc_listener.hpp	/^        fd_t accept ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
accept	.\src\tcp_listener.cpp	/^zmq::fd_t zmq::tcp_listener_t::accept ()$/;"	f	class:zmq::tcp_listener_t	signature:()
accept	.\src\tcp_listener.hpp	/^        fd_t accept ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
accept_failed	.\include\zmq.h	/^    } accept_failed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon9	access:public
accepted	.\include\zmq.h	/^    } accepted;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon8	access:public
accepted	.\src\devpoll.hpp	/^            bool accepted;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
activate_in	.\src\i_engine.hpp	/^        virtual void activate_in () = 0;$/;"	p	struct:zmq::i_engine	access:public	signature:()
activate_in	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::activate_in ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
activate_in	.\src\pgm_receiver.hpp	/^        void activate_in ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
activate_in	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::activate_in ()$/;"	f	class:zmq::pgm_sender_t	signature:()
activate_in	.\src\pgm_sender.hpp	/^        void activate_in ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
activate_in	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::activate_in ()$/;"	f	class:zmq::stream_engine_t	signature:()
activate_in	.\src\stream_engine.hpp	/^        void activate_in ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
activate_out	.\src\i_engine.hpp	/^        virtual void activate_out () = 0;$/;"	p	struct:zmq::i_engine	access:public	signature:()
activate_out	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::activate_out ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
activate_out	.\src\pgm_receiver.hpp	/^        void activate_out ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
activate_out	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::activate_out ()$/;"	f	class:zmq::pgm_sender_t	signature:()
activate_out	.\src\pgm_sender.hpp	/^        void activate_out ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
activate_out	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::activate_out ()$/;"	f	class:zmq::stream_engine_t	signature:()
activate_out	.\src\stream_engine.hpp	/^        void activate_out ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
activate_read	.\src\command.hpp	/^            activate_read,$/;"	e	enum:zmq::command_t::type_t
activate_read	.\src\command.hpp	/^            } activate_read;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon21	access:public
activate_write	.\src\command.hpp	/^            activate_write,$/;"	e	enum:zmq::command_t::type_t
activate_write	.\src\command.hpp	/^            } activate_write;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon22	access:public
activated	.\src\dist.cpp	/^void zmq::dist_t::activated (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
activated	.\src\dist.hpp	/^        void activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
activated	.\src\fq.cpp	/^void zmq::fq_t::activated (pipe_t *pipe_)$/;"	f	class:zmq::fq_t	signature:(pipe_t *pipe_)
activated	.\src\fq.hpp	/^        void activated (pipe_t *pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(pipe_t *pipe_)
activated	.\src\lb.cpp	/^void zmq::lb_t::activated (pipe_t *pipe_)$/;"	f	class:zmq::lb_t	signature:(pipe_t *pipe_)
activated	.\src\lb.hpp	/^        void activated (pipe_t *pipe_);$/;"	p	class:zmq::lb_t	access:public	signature:(pipe_t *pipe_)
active	.\src\dist.hpp	/^        pipes_t::size_type active;$/;"	m	class:zmq::dist_t	access:private
active	.\src\fq.hpp	/^        pipes_t::size_type active;$/;"	m	class:zmq::fq_t	access:private
active	.\src\lb.hpp	/^        pipes_t::size_type active;$/;"	m	class:zmq::lb_t	access:private
active	.\src\mailbox.hpp	/^        bool active;$/;"	m	class:zmq::mailbox_t	access:private
active	.\src\pipe.hpp	/^            active,$/;"	e	enum:zmq::pipe_t::__anon46
active	.\src\router.hpp	/^            bool active;$/;"	m	struct:zmq::router_t::outpipe_t	access:public
add	.\src\atomic_counter.hpp	/^        inline integer_t add (integer_t increment_)$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t increment_)
add	.\src\mtrie.cpp	/^bool zmq::mtrie_t::add (unsigned char *prefix_, size_t size_, pipe_t *pipe_)$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
add	.\src\mtrie.hpp	/^        bool add (unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_);$/;"	p	class:zmq::mtrie_t	access:public	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
add	.\src\trie.cpp	/^bool zmq::trie_t::add (unsigned char *prefix_, size_t size_)$/;"	f	class:zmq::trie_t	signature:(unsigned char *prefix_, size_t size_)
add	.\src\trie.hpp	/^        bool add (unsigned char *prefix_, size_t size_);$/;"	p	class:zmq::trie_t	access:public	signature:(unsigned char *prefix_, size_t size_)
add_endpoint	.\src\socket_base.cpp	/^void zmq::socket_base_t::add_endpoint (const char *addr_, own_t *endpoint_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_, own_t *endpoint_)
add_endpoint	.\src\socket_base.hpp	/^        void add_endpoint (const char *addr_, own_t *endpoint_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const char *addr_, own_t *endpoint_)
add_fd	.\src\devpoll.cpp	/^zmq::devpoll_t::handle_t zmq::devpoll_t::add_fd (fd_t fd_,$/;"	f	class:zmq::devpoll_t	signature:(fd_t fd_, i_poll_events *reactor_)
add_fd	.\src\devpoll.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
add_fd	.\src\epoll.cpp	/^zmq::epoll_t::handle_t zmq::epoll_t::add_fd (fd_t fd_, i_poll_events *events_)$/;"	f	class:zmq::epoll_t	signature:(fd_t fd_, i_poll_events *events_)
add_fd	.\src\epoll.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::epoll_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
add_fd	.\src\io_object.cpp	/^zmq::io_object_t::handle_t zmq::io_object_t::add_fd (fd_t fd_)$/;"	f	class:zmq::io_object_t	signature:(fd_t fd_)
add_fd	.\src\io_object.hpp	/^        handle_t add_fd (fd_t fd_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(fd_t fd_)
add_fd	.\src\kqueue.cpp	/^zmq::kqueue_t::handle_t zmq::kqueue_t::add_fd (fd_t fd_,$/;"	f	class:zmq::kqueue_t	signature:(fd_t fd_, i_poll_events *reactor_)
add_fd	.\src\kqueue.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
add_fd	.\src\poll.cpp	/^zmq::poll_t::handle_t zmq::poll_t::add_fd (fd_t fd_, i_poll_events *events_)$/;"	f	class:zmq::poll_t	signature:(fd_t fd_, i_poll_events *events_)
add_fd	.\src\poll.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::poll_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
add_fd	.\src\select.cpp	/^zmq::select_t::handle_t zmq::select_t::add_fd (fd_t fd_, i_poll_events *events_)$/;"	f	class:zmq::select_t	signature:(fd_t fd_, i_poll_events *events_)
add_fd	.\src\select.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::select_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
add_helper	.\src\mtrie.cpp	/^bool zmq::mtrie_t::add_helper (unsigned char *prefix_, size_t size_,$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
add_helper	.\src\mtrie.hpp	/^        bool add_helper (unsigned char *prefix_, size_t size_,$/;"	p	class:zmq::mtrie_t	access:private	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
add_reconnect_timer	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::add_reconnect_timer()$/;"	f	class:zmq::ipc_connecter_t	signature:()
add_reconnect_timer	.\src\ipc_connecter.hpp	/^        void add_reconnect_timer();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
add_reconnect_timer	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::add_reconnect_timer()$/;"	f	class:zmq::tcp_connecter_t	signature:()
add_reconnect_timer	.\src\tcp_connecter.hpp	/^        void add_reconnect_timer();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
add_refs	.\src\msg.cpp	/^void zmq::msg_t::add_refs (int refs_)$/;"	f	class:zmq::msg_t	signature:(int refs_)
add_refs	.\src\msg.hpp	/^        void add_refs (int refs_);$/;"	p	class:zmq::msg_t	access:public	signature:(int refs_)
add_timer	.\src\io_object.cpp	/^void zmq::io_object_t::add_timer (int timeout_, int id_)$/;"	f	class:zmq::io_object_t	signature:(int timeout_, int id_)
add_timer	.\src\io_object.hpp	/^        void add_timer (int timout_, int id_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(int timout_, int id_)
add_timer	.\src\poller_base.cpp	/^void zmq::poller_base_t::add_timer (int timeout_, i_poll_events *sink_, int id_)$/;"	f	class:zmq::poller_base_t	signature:(int timeout_, i_poll_events *sink_, int id_)
add_timer	.\src\poller_base.hpp	/^        void add_timer (int timeout_, zmq::i_poll_events *sink_, int id_);$/;"	p	class:zmq::poller_base_t	access:public	signature:(int timeout_, zmq::i_poll_events *sink_, int id_)
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon10	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon11	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon12	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon3	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon4	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon5	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon6	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon7	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon8	access:public
addr	.\include\zmq.h	/^        char *addr;$/;"	m	struct:__anon1::__anon2::__anon9	access:public
addr	.\src\ipc_address.cpp	/^const sockaddr *zmq::ipc_address_t::addr () const$/;"	f	class:zmq::ipc_address_t	signature:() const
addr	.\src\ipc_address.hpp	/^        const sockaddr *addr () const;$/;"	p	class:zmq::ipc_address_t	access:public	signature:() const
addr	.\src\ipc_connecter.hpp	/^        const address_t *addr;$/;"	m	class:zmq::ipc_connecter_t	access:private
addr	.\src\session_base.hpp	/^        const address_t *addr;$/;"	m	class:zmq::session_base_t	access:private
addr	.\src\tcp_address.cpp	/^const sockaddr *zmq::tcp_address_t::addr () const$/;"	f	class:zmq::tcp_address_t	signature:() const
addr	.\src\tcp_address.hpp	/^        const sockaddr *addr () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
addr	.\src\tcp_connecter.hpp	/^        const address_t *addr;$/;"	m	class:zmq::tcp_connecter_t	access:private
address	.\src\address.hpp	/^        const std::string address;$/;"	m	struct:zmq::address_t	access:public
address	.\src\ipc_address.hpp	/^        struct sockaddr_un address;$/;"	m	class:zmq::ipc_address_t	typeref:struct:zmq::ipc_address_t::sockaddr_un	access:private
address	.\src\tcp_address.hpp	/^        } address;$/;"	m	class:zmq::tcp_address_t	typeref:union:zmq::tcp_address_t::__anon49	access:protected
address	.\src\tcp_listener.hpp	/^        tcp_address_t address;$/;"	m	class:zmq::tcp_listener_t	access:private
address_mask	.\src\tcp_address.hpp	/^        int address_mask;$/;"	m	class:zmq::tcp_address_mask_t	access:private
address_t	.\src\address.cpp	/^zmq::address_t::address_t ($/;"	f	class:zmq::address_t	signature:( const std::string &protocol_, const std::string &address_)
address_t	.\src\address.hpp	/^        address_t (const std::string &protocol_, const std::string &address_);$/;"	p	struct:zmq::address_t	access:public	signature:(const std::string &protocol_, const std::string &address_)
address_t	.\src\address.hpp	/^    struct address_t {$/;"	s	namespace:zmq
addrlen	.\src\ipc_address.cpp	/^socklen_t zmq::ipc_address_t::addrlen () const$/;"	f	class:zmq::ipc_address_t	signature:() const
addrlen	.\src\ipc_address.hpp	/^        socklen_t addrlen () const;$/;"	p	class:zmq::ipc_address_t	access:public	signature:() const
addrlen	.\src\tcp_address.cpp	/^socklen_t zmq::tcp_address_t::addrlen () const$/;"	f	class:zmq::tcp_address_t	signature:() const
addrlen	.\src\tcp_address.hpp	/^        socklen_t addrlen () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
adjust_load	.\src\poller_base.cpp	/^void zmq::poller_base_t::adjust_load (int amount_)$/;"	f	class:zmq::poller_base_t	signature:(int amount_)
adjust_load	.\src\poller_base.hpp	/^        void adjust_load (int amount_);$/;"	p	class:zmq::poller_base_t	access:protected	signature:(int amount_)
affinity	.\src\options.hpp	/^        uint64_t affinity;$/;"	m	struct:zmq::options_t	access:public
alloc_assert	.\src\err.hpp	144;"	d
anonymous_pipes	.\src\router.hpp	/^        std::set <pipe_t*> anonymous_pipes;$/;"	m	class:zmq::router_t	access:private
apply	.\src\trie.cpp	/^void zmq::trie_t::apply (void (*func_) (unsigned char *data_, size_t size_,$/;"	f	class:zmq::trie_t	signature:(void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
apply	.\src\trie.hpp	/^        void apply (void (*func_) (unsigned char *data_, size_t size_,$/;"	p	class:zmq::trie_t	access:public	signature:(void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
apply_helper	.\src\trie.cpp	/^void zmq::trie_t::apply_helper ($/;"	f	class:zmq::trie_t	signature:( unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
apply_helper	.\src\trie.hpp	/^        void apply_helper ($/;"	p	class:zmq::trie_t	access:private	signature:( unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
arg	.\src\thread.hpp	/^        void *arg;$/;"	m	class:zmq::thread_t	access:public
args	.\src\command.hpp	/^        } args;$/;"	m	struct:zmq::command_t	typeref:union:zmq::command_t::__anon15	access:public
array_index	.\src\array.hpp	/^        int array_index;$/;"	m	class:zmq::array_item_t	access:private
array_item_t	.\src\array.hpp	/^        array_item_t (const array_item_t&);$/;"	p	class:zmq::array_item_t	access:private	signature:(const array_item_t&)
array_item_t	.\src\array.hpp	/^        inline array_item_t () :$/;"	f	class:zmq::array_item_t	access:public	signature:()
array_item_t	.\src\array.hpp	/^    template <int ID = 0> class array_item_t$/;"	c	namespace:zmq
array_t	.\src\array.hpp	/^        array_t (const array_t&);$/;"	p	class:zmq::array_t	access:private	signature:(const array_t&)
array_t	.\src\array.hpp	/^        inline array_t ()$/;"	f	class:zmq::array_t	access:public	signature:()
array_t	.\src\array.hpp	/^    template <typename T, int ID = 0> class array_t$/;"	c	namespace:zmq
assign	.\src\blob.hpp	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(char_type& __c1, const char_type& __c2)
assign	.\src\blob.hpp	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits	access:public	signature:(char_type* __s, size_t __n, char_type __a)
atomic_counter_t	.\src\atomic_counter.hpp	/^        atomic_counter_t (const atomic_counter_t&);$/;"	p	class:zmq::atomic_counter_t	access:private	signature:(const atomic_counter_t&)
atomic_counter_t	.\src\atomic_counter.hpp	/^        inline atomic_counter_t (integer_t value_ = 0) :$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t value_ = 0)
atomic_counter_t	.\src\atomic_counter.hpp	/^    class atomic_counter_t$/;"	c	namespace:zmq
atomic_ptr_t	.\src\atomic_ptr.hpp	/^        atomic_ptr_t (const atomic_ptr_t&);$/;"	p	class:zmq::atomic_ptr_t	access:private	signature:(const atomic_ptr_t&)
atomic_ptr_t	.\src\atomic_ptr.hpp	/^        inline atomic_ptr_t ()$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:()
atomic_ptr_t	.\src\atomic_ptr.hpp	/^    template <typename T> class atomic_ptr_t$/;"	c	namespace:zmq
attach	.\src\command.hpp	/^            attach,$/;"	e	enum:zmq::command_t::type_t
attach	.\src\command.hpp	/^            } attach;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon19	access:public
attach	.\src\dist.cpp	/^void zmq::dist_t::attach (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
attach	.\src\dist.hpp	/^        void attach (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
attach	.\src\fq.cpp	/^void zmq::fq_t::attach (pipe_t *pipe_)$/;"	f	class:zmq::fq_t	signature:(pipe_t *pipe_)
attach	.\src\fq.hpp	/^        void attach (pipe_t *pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(pipe_t *pipe_)
attach	.\src\lb.cpp	/^void zmq::lb_t::attach (pipe_t *pipe_)$/;"	f	class:zmq::lb_t	signature:(pipe_t *pipe_)
attach	.\src\lb.hpp	/^        void attach (pipe_t *pipe_);$/;"	p	class:zmq::lb_t	access:public	signature:(pipe_t *pipe_)
attach_pipe	.\src\session_base.cpp	/^void zmq::session_base_t::attach_pipe (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
attach_pipe	.\src\session_base.hpp	/^        void attach_pipe (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
attach_pipe	.\src\socket_base.cpp	/^void zmq::socket_base_t::attach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_, bool icanhasall_)
attach_pipe	.\src\socket_base.hpp	/^        void attach_pipe (zmq::pipe_t *pipe_, bool icanhasall_ = false);$/;"	p	class:zmq::socket_base_t	access:private	signature:(zmq::pipe_t *pipe_, bool icanhasall_ = false)
back	.\src\yqueue.hpp	/^        inline T &back ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
back_chunk	.\src\yqueue.hpp	/^        chunk_t *back_chunk;$/;"	m	class:zmq::yqueue_t	access:private
back_pos	.\src\yqueue.hpp	/^        int back_pos;$/;"	m	class:zmq::yqueue_t	access:private
backlog	.\src\options.hpp	/^        int backlog;$/;"	m	struct:zmq::options_t	access:public
base	.\src\msg.hpp	/^            } base;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon39	access:public
begin_chunk	.\src\yqueue.hpp	/^        chunk_t *begin_chunk;$/;"	m	class:zmq::yqueue_t	access:private
begin_pos	.\src\yqueue.hpp	/^        int begin_pos;$/;"	m	class:zmq::yqueue_t	access:private
beginning	.\src\encoder.hpp	/^        bool beginning;$/;"	m	class:zmq::encoder_base_t	access:private
bind	.\src\command.hpp	/^            bind,$/;"	e	enum:zmq::command_t::type_t
bind	.\src\command.hpp	/^            } bind;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon20	access:public
bind	.\src\socket_base.cpp	/^int zmq::socket_base_t::bind (const char *addr_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_)
bind	.\src\socket_base.hpp	/^        int bind (const char *addr_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *addr_)
bind_failed	.\include\zmq.h	/^    } bind_failed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon7	access:public
blob_t	.\src\blob.hpp	/^    typedef std::basic_string <unsigned char> blob_t;$/;"	t	namespace:zmq
blob_t	.\src\xpub.hpp	/^        typedef std::basic_string <unsigned char> blob_t;$/;"	t	class:zmq::xpub_t	access:private
body	.\src\req.hpp	/^            body$/;"	e	enum:zmq::req_session_t::__anon47
bottom	.\src\req.hpp	/^            bottom,$/;"	e	enum:zmq::req_session_t::__anon47
buf	.\src\decoder.hpp	/^        unsigned char *buf;$/;"	m	class:zmq::decoder_base_t	access:private
buf	.\src\encoder.hpp	/^        unsigned char *buf;$/;"	m	class:zmq::encoder_base_t	access:private
bufsize	.\src\decoder.hpp	/^        size_t bufsize;$/;"	m	class:zmq::decoder_base_t	access:private
bufsize	.\src\encoder.hpp	/^        size_t bufsize;$/;"	m	class:zmq::encoder_base_t	access:private
c	.\src\ypipe.hpp	/^        atomic_ptr_t <T> c;$/;"	m	class:zmq::ypipe_t	access:protected
cancel_timer	.\src\io_object.cpp	/^void zmq::io_object_t::cancel_timer (int id_)$/;"	f	class:zmq::io_object_t	signature:(int id_)
cancel_timer	.\src\io_object.hpp	/^        void cancel_timer (int id_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(int id_)
cancel_timer	.\src\poller_base.cpp	/^void zmq::poller_base_t::cancel_timer (i_poll_events *sink_, int id_)$/;"	f	class:zmq::poller_base_t	signature:(i_poll_events *sink_, int id_)
cancel_timer	.\src\poller_base.hpp	/^        void cancel_timer (zmq::i_poll_events *sink_, int id_);$/;"	p	class:zmq::poller_base_t	access:public	signature:(zmq::i_poll_events *sink_, int id_)
cas	.\src\atomic_ptr.hpp	/^        inline T *cas (T *cmp_, T *val_)$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:(T *cmp_, T *val_)
char_traits	.\src\blob.hpp	/^    struct char_traits<unsigned char>$/;"	s	namespace:std
char_type	.\src\blob.hpp	/^      typedef unsigned char char_type;$/;"	t	struct:std::char_traits	access:public
check	.\src\msg.cpp	/^bool zmq::msg_t::check ()$/;"	f	class:zmq::msg_t	signature:()
check	.\src\msg.hpp	/^        bool check ();$/;"	p	class:zmq::msg_t	access:public	signature:()
check	.\src\trie.cpp	/^bool zmq::trie_t::check (unsigned char *data_, size_t size_)$/;"	f	class:zmq::trie_t	signature:(unsigned char *data_, size_t size_)
check	.\src\trie.hpp	/^        bool check (unsigned char *data_, size_t size_);$/;"	p	class:zmq::trie_t	access:public	signature:(unsigned char *data_, size_t size_)
check_destroy	.\src\socket_base.cpp	/^void zmq::socket_base_t::check_destroy ()$/;"	f	class:zmq::socket_base_t	signature:()
check_destroy	.\src\socket_base.hpp	/^        void check_destroy ();$/;"	p	class:zmq::socket_base_t	access:private	signature:()
check_msg_t_size	.\src\zmq.cpp	/^typedef char check_msg_t_size$/;"	t	file:
check_protocol	.\src\socket_base.cpp	/^int zmq::socket_base_t::check_protocol (const std::string &protocol_)$/;"	f	class:zmq::socket_base_t	signature:(const std::string &protocol_)
check_protocol	.\src\socket_base.hpp	/^        int check_protocol (const std::string &protocol_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const std::string &protocol_)
check_read	.\src\pipe.cpp	/^bool zmq::pipe_t::check_read ()$/;"	f	class:zmq::pipe_t	signature:()
check_read	.\src\pipe.hpp	/^        bool check_read ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
check_read	.\src\ypipe.hpp	/^        inline bool check_read ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
check_tag	.\src\ctx.cpp	/^bool zmq::ctx_t::check_tag ()$/;"	f	class:zmq::ctx_t	signature:()
check_tag	.\src\ctx.hpp	/^        bool check_tag ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
check_tag	.\src\socket_base.cpp	/^bool zmq::socket_base_t::check_tag ()$/;"	f	class:zmq::socket_base_t	signature:()
check_tag	.\src\socket_base.hpp	/^        bool check_tag ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
check_term_acks	.\src\own.cpp	/^void zmq::own_t::check_term_acks ()$/;"	f	class:zmq::own_t	signature:()
check_term_acks	.\src\own.hpp	/^        void check_term_acks ();$/;"	p	class:zmq::own_t	access:private	signature:()
check_write	.\src\pipe.cpp	/^bool zmq::pipe_t::check_write ()$/;"	f	class:zmq::pipe_t	signature:()
check_write	.\src\pipe.hpp	/^        bool check_write ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
choose_io_thread	.\src\ctx.cpp	/^zmq::io_thread_t *zmq::ctx_t::choose_io_thread (uint64_t affinity_)$/;"	f	class:zmq::ctx_t	signature:(uint64_t affinity_)
choose_io_thread	.\src\ctx.hpp	/^        zmq::io_thread_t *choose_io_thread (uint64_t affinity_);$/;"	p	class:zmq::ctx_t	access:public	signature:(uint64_t affinity_)
choose_io_thread	.\src\object.cpp	/^zmq::io_thread_t *zmq::object_t::choose_io_thread (uint64_t affinity_)$/;"	f	class:zmq::object_t	signature:(uint64_t affinity_)
choose_io_thread	.\src\object.hpp	/^        zmq::io_thread_t *choose_io_thread (uint64_t affinity_);$/;"	p	class:zmq::object_t	access:protected	signature:(uint64_t affinity_)
chunk_t	.\src\yqueue.hpp	/^        struct chunk_t$/;"	s	class:zmq::yqueue_t	access:private
clean_pipes	.\src\session_base.cpp	/^void zmq::session_base_t::clean_pipes ()$/;"	f	class:zmq::session_base_t	signature:()
clean_pipes	.\src\session_base.hpp	/^        void clean_pipes ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
clear	.\src\array.hpp	/^        inline void clear ()$/;"	f	class:zmq::array_t	access:public	signature:()
clock	.\src\poller_base.hpp	/^        clock_t clock;$/;"	m	class:zmq::poller_base_t	access:private
clock	.\src\socket_base.hpp	/^        clock_t clock;$/;"	m	class:zmq::socket_base_t	access:private
clock_precision	.\src\config.hpp	/^        clock_precision = 1000000,$/;"	e	enum:zmq::__anon32
clock_t	.\src\clock.cpp	/^zmq::clock_t::clock_t () :$/;"	f	class:zmq::clock_t	signature:()
clock_t	.\src\clock.hpp	/^        clock_t ();$/;"	p	class:zmq::clock_t	access:public	signature:()
clock_t	.\src\clock.hpp	/^        clock_t (const clock_t&);$/;"	p	class:zmq::clock_t	access:private	signature:(const clock_t&)
clock_t	.\src\clock.hpp	/^    class clock_t$/;"	c	namespace:zmq
close	.\src\ipc_connecter.cpp	/^int zmq::ipc_connecter_t::close ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
close	.\src\ipc_connecter.hpp	/^        int close ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
close	.\src\ipc_listener.cpp	/^int zmq::ipc_listener_t::close ()$/;"	f	class:zmq::ipc_listener_t	signature:()
close	.\src\ipc_listener.hpp	/^        int close ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
close	.\src\msg.cpp	/^int zmq::msg_t::close ()$/;"	f	class:zmq::msg_t	signature:()
close	.\src\msg.hpp	/^        int close ();$/;"	p	class:zmq::msg_t	access:public	signature:()
close	.\src\socket_base.cpp	/^int zmq::socket_base_t::close ()$/;"	f	class:zmq::socket_base_t	signature:()
close	.\src\socket_base.hpp	/^        int close ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
close	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::close ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
close	.\src\tcp_connecter.hpp	/^        void close ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
close	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::close ()$/;"	f	class:zmq::tcp_listener_t	signature:()
close	.\src\tcp_listener.hpp	/^        void close ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
close_failed	.\include\zmq.h	/^    } close_failed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon11	access:public
closed	.\include\zmq.h	/^    } closed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon10	access:public
command_pipe_granularity	.\src\config.hpp	/^        command_pipe_granularity = 16,$/;"	e	enum:zmq::__anon32
command_t	.\src\command.hpp	/^    struct command_t$/;"	s	namespace:zmq
compare	.\src\blob.hpp	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type* __s1, const char_type* __s2, size_t __n)
compute_lwm	.\src\pipe.cpp	/^int zmq::pipe_t::compute_lwm (int hwm_)$/;"	f	class:zmq::pipe_t	signature:(int hwm_)
compute_lwm	.\src\pipe.hpp	/^        static int compute_lwm (int hwm_);$/;"	p	class:zmq::pipe_t	access:private	signature:(int hwm_)
compute_sqns	.\src\pgm_socket.cpp	/^int zmq::pgm_socket_t::compute_sqns (int tpdu_)$/;"	f	class:zmq::pgm_socket_t	signature:(int tpdu_)
compute_sqns	.\src\pgm_socket.hpp	/^        int compute_sqns (int tpdu_);$/;"	p	class:zmq::pgm_socket_t	access:private	signature:(int tpdu_)
connect	.\src\ipc_connecter.cpp	/^zmq::fd_t zmq::ipc_connecter_t::connect ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
connect	.\src\ipc_connecter.hpp	/^        fd_t connect ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
connect	.\src\session_base.hpp	/^        bool connect;$/;"	m	class:zmq::session_base_t	access:private
connect	.\src\socket_base.cpp	/^int zmq::socket_base_t::connect (const char *addr_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_)
connect	.\src\socket_base.hpp	/^        int connect (const char *addr_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *addr_)
connect	.\src\tcp_connecter.cpp	/^zmq::fd_t zmq::tcp_connecter_t::connect ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
connect	.\src\tcp_connecter.hpp	/^        fd_t connect ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
connect_delayed	.\include\zmq.h	/^    } connect_delayed;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon4	access:public
connect_retried	.\include\zmq.h	/^    } connect_retried;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon5	access:public
connected	.\include\zmq.h	/^    } connected;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon3	access:public
content	.\src\msg.hpp	/^                content_t *content;$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
content_t	.\src\msg.hpp	/^        struct content_t$/;"	s	class:zmq::msg_t	access:private
copy	.\src\blob.hpp	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	access:public	signature:(char_type* __s1, const char_type* __s2, size_t __n)
copy	.\src\msg.cpp	/^int zmq::msg_t::copy (msg_t &src_)$/;"	f	class:zmq::msg_t	signature:(msg_t &src_)
copy	.\src\msg.hpp	/^        int copy (msg_t &src_);$/;"	p	class:zmq::msg_t	access:public	signature:(msg_t &src_)
copy_monitor_address	.\src\socket_base.cpp	/^void zmq::socket_base_t::copy_monitor_address (char *dest_, std::string &src_)$/;"	f	class:zmq::socket_base_t	signature:(char *dest_, std::string &src_)
copy_monitor_address	.\src\socket_base.hpp	/^        void copy_monitor_address (char *dest_, std::string &src_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(char *dest_, std::string &src_)
count	.\src\mtrie.hpp	/^        unsigned short count;$/;"	m	class:zmq::mtrie_t	access:private
count	.\src\trie.hpp	/^        unsigned short count;$/;"	m	class:zmq::trie_t	access:private
cpipe	.\src\mailbox.hpp	/^        cpipe_t cpipe;$/;"	m	class:zmq::mailbox_t	access:private
cpipe_t	.\src\mailbox.hpp	/^        typedef ypipe_t <command_t, command_pipe_granularity> cpipe_t;$/;"	t	class:zmq::mailbox_t	access:private
create	.\src\session_base.cpp	/^zmq::session_base_t *zmq::session_base_t::create (class io_thread_t *io_thread_,$/;"	f	class:zmq::session_base_t	signature:(class io_thread_t *io_thread_, bool connect_, class socket_base_t *socket_, const options_t &options_, const address_t *addr_)
create	.\src\session_base.hpp	/^        static session_base_t *create (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
create	.\src\socket_base.cpp	/^zmq::socket_base_t *zmq::socket_base_t::create (int type_, class ctx_t *parent_,$/;"	f	class:zmq::socket_base_t	signature:(int type_, class ctx_t *parent_, uint32_t tid_, int sid_)
create	.\src\socket_base.hpp	/^        static socket_base_t *create (int type_, zmq::ctx_t *parent_,$/;"	p	class:zmq::socket_base_t	access:public	signature:(int type_, zmq::ctx_t *parent_, uint32_t tid_, int sid_)
create_socket	.\src\ctx.cpp	/^zmq::socket_base_t *zmq::ctx_t::create_socket (int type_)$/;"	f	class:zmq::ctx_t	signature:(int type_)
create_socket	.\src\ctx.hpp	/^        zmq::socket_base_t *create_socket (int type_);$/;"	p	class:zmq::ctx_t	access:public	signature:(int type_)
cs	.\src\mutex.hpp	/^        CRITICAL_SECTION cs;$/;"	m	class:zmq::mutex_t	access:private
ctx	.\src\object.hpp	/^        zmq::ctx_t *ctx;$/;"	m	class:zmq::object_t	access:private
ctx_t	.\src\ctx.cpp	/^zmq::ctx_t::ctx_t () :$/;"	f	class:zmq::ctx_t	signature:()
ctx_t	.\src\ctx.hpp	/^        ctx_t ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
ctx_t	.\src\ctx.hpp	/^        ctx_t (const ctx_t&);$/;"	p	class:zmq::ctx_t	access:private	signature:(const ctx_t&)
ctx_t	.\src\ctx.hpp	/^    class ctx_t$/;"	c	namespace:zmq
ctx_terminated	.\src\socket_base.hpp	/^        bool ctx_terminated;$/;"	m	class:zmq::socket_base_t	access:private
current	.\src\fq.hpp	/^        pipes_t::size_type current;$/;"	m	class:zmq::fq_t	access:private
current	.\src\lb.hpp	/^        pipes_t::size_type current;$/;"	m	class:zmq::lb_t	access:private
current_out	.\src\router.hpp	/^        zmq::pipe_t *current_out;$/;"	m	class:zmq::router_t	access:private
current_reconnect_ivl	.\src\ipc_connecter.hpp	/^        int current_reconnect_ivl;$/;"	m	class:zmq::ipc_connecter_t	access:private
current_reconnect_ivl	.\src\tcp_connecter.hpp	/^        int current_reconnect_ivl;$/;"	m	class:zmq::tcp_connecter_t	access:private
data	.\include\zmq.h	/^    } data;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2	access:public
data	.\src\msg.cpp	/^void *zmq::msg_t::data ()$/;"	f	class:zmq::msg_t	signature:()
data	.\src\msg.hpp	/^                unsigned char data [max_vsm_size];$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
data	.\src\msg.hpp	/^            void *data;$/;"	m	struct:zmq::msg_t::content_t	access:public
data	.\src\msg.hpp	/^        void *data ();$/;"	p	class:zmq::msg_t	access:public	signature:()
dealer_session_t	.\src\dealer.cpp	/^zmq::dealer_session_t::dealer_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::dealer_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
dealer_session_t	.\src\dealer.hpp	/^        dealer_session_t (const dealer_session_t&);$/;"	p	class:zmq::dealer_session_t	access:private	signature:(const dealer_session_t&)
dealer_session_t	.\src\dealer.hpp	/^        dealer_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::dealer_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
dealer_session_t	.\src\dealer.hpp	/^    class dealer_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
dealer_t	.\src\dealer.cpp	/^zmq::dealer_t::dealer_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::dealer_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
dealer_t	.\src\dealer.hpp	/^        dealer_t (const dealer_t&);$/;"	p	class:zmq::dealer_t	access:private	signature:(const dealer_t&)
dealer_t	.\src\dealer.hpp	/^        dealer_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::dealer_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
dealer_t	.\src\dealer.hpp	/^    class dealer_t :$/;"	c	namespace:zmq	inherits:socket_base_t
decoder	.\src\pgm_receiver.hpp	/^            decoder_t *decoder;$/;"	m	struct:zmq::pgm_receiver_t::peer_info_t	access:public
decoder	.\src\stream_engine.hpp	/^        i_decoder *decoder;$/;"	m	class:zmq::stream_engine_t	access:private
decoder_base_t	.\src\decoder.hpp	/^        decoder_base_t (const decoder_base_t&);$/;"	p	class:zmq::decoder_base_t	access:private	signature:(const decoder_base_t&)
decoder_base_t	.\src\decoder.hpp	/^        inline decoder_base_t (size_t bufsize_) :$/;"	f	class:zmq::decoder_base_t	access:public	signature:(size_t bufsize_)
decoder_base_t	.\src\decoder.hpp	/^    template <typename T> class decoder_base_t : public i_decoder$/;"	c	namespace:zmq	inherits:i_decoder
decoder_t	.\src\decoder.cpp	/^zmq::decoder_t::decoder_t (size_t bufsize_, int64_t maxmsgsize_) :$/;"	f	class:zmq::decoder_t	signature:(size_t bufsize_, int64_t maxmsgsize_)
decoder_t	.\src\decoder.hpp	/^        decoder_t (const decoder_t&);$/;"	p	class:zmq::decoder_t	access:private	signature:(const decoder_t&)
decoder_t	.\src\decoder.hpp	/^        decoder_t (size_t bufsize_, int64_t maxmsgsize_);$/;"	p	class:zmq::decoder_t	access:public	signature:(size_t bufsize_, int64_t maxmsgsize_)
decoder_t	.\src\decoder.hpp	/^    class decoder_t : public decoder_base_t <decoder_t>$/;"	c	namespace:zmq	inherits:decoder_base_t
decoding_error	.\src\decoder.hpp	/^        inline void decoding_error ()$/;"	f	class:zmq::decoder_base_t	access:protected	signature:()
delay	.\src\pipe.hpp	/^        bool delay;$/;"	m	class:zmq::pipe_t	access:private
delay_attach_on_connect	.\src\options.hpp	/^        int delay_attach_on_connect;$/;"	m	struct:zmq::options_t	access:public
delay_on_close	.\src\options.hpp	/^        bool delay_on_close;$/;"	m	struct:zmq::options_t	access:public
delay_on_disconnect	.\src\options.hpp	/^        bool delay_on_disconnect;$/;"	m	struct:zmq::options_t	access:public
delayed_start	.\src\ipc_connecter.hpp	/^        const bool delayed_start;$/;"	m	class:zmq::ipc_connecter_t	access:private
delayed_start	.\src\tcp_connecter.hpp	/^        const bool delayed_start;$/;"	m	class:zmq::tcp_connecter_t	access:private
delimit	.\src\pipe.cpp	/^void zmq::pipe_t::delimit ()$/;"	f	class:zmq::pipe_t	signature:()
delimit	.\src\pipe.hpp	/^        void delimit ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
delimited	.\src\pipe.hpp	/^            delimited,$/;"	e	enum:zmq::pipe_t::__anon46
delimiter	.\src\msg.hpp	/^            } delimiter;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon42	access:public
descriptor	.\src\thread.hpp	/^        HANDLE descriptor;$/;"	m	class:zmq::thread_t	access:private
descriptor	.\src\thread.hpp	/^        pthread_t descriptor;$/;"	m	class:zmq::thread_t	access:private
destination	.\src\command.hpp	/^        zmq::object_t *destination;$/;"	m	struct:zmq::command_t	access:public
destroy_socket	.\src\ctx.cpp	/^void zmq::ctx_t::destroy_socket (class socket_base_t *socket_)$/;"	f	class:zmq::ctx_t	signature:(class socket_base_t *socket_)
destroy_socket	.\src\ctx.hpp	/^        void destroy_socket (zmq::socket_base_t *socket_);$/;"	p	class:zmq::ctx_t	access:public	signature:(zmq::socket_base_t *socket_)
destroy_socket	.\src\object.cpp	/^void zmq::object_t::destroy_socket (socket_base_t *socket_)$/;"	f	class:zmq::object_t	signature:(socket_base_t *socket_)
destroy_socket	.\src\object.hpp	/^        void destroy_socket (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
destroyed	.\src\socket_base.hpp	/^        bool destroyed;$/;"	m	class:zmq::socket_base_t	access:private
detach	.\src\session_base.cpp	/^void zmq::session_base_t::detach ()$/;"	f	class:zmq::session_base_t	signature:()
detach	.\src\session_base.hpp	/^        void detach ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
detached	.\src\session_base.cpp	/^void zmq::session_base_t::detached ()$/;"	f	class:zmq::session_base_t	signature:()
detached	.\src\session_base.hpp	/^        void detached ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
devpoll_ctl	.\src\devpoll.cpp	/^void zmq::devpoll_t::devpoll_ctl (fd_t fd_, short events_)$/;"	f	class:zmq::devpoll_t	signature:(fd_t fd_, short events_)
devpoll_ctl	.\src\devpoll.hpp	/^        void devpoll_ctl (fd_t fd_, short events_);$/;"	p	class:zmq::devpoll_t	access:private	signature:(fd_t fd_, short events_)
devpoll_fd	.\src\devpoll.hpp	/^        fd_t devpoll_fd;$/;"	m	class:zmq::devpoll_t	access:private
devpoll_t	.\src\devpoll.cpp	/^zmq::devpoll_t::devpoll_t () :$/;"	f	class:zmq::devpoll_t	signature:()
devpoll_t	.\src\devpoll.hpp	/^        devpoll_t ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
devpoll_t	.\src\devpoll.hpp	/^        devpoll_t (const devpoll_t&);$/;"	p	class:zmq::devpoll_t	access:private	signature:(const devpoll_t&)
devpoll_t	.\src\devpoll.hpp	/^    class devpoll_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
disconnected	.\include\zmq.h	/^    } disconnected;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon12	access:public
dist	.\src\xpub.hpp	/^        dist_t dist;$/;"	m	class:zmq::xpub_t	access:private
dist	.\src\xsub.hpp	/^        dist_t dist;$/;"	m	class:zmq::xsub_t	access:private
dist_t	.\src\dist.cpp	/^zmq::dist_t::dist_t () :$/;"	f	class:zmq::dist_t	signature:()
dist_t	.\src\dist.hpp	/^        dist_t ();$/;"	p	class:zmq::dist_t	access:public	signature:()
dist_t	.\src\dist.hpp	/^        dist_t (const dist_t&);$/;"	p	class:zmq::dist_t	access:private	signature:(const dist_t&)
dist_t	.\src\dist.hpp	/^    class dist_t$/;"	c	namespace:zmq
distribute	.\src\dist.cpp	/^void zmq::dist_t::distribute (msg_t *msg_, int flags_)$/;"	f	class:zmq::dist_t	signature:(msg_t *msg_, int flags_)
distribute	.\src\dist.hpp	/^        void distribute (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dist_t	access:private	signature:(zmq::msg_t *msg_, int flags_)
done	.\src\command.hpp	/^            done$/;"	e	enum:zmq::command_t::type_t
done	.\src\command.hpp	/^            } done;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon31	access:public
double_terminated	.\src\pipe.hpp	/^            double_terminated$/;"	e	enum:zmq::pipe_t::__anon46
drop_subscriptions	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::drop_subscriptions ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
drop_subscriptions	.\src\pgm_receiver.hpp	/^        void drop_subscriptions ();$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:()
dropping	.\src\lb.hpp	/^        bool dropping;$/;"	m	class:zmq::lb_t	access:private
eight_byte_size_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::eight_byte_size_ready ()$/;"	f	class:zmq::decoder_t	signature:()
eight_byte_size_ready	.\src\decoder.hpp	/^        bool eight_byte_size_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
eight_byte_size_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::eight_byte_size_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
eight_byte_size_ready	.\src\v1_decoder.hpp	/^        bool eight_byte_size_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
eligible	.\src\dist.hpp	/^        pipes_t::size_type eligible;$/;"	m	class:zmq::dist_t	access:private
empty	.\src\array.hpp	/^        inline bool empty ()$/;"	f	class:zmq::array_t	access:public	signature:()
empty_slots	.\src\ctx.hpp	/^        emtpy_slots_t empty_slots;$/;"	m	class:zmq::ctx_t	access:private
emtpy_slots_t	.\src\ctx.hpp	/^        typedef std::vector <uint32_t> emtpy_slots_t;$/;"	t	class:zmq::ctx_t	access:private
enable_ipv4_mapping	.\src\ip.cpp	/^void zmq::enable_ipv4_mapping (fd_t s_)$/;"	f	class:zmq	signature:(fd_t s_)
enable_ipv4_mapping	.\src\ip.hpp	/^    void enable_ipv4_mapping (fd_t s_);$/;"	p	namespace:zmq	signature:(fd_t s_)
encoder	.\src\pgm_sender.hpp	/^        encoder_t encoder;$/;"	m	class:zmq::pgm_sender_t	access:private
encoder	.\src\stream_engine.hpp	/^        i_encoder *encoder;$/;"	m	class:zmq::stream_engine_t	access:private
encoder_base_t	.\src\encoder.hpp	/^        encoder_base_t (const encoder_base_t&);$/;"	p	class:zmq::encoder_base_t	access:private	signature:(const encoder_base_t&)
encoder_base_t	.\src\encoder.hpp	/^        inline encoder_base_t (size_t bufsize_) :$/;"	f	class:zmq::encoder_base_t	access:public	signature:(size_t bufsize_)
encoder_base_t	.\src\encoder.hpp	/^    template <typename T> class encoder_base_t : public i_encoder$/;"	c	namespace:zmq	inherits:i_encoder
encoder_t	.\src\encoder.cpp	/^zmq::encoder_t::encoder_t (size_t bufsize_) :$/;"	f	class:zmq::encoder_t	signature:(size_t bufsize_)
encoder_t	.\src\encoder.hpp	/^        encoder_t (const encoder_t&);$/;"	p	class:zmq::encoder_t	access:private	signature:(const encoder_t&)
encoder_t	.\src\encoder.hpp	/^        encoder_t (size_t bufsize_);$/;"	p	class:zmq::encoder_t	access:public	signature:(size_t bufsize_)
encoder_t	.\src\encoder.hpp	/^    class encoder_t : public encoder_base_t <encoder_t>$/;"	c	namespace:zmq	inherits:encoder_base_t
end_chunk	.\src\yqueue.hpp	/^        chunk_t *end_chunk;$/;"	m	class:zmq::yqueue_t	access:private
end_pos	.\src\yqueue.hpp	/^        int end_pos;$/;"	m	class:zmq::yqueue_t	access:private
endpoint	.\src\ipc_connecter.hpp	/^        std::string endpoint;$/;"	m	class:zmq::ipc_connecter_t	access:private
endpoint	.\src\ipc_listener.hpp	/^        std::string endpoint;$/;"	m	class:zmq::ipc_listener_t	access:private
endpoint	.\src\stream_engine.hpp	/^        std::string endpoint;$/;"	m	class:zmq::stream_engine_t	access:private
endpoint	.\src\tcp_connecter.hpp	/^        std::string endpoint;$/;"	m	class:zmq::tcp_connecter_t	access:private
endpoint	.\src\tcp_listener.hpp	/^        std::string endpoint;$/;"	m	class:zmq::tcp_listener_t	access:private
endpoint_t	.\src\ctx.hpp	/^    struct endpoint_t$/;"	s	namespace:zmq
endpoints	.\src\ctx.hpp	/^        endpoints_t endpoints;$/;"	m	class:zmq::ctx_t	access:private
endpoints	.\src\socket_base.hpp	/^        endpoints_t endpoints;$/;"	m	class:zmq::socket_base_t	access:private
endpoints_sync	.\src\ctx.hpp	/^        mutex_t endpoints_sync;$/;"	m	class:zmq::ctx_t	access:private
endpoints_t	.\src\ctx.hpp	/^        typedef std::map <std::string, endpoint_t> endpoints_t;$/;"	t	class:zmq::ctx_t	access:private
endpoints_t	.\src\socket_base.hpp	/^        typedef std::multimap <std::string, own_t *> endpoints_t;$/;"	t	class:zmq::socket_base_t	access:private
engine	.\src\command.hpp	/^                struct i_engine *engine;$/;"	m	struct:zmq::command_t::__anon15::__anon19	typeref:struct:zmq::command_t::__anon15::__anon19::i_engine	access:public
engine	.\src\session_base.hpp	/^        zmq::i_engine *engine;$/;"	m	class:zmq::session_base_t	access:private
eof	.\src\blob.hpp	/^      eof() { return static_cast<int_type>(-1); }$/;"	f	struct:std::char_traits	access:public	signature:()
epoll_fd	.\src\epoll.hpp	/^        fd_t epoll_fd;$/;"	m	class:zmq::epoll_t	access:private
epoll_t	.\src\epoll.cpp	/^zmq::epoll_t::epoll_t () :$/;"	f	class:zmq::epoll_t	signature:()
epoll_t	.\src\epoll.hpp	/^        epoll_t ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
epoll_t	.\src\epoll.hpp	/^        epoll_t (const epoll_t&);$/;"	p	class:zmq::epoll_t	access:private	signature:(const epoll_t&)
epoll_t	.\src\epoll.hpp	/^    class epoll_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
eq	.\src\blob.hpp	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type& __c1, const char_type& __c2)
eq_int_type	.\src\blob.hpp	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(const int_type& __c1, const int_type& __c2)
erase	.\src\array.hpp	/^        inline void erase (T *item_) {$/;"	f	class:zmq::array_t	access:public	signature:(T *item_)
erase	.\src\array.hpp	/^        inline void erase (size_type index_) {$/;"	f	class:zmq::array_t	access:public	signature:(size_type index_)
err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon11	access:public
err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon4	access:public
err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon7	access:public
err	.\include\zmq.h	/^        int err;$/;"	m	struct:__anon1::__anon2::__anon9	access:public
errno_assert	.\src\err.hpp	114;"	d
errno_to_string	.\src\err.cpp	/^const char *zmq::errno_to_string (int errno_)$/;"	f	class:zmq	signature:(int errno_)
errno_to_string	.\src\err.hpp	/^    const char *errno_to_string (int errno_);$/;"	p	namespace:zmq	signature:(int errno_)
error	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::error ()$/;"	f	class:zmq::stream_engine_t	signature:()
error	.\src\stream_engine.hpp	/^        void error ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
ev	.\src\epoll.hpp	/^            epoll_event ev;$/;"	m	struct:zmq::epoll_t::poll_entry_t	access:public
event	.\include\zmq.h	/^    int event;$/;"	m	struct:__anon1	access:public
event_accept_failed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_accept_failed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
event_accept_failed	.\src\socket_base.hpp	/^        void event_accept_failed (std::string &addr_, int err_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int err_)
event_accepted	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_accepted (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
event_accepted	.\src\socket_base.hpp	/^        void event_accepted (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
event_bind_failed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_bind_failed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
event_bind_failed	.\src\socket_base.hpp	/^        void event_bind_failed (std::string &addr_, int err_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int err_)
event_close_failed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_close_failed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
event_close_failed	.\src\socket_base.hpp	/^        void event_close_failed (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
event_closed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_closed (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
event_closed	.\src\socket_base.hpp	/^        void event_closed (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
event_connect_delayed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_connect_delayed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
event_connect_delayed	.\src\socket_base.hpp	/^        void event_connect_delayed (std::string &addr_, int err_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int err_)
event_connect_retried	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_connect_retried (std::string &addr_, int interval_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int interval_)
event_connect_retried	.\src\socket_base.hpp	/^        void event_connect_retried (std::string &addr_, int interval_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int interval_)
event_connected	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_connected (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
event_connected	.\src\socket_base.hpp	/^        void event_connected (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
event_disconnected	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_disconnected (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
event_disconnected	.\src\socket_base.hpp	/^        void event_disconnected (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
event_listening	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_listening (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
event_listening	.\src\socket_base.hpp	/^        void event_listening (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
events	.\include\zmq.h	/^    short events;$/;"	m	struct:__anon13	access:public
events	.\src\devpoll.hpp	/^            short events;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
events	.\src\epoll.hpp	/^            zmq::i_poll_events *events;$/;"	m	struct:zmq::epoll_t::poll_entry_t	access:public
events	.\src\poll.hpp	/^            zmq::i_poll_events *events;$/;"	m	struct:zmq::poll_t::fd_entry_t	access:public
events	.\src\select.hpp	/^            zmq::i_poll_events *events;$/;"	m	struct:zmq::select_t::fd_entry_t	access:public
exceptfds	.\src\select.hpp	/^        fd_set exceptfds;$/;"	m	class:zmq::select_t	access:private
execute_timers	.\src\poller_base.cpp	/^uint64_t zmq::poller_base_t::execute_timers ()$/;"	f	class:zmq::poller_base_t	signature:()
execute_timers	.\src\poller_base.hpp	/^        uint64_t execute_timers ();$/;"	p	class:zmq::poller_base_t	access:protected	signature:()
extract_flags	.\src\socket_base.cpp	/^void zmq::socket_base_t::extract_flags (msg_t *msg_)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *msg_)
extract_flags	.\src\socket_base.hpp	/^        void extract_flags (msg_t *msg_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(msg_t *msg_)
f	.\src\ypipe.hpp	/^        T *f;$/;"	m	class:zmq::ypipe_t	access:protected
family	.\src\tcp_address.cpp	/^unsigned short zmq::tcp_address_t::family () const$/;"	f	class:zmq::tcp_address_t	signature:() const
family	.\src\tcp_address.hpp	/^        sa_family_t family () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
family	.\src\tcp_address.hpp	/^        unsigned short family () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon10	access:public
fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon12	access:public
fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon3	access:public
fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon6	access:public
fd	.\include\zmq.h	/^        int fd;$/;"	m	struct:__anon1::__anon2::__anon8	access:public
fd	.\include\zmq.h	/^    SOCKET fd;$/;"	m	struct:__anon13	access:public
fd	.\include\zmq.h	/^    int fd;$/;"	m	struct:__anon13	access:public
fd	.\src\epoll.hpp	/^            fd_t fd;$/;"	m	struct:zmq::epoll_t::poll_entry_t	access:public
fd	.\src\kqueue.hpp	/^            fd_t fd;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
fd	.\src\select.hpp	/^            fd_t fd;$/;"	m	struct:zmq::select_t::fd_entry_t	access:public
fd_entry_t	.\src\devpoll.hpp	/^        struct fd_entry_t$/;"	s	class:zmq::devpoll_t	access:private
fd_entry_t	.\src\poll.hpp	/^        struct fd_entry_t$/;"	s	class:zmq::poll_t	access:private
fd_entry_t	.\src\select.hpp	/^        struct fd_entry_t$/;"	s	class:zmq::select_t	access:private
fd_set_t	.\src\select.hpp	/^        typedef std::vector <fd_entry_t> fd_set_t;$/;"	t	class:zmq::select_t	access:private
fd_t	.\src\fd.hpp	/^    typedef UINT_PTR fd_t;$/;"	t	namespace:zmq
fd_table	.\src\devpoll.hpp	/^        fd_table_t fd_table;$/;"	m	class:zmq::devpoll_t	access:private
fd_table	.\src\poll.hpp	/^        fd_table_t fd_table;$/;"	m	class:zmq::poll_t	access:private
fd_table_t	.\src\devpoll.hpp	/^        typedef std::vector <fd_entry_t> fd_table_t;$/;"	t	class:zmq::devpoll_t	access:private
fd_table_t	.\src\poll.hpp	/^        typedef std::vector <fd_entry_t> fd_table_t;$/;"	t	class:zmq::poll_t	access:private
fds	.\src\select.hpp	/^        fd_set_t fds;$/;"	m	class:zmq::select_t	access:private
ffn	.\src\msg.hpp	/^            msg_free_fn *ffn;$/;"	m	struct:zmq::msg_t::content_t	access:public
filename	.\src\ipc_listener.hpp	/^        std::string filename;$/;"	m	class:zmq::ipc_listener_t	access:private
filter	.\src\options.hpp	/^        bool filter;$/;"	m	struct:zmq::options_t	access:public
find	.\src\blob.hpp	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type* __s, size_t __n, const char_type& __a)
find_endpoint	.\src\ctx.cpp	/^zmq::endpoint_t zmq::ctx_t::find_endpoint (const char *addr_)$/;"	f	class:zmq::ctx_t	signature:(const char *addr_)
find_endpoint	.\src\ctx.hpp	/^        endpoint_t find_endpoint (const char *addr_);$/;"	p	class:zmq::ctx_t	access:public	signature:(const char *addr_)
find_endpoint	.\src\object.cpp	/^zmq::endpoint_t zmq::object_t::find_endpoint (const char *addr_)$/;"	f	class:zmq::object_t	signature:(const char *addr_)
find_endpoint	.\src\object.hpp	/^        zmq::endpoint_t find_endpoint (const char *addr_);$/;"	p	class:zmq::object_t	access:protected	signature:(const char *addr_)
flag_pollin	.\src\kqueue.hpp	/^            bool flag_pollin;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
flag_pollout	.\src\kqueue.hpp	/^            bool flag_pollout;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
flags	.\src\msg.cpp	/^unsigned char zmq::msg_t::flags ()$/;"	f	class:zmq::msg_t	signature:()
flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon39	access:public
flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon42	access:public
flags	.\src\msg.hpp	/^        unsigned char flags ();$/;"	p	class:zmq::msg_t	access:public	signature:()
flags_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::flags_ready ()$/;"	f	class:zmq::decoder_t	signature:()
flags_ready	.\src\decoder.hpp	/^        bool flags_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
flags_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::flags_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
flags_ready	.\src\v1_decoder.hpp	/^        bool flags_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
flush	.\src\pipe.cpp	/^void zmq::pipe_t::flush ()$/;"	f	class:zmq::pipe_t	signature:()
flush	.\src\pipe.hpp	/^        void flush ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
flush	.\src\session_base.cpp	/^void zmq::session_base_t::flush ()$/;"	f	class:zmq::session_base_t	signature:()
flush	.\src\session_base.hpp	/^        void flush ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
flush	.\src\ypipe.hpp	/^        inline bool flush ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
fq	.\src\dealer.hpp	/^        fq_t fq;$/;"	m	class:zmq::dealer_t	access:private
fq	.\src\pull.hpp	/^        fq_t fq;$/;"	m	class:zmq::pull_t	access:private
fq	.\src\router.hpp	/^        fq_t fq;$/;"	m	class:zmq::router_t	access:private
fq	.\src\xsub.hpp	/^        fq_t fq;$/;"	m	class:zmq::xsub_t	access:private
fq_t	.\src\fq.cpp	/^zmq::fq_t::fq_t () :$/;"	f	class:zmq::fq_t	signature:()
fq_t	.\src\fq.hpp	/^        fq_t ();$/;"	p	class:zmq::fq_t	access:public	signature:()
fq_t	.\src\fq.hpp	/^        fq_t (const fq_t&);$/;"	p	class:zmq::fq_t	access:private	signature:(const fq_t&)
fq_t	.\src\fq.hpp	/^    class fq_t$/;"	c	namespace:zmq
front	.\src\yqueue.hpp	/^        inline T &front ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
gai_assert	.\src\err.hpp	134;"	d
generate_random	.\src\random.cpp	/^uint32_t zmq::generate_random ()$/;"	f	class:zmq	signature:()
generate_random	.\src\random.hpp	/^    uint32_t generate_random ();$/;"	p	namespace:zmq	signature:()
generic	.\src\tcp_address.hpp	/^            sockaddr generic;$/;"	m	union:zmq::tcp_address_t::__anon49	access:public
get	.\src\atomic_counter.hpp	/^        inline integer_t get ()$/;"	f	class:zmq::atomic_counter_t	access:public	signature:()
get	.\src\ctx.cpp	/^int zmq::ctx_t::get (int option_)$/;"	f	class:zmq::ctx_t	signature:(int option_)
get	.\src\ctx.hpp	/^        int get (int option_);$/;"	p	class:zmq::ctx_t	access:public	signature:(int option_)
get_address	.\src\ipc_listener.cpp	/^int zmq::ipc_listener_t::get_address (std::string &addr_)$/;"	f	class:zmq::ipc_listener_t	signature:(std::string &addr_)
get_address	.\src\ipc_listener.hpp	/^        int get_address (std::string &addr_);$/;"	p	class:zmq::ipc_listener_t	access:public	signature:(std::string &addr_)
get_address	.\src\tcp_listener.cpp	/^int zmq::tcp_listener_t::get_address (std::string &addr_)$/;"	f	class:zmq::tcp_listener_t	signature:(std::string &addr_)
get_address	.\src\tcp_listener.hpp	/^        int get_address (std::string &addr_);$/;"	p	class:zmq::tcp_listener_t	access:public	signature:(std::string &addr_)
get_array_index	.\src\array.hpp	/^        inline int get_array_index ()$/;"	f	class:zmq::array_item_t	access:public	signature:()
get_buffer	.\src\decoder.hpp	/^        inline void get_buffer (unsigned char **data_, size_t *size_)$/;"	f	class:zmq::decoder_base_t	access:public	signature:(unsigned char **data_, size_t *size_)
get_buffer	.\src\i_decoder.hpp	/^        virtual void get_buffer (unsigned char **data_, size_t *size_) = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:(unsigned char **data_, size_t *size_)
get_ctx	.\src\object.cpp	/^zmq::ctx_t *zmq::object_t::get_ctx ()$/;"	f	class:zmq::object_t	signature:()
get_ctx	.\src\object.hpp	/^        ctx_t *get_ctx ();$/;"	p	class:zmq::object_t	access:public	signature:()
get_data	.\src\encoder.hpp	/^        inline void get_data (unsigned char **data_, size_t *size_,$/;"	f	class:zmq::encoder_base_t	access:public	signature:(unsigned char **data_, size_t *size_, int *offset_ = NULL)
get_data	.\src\i_encoder.hpp	/^        virtual void get_data (unsigned char **data_, size_t *size_,$/;"	p	struct:zmq::i_encoder	access:public	signature:(unsigned char **data_, size_t *size_, int *offset_ = NULL)
get_fd	.\src\mailbox.cpp	/^zmq::fd_t zmq::mailbox_t::get_fd ()$/;"	f	class:zmq::mailbox_t	signature:()
get_fd	.\src\mailbox.hpp	/^        fd_t get_fd ();$/;"	p	class:zmq::mailbox_t	access:public	signature:()
get_fd	.\src\signaler.cpp	/^zmq::fd_t zmq::signaler_t::get_fd ()$/;"	f	class:zmq::signaler_t	signature:()
get_fd	.\src\signaler.hpp	/^        fd_t get_fd ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
get_identity	.\src\pipe.cpp	/^zmq::blob_t zmq::pipe_t::get_identity ()$/;"	f	class:zmq::pipe_t	signature:()
get_identity	.\src\pipe.hpp	/^        blob_t get_identity ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
get_load	.\src\io_thread.cpp	/^int zmq::io_thread_t::get_load ()$/;"	f	class:zmq::io_thread_t	signature:()
get_load	.\src\io_thread.hpp	/^        int get_load ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
get_load	.\src\poller_base.cpp	/^int zmq::poller_base_t::get_load ()$/;"	f	class:zmq::poller_base_t	signature:()
get_load	.\src\poller_base.hpp	/^        int get_load ();$/;"	p	class:zmq::poller_base_t	access:public	signature:()
get_mailbox	.\src\io_thread.cpp	/^zmq::mailbox_t *zmq::io_thread_t::get_mailbox ()$/;"	f	class:zmq::io_thread_t	signature:()
get_mailbox	.\src\io_thread.hpp	/^        mailbox_t *get_mailbox ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
get_mailbox	.\src\reaper.cpp	/^zmq::mailbox_t *zmq::reaper_t::get_mailbox ()$/;"	f	class:zmq::reaper_t	signature:()
get_mailbox	.\src\reaper.hpp	/^        mailbox_t *get_mailbox ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
get_mailbox	.\src\socket_base.cpp	/^zmq::mailbox_t *zmq::socket_base_t::get_mailbox ()$/;"	f	class:zmq::socket_base_t	signature:()
get_mailbox	.\src\socket_base.hpp	/^        mailbox_t *get_mailbox ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
get_max_tsdu_size	.\src\pgm_socket.cpp	/^size_t zmq::pgm_socket_t::get_max_tsdu_size ()$/;"	f	class:zmq::pgm_socket_t	signature:()
get_max_tsdu_size	.\src\pgm_socket.hpp	/^        size_t get_max_tsdu_size ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
get_new_reconnect_ivl	.\src\ipc_connecter.cpp	/^int zmq::ipc_connecter_t::get_new_reconnect_ivl ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
get_new_reconnect_ivl	.\src\ipc_connecter.hpp	/^        int get_new_reconnect_ivl ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
get_new_reconnect_ivl	.\src\tcp_connecter.cpp	/^int zmq::tcp_connecter_t::get_new_reconnect_ivl ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
get_new_reconnect_ivl	.\src\tcp_connecter.hpp	/^        int get_new_reconnect_ivl ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
get_poller	.\src\io_thread.cpp	/^zmq::poller_t *zmq::io_thread_t::get_poller ()$/;"	f	class:zmq::io_thread_t	signature:()
get_poller	.\src\io_thread.hpp	/^        poller_t *get_poller ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
get_reaper	.\src\ctx.cpp	/^zmq::object_t *zmq::ctx_t::get_reaper ()$/;"	f	class:zmq::ctx_t	signature:()
get_reaper	.\src\ctx.hpp	/^        zmq::object_t *get_reaper ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
get_receiver_fds	.\src\pgm_socket.cpp	/^void zmq::pgm_socket_t::get_receiver_fds (fd_t *receive_fd_, $/;"	f	class:zmq::pgm_socket_t	signature:(fd_t *receive_fd_, fd_t *waiting_pipe_fd_)
get_receiver_fds	.\src\pgm_socket.hpp	/^        void get_receiver_fds (fd_t *receive_fd_, fd_t *waiting_pipe_fd_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(fd_t *receive_fd_, fd_t *waiting_pipe_fd_)
get_rx_timeout	.\src\pgm_socket.cpp	/^long zmq::pgm_socket_t::get_rx_timeout ()$/;"	f	class:zmq::pgm_socket_t	signature:()
get_rx_timeout	.\src\pgm_socket.hpp	/^        long get_rx_timeout ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
get_sender_fds	.\src\pgm_socket.cpp	/^void zmq::pgm_socket_t::get_sender_fds (fd_t *send_fd_, fd_t *receive_fd_, $/;"	f	class:zmq::pgm_socket_t	signature:(fd_t *send_fd_, fd_t *receive_fd_, fd_t *rdata_notify_fd_, fd_t *pending_notify_fd_)
get_sender_fds	.\src\pgm_socket.hpp	/^        void get_sender_fds (fd_t *send_fd_, fd_t *receive_fd_,$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(fd_t *send_fd_, fd_t *receive_fd_, fd_t *rdata_notify_fd_, fd_t *pending_notify_fd_)
get_socket	.\src\session_base.cpp	/^zmq::socket_base_t *zmq::session_base_t::get_socket ()$/;"	f	class:zmq::session_base_t	signature:()
get_socket	.\src\session_base.hpp	/^        socket_base_t *get_socket ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
get_tid	.\src\object.cpp	/^uint32_t zmq::object_t::get_tid ()$/;"	f	class:zmq::object_t	signature:()
get_tid	.\src\object.hpp	/^        uint32_t get_tid ();$/;"	p	class:zmq::object_t	access:public	signature:()
get_tx_timeout	.\src\pgm_socket.cpp	/^long zmq::pgm_socket_t::get_tx_timeout ()$/;"	f	class:zmq::pgm_socket_t	signature:()
get_tx_timeout	.\src\pgm_socket.hpp	/^        long get_tx_timeout ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
get_uint16	.\src\wire.hpp	/^    inline uint16_t get_uint16 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
get_uint32	.\src\wire.hpp	/^    inline uint32_t get_uint32 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
get_uint64	.\src\wire.hpp	/^    inline uint64_t get_uint64 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
get_uint8	.\src\wire.hpp	/^    inline uint8_t get_uint8 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
getsockopt	.\src\options.cpp	/^int zmq::options_t::getsockopt (int option_, void *optval_, size_t *optvallen_)$/;"	f	class:zmq::options_t	signature:(int option_, void *optval_, size_t *optvallen_)
getsockopt	.\src\options.hpp	/^        int getsockopt (int option_, void *optval_, size_t *optvallen_);$/;"	p	struct:zmq::options_t	access:public	signature:(int option_, void *optval_, size_t *optvallen_)
getsockopt	.\src\socket_base.cpp	/^int zmq::socket_base_t::getsockopt (int option_, void *optval_,$/;"	f	class:zmq::socket_base_t	signature:(int option_, void *optval_, size_t *optvallen_)
getsockopt	.\src\socket_base.hpp	/^        int getsockopt (int option_, void *optval_, size_t *optvallen_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(int option_, void *optval_, size_t *optvallen_)
greeting	.\src\stream_engine.hpp	/^        unsigned char greeting [greeting_size];$/;"	m	class:zmq::stream_engine_t	access:private
greeting_bytes_read	.\src\stream_engine.hpp	/^        unsigned int greeting_bytes_read;$/;"	m	class:zmq::stream_engine_t	access:private
greeting_output_buffer	.\src\stream_engine.hpp	/^        unsigned char greeting_output_buffer [greeting_size];$/;"	m	class:zmq::stream_engine_t	access:private
greeting_size	.\src\stream_engine.hpp	/^        const static size_t greeting_size = 12;$/;"	m	class:zmq::stream_engine_t	access:private
handle	.\src\ipc_connecter.hpp	/^        handle_t handle;$/;"	m	class:zmq::ipc_connecter_t	access:private
handle	.\src\ipc_listener.hpp	/^        handle_t handle;$/;"	m	class:zmq::ipc_listener_t	access:private
handle	.\src\pgm_sender.hpp	/^        handle_t handle;$/;"	m	class:zmq::pgm_sender_t	access:private
handle	.\src\socket_base.hpp	/^        poller_t::handle_t handle;$/;"	m	class:zmq::socket_base_t	access:private
handle	.\src\stream_engine.hpp	/^        handle_t handle;$/;"	m	class:zmq::stream_engine_t	access:private
handle	.\src\tcp_connecter.hpp	/^        handle_t handle;$/;"	m	class:zmq::tcp_connecter_t	access:private
handle	.\src\tcp_listener.hpp	/^        handle_t handle;$/;"	m	class:zmq::tcp_listener_t	access:private
handle_t	.\src\devpoll.hpp	/^        typedef fd_t handle_t;$/;"	t	class:zmq::devpoll_t	access:public
handle_t	.\src\epoll.hpp	/^        typedef void* handle_t;$/;"	t	class:zmq::epoll_t	access:public
handle_t	.\src\io_object.hpp	/^        typedef poller_t::handle_t handle_t;$/;"	t	class:zmq::io_object_t	access:protected
handle_t	.\src\kqueue.hpp	/^        typedef void* handle_t;$/;"	t	class:zmq::kqueue_t	access:public
handle_t	.\src\poll.hpp	/^        typedef fd_t handle_t;$/;"	t	class:zmq::poll_t	access:public
handle_t	.\src\select.hpp	/^        typedef fd_t handle_t;$/;"	t	class:zmq::select_t	access:public
handle_valid	.\src\ipc_connecter.hpp	/^        bool handle_valid;$/;"	m	class:zmq::ipc_connecter_t	access:private
handle_valid	.\src\tcp_connecter.hpp	/^        bool handle_valid;$/;"	m	class:zmq::tcp_connecter_t	access:private
handshake	.\src\stream_engine.cpp	/^bool zmq::stream_engine_t::handshake ()$/;"	f	class:zmq::stream_engine_t	signature:()
handshake	.\src\stream_engine.hpp	/^        bool handshake ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
handshaking	.\src\stream_engine.hpp	/^        bool handshaking;$/;"	m	class:zmq::stream_engine_t	access:private
has_file	.\src\ipc_listener.hpp	/^        bool has_file;$/;"	m	class:zmq::ipc_listener_t	access:private
has_in	.\src\fq.cpp	/^bool zmq::fq_t::has_in ()$/;"	f	class:zmq::fq_t	signature:()
has_in	.\src\fq.hpp	/^        bool has_in ();$/;"	p	class:zmq::fq_t	access:public	signature:()
has_in	.\src\socket_base.cpp	/^bool zmq::socket_base_t::has_in ()$/;"	f	class:zmq::socket_base_t	signature:()
has_in	.\src\socket_base.hpp	/^        bool has_in ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
has_linger_timer	.\src\session_base.hpp	/^        bool has_linger_timer;$/;"	m	class:zmq::session_base_t	access:private
has_message	.\src\xsub.hpp	/^        bool has_message;$/;"	m	class:zmq::xsub_t	access:private
has_out	.\src\dist.cpp	/^bool zmq::dist_t::has_out ()$/;"	f	class:zmq::dist_t	signature:()
has_out	.\src\dist.hpp	/^        bool has_out ();$/;"	p	class:zmq::dist_t	access:public	signature:()
has_out	.\src\lb.cpp	/^bool zmq::lb_t::has_out ()$/;"	f	class:zmq::lb_t	signature:()
has_out	.\src\lb.hpp	/^        bool has_out ();$/;"	p	class:zmq::lb_t	access:public	signature:()
has_out	.\src\socket_base.cpp	/^bool zmq::socket_base_t::has_out ()$/;"	f	class:zmq::socket_base_t	signature:()
has_out	.\src\socket_base.hpp	/^        bool has_out ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
has_rx_timer	.\src\pgm_receiver.hpp	/^        bool has_rx_timer;$/;"	m	class:zmq::pgm_receiver_t	access:private
has_rx_timer	.\src\pgm_sender.hpp	/^        bool has_rx_timer;$/;"	m	class:zmq::pgm_sender_t	access:private
has_tx_timer	.\src\pgm_sender.hpp	/^        bool has_tx_timer;$/;"	m	class:zmq::pgm_sender_t	access:private
hiccup	.\src\command.hpp	/^            hiccup,$/;"	e	enum:zmq::command_t::type_t
hiccup	.\src\command.hpp	/^            } hiccup;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon23	access:public
hiccup	.\src\pipe.cpp	/^void zmq::pipe_t::hiccup ()$/;"	f	class:zmq::pipe_t	signature:()
hiccup	.\src\pipe.hpp	/^        void hiccup ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
hiccuped	.\src\pipe.hpp	/^        virtual void hiccuped (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
hiccuped	.\src\session_base.cpp	/^void zmq::session_base_t::hiccuped (pipe_t *)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *)
hiccuped	.\src\session_base.hpp	/^        void hiccuped (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
hiccuped	.\src\socket_base.cpp	/^void zmq::socket_base_t::hiccuped (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
hiccuped	.\src\socket_base.hpp	/^        void hiccuped (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
hint	.\src\msg.hpp	/^            void *hint;$/;"	m	struct:zmq::msg_t::content_t	access:public
hwm	.\src\pipe.hpp	/^        int hwm;$/;"	m	class:zmq::pipe_t	access:private
i_decoder	.\src\i_decoder.hpp	/^    struct i_decoder$/;"	s	namespace:zmq
i_encoder	.\src\i_encoder.hpp	/^    struct i_encoder$/;"	s	namespace:zmq
i_engine	.\src\i_engine.hpp	/^    struct i_engine$/;"	s	namespace:zmq
i_msg_sink	.\src\i_msg_sink.hpp	/^    struct i_msg_sink$/;"	s	namespace:zmq
i_msg_source	.\src\i_msg_source.hpp	/^    struct i_msg_source$/;"	s	namespace:zmq
i_pipe_events	.\src\pipe.hpp	/^    struct i_pipe_events$/;"	s	namespace:zmq
i_poll_events	.\src\i_poll_events.hpp	/^    struct i_poll_events$/;"	s	namespace:zmq
id	.\src\poller_base.hpp	/^            int id;$/;"	m	struct:zmq::poller_base_t::timer_info_t	access:public
identify_peer	.\src\router.cpp	/^bool zmq::router_t::identify_peer (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
identify_peer	.\src\router.hpp	/^        bool identify_peer (pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:private	signature:(pipe_t *pipe_)
identity	.\src\msg.hpp	/^            identity = 64,$/;"	e	enum:zmq::msg_t::__anon36
identity	.\src\options.hpp	/^        unsigned char identity [256];$/;"	m	struct:zmq::options_t	access:public
identity	.\src\pipe.hpp	/^        blob_t identity;$/;"	m	class:zmq::pipe_t	access:private
identity	.\src\req.hpp	/^            identity,$/;"	e	enum:zmq::req_session_t::__anon47
identity_received	.\src\session_base.hpp	/^        bool identity_received;$/;"	m	class:zmq::session_base_t	access:private
identity_sent	.\src\router.hpp	/^        bool identity_sent;$/;"	m	class:zmq::router_t	access:private
identity_sent	.\src\session_base.hpp	/^        bool identity_sent;$/;"	m	class:zmq::session_base_t	access:private
identity_size	.\src\options.hpp	/^        unsigned char identity_size;$/;"	m	struct:zmq::options_t	access:public
in_active	.\src\pipe.hpp	/^        bool in_active;$/;"	m	class:zmq::pipe_t	access:private
in_batch_size	.\src\config.hpp	/^        in_batch_size = 8192,$/;"	e	enum:zmq::__anon32
in_event	.\src\i_poll_events.hpp	/^        virtual void in_event () = 0;$/;"	p	struct:zmq::i_poll_events	access:public	signature:()
in_event	.\src\io_object.cpp	/^void zmq::io_object_t::in_event ()$/;"	f	class:zmq::io_object_t	signature:()
in_event	.\src\io_object.hpp	/^        void in_event ();$/;"	p	class:zmq::io_object_t	access:protected	signature:()
in_event	.\src\io_thread.cpp	/^void zmq::io_thread_t::in_event ()$/;"	f	class:zmq::io_thread_t	signature:()
in_event	.\src\io_thread.hpp	/^        void in_event ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
in_event	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::in_event ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
in_event	.\src\ipc_connecter.hpp	/^        void in_event ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
in_event	.\src\ipc_listener.cpp	/^void zmq::ipc_listener_t::in_event ()$/;"	f	class:zmq::ipc_listener_t	signature:()
in_event	.\src\ipc_listener.hpp	/^        void in_event ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
in_event	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::in_event ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
in_event	.\src\pgm_receiver.hpp	/^        void in_event ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
in_event	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::in_event ()$/;"	f	class:zmq::pgm_sender_t	signature:()
in_event	.\src\pgm_sender.hpp	/^        void in_event ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
in_event	.\src\reaper.cpp	/^void zmq::reaper_t::in_event ()$/;"	f	class:zmq::reaper_t	signature:()
in_event	.\src\reaper.hpp	/^        void in_event ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
in_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::in_event ()$/;"	f	class:zmq::socket_base_t	signature:()
in_event	.\src\socket_base.hpp	/^        void in_event ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
in_event	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::in_event ()$/;"	f	class:zmq::stream_engine_t	signature:()
in_event	.\src\stream_engine.hpp	/^        void in_event ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
in_event	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::in_event ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
in_event	.\src\tcp_connecter.hpp	/^        void in_event ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
in_event	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::in_event ()$/;"	f	class:zmq::tcp_listener_t	signature:()
in_event	.\src\tcp_listener.hpp	/^        void in_event ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
in_progress	.\src\decoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::decoder_t	access:private
in_progress	.\src\encoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::encoder_t	access:private
in_progress	.\src\v1_decoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::v1_decoder_t	access:private
in_progress	.\src\v1_encoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::v1_encoder_t	access:private
inbound_poll_rate	.\src\config.hpp	/^        inbound_poll_rate = 100,$/;"	e	enum:zmq::__anon32
inc_seqnum	.\src\own.cpp	/^void zmq::own_t::inc_seqnum ()$/;"	f	class:zmq::own_t	signature:()
inc_seqnum	.\src\own.hpp	/^        void inc_seqnum ();$/;"	p	class:zmq::own_t	access:public	signature:()
incomplete_in	.\src\session_base.hpp	/^        bool incomplete_in;$/;"	m	class:zmq::session_base_t	access:private
index	.\src\array.hpp	/^        inline size_type index (T *item_)$/;"	f	class:zmq::array_t	access:public	signature:(T *item_)
index	.\src\poll.hpp	/^            fd_t index;$/;"	m	struct:zmq::poll_t::fd_entry_t	access:public
init	.\src\msg.cpp	/^int zmq::msg_t::init ()$/;"	f	class:zmq::msg_t	signature:()
init	.\src\msg.hpp	/^        int init ();$/;"	p	class:zmq::msg_t	access:public	signature:()
init	.\src\pgm_receiver.cpp	/^int zmq::pgm_receiver_t::init (bool udp_encapsulation_, const char *network_)$/;"	f	class:zmq::pgm_receiver_t	signature:(bool udp_encapsulation_, const char *network_)
init	.\src\pgm_receiver.hpp	/^        int init (bool udp_encapsulation_, const char *network_);$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(bool udp_encapsulation_, const char *network_)
init	.\src\pgm_sender.cpp	/^int zmq::pgm_sender_t::init (bool udp_encapsulation_, const char *network_)$/;"	f	class:zmq::pgm_sender_t	signature:(bool udp_encapsulation_, const char *network_)
init	.\src\pgm_sender.hpp	/^        int init (bool udp_encapsulation_, const char *network_);$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(bool udp_encapsulation_, const char *network_)
init	.\src\pgm_socket.cpp	/^int zmq::pgm_socket_t::init (bool udp_encapsulation_, const char *network_)$/;"	f	class:zmq::pgm_socket_t	signature:(bool udp_encapsulation_, const char *network_)
init	.\src\pgm_socket.hpp	/^        int init (bool udp_encapsulation_, const char *network_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(bool udp_encapsulation_, const char *network_)
init_address	.\src\pgm_socket.cpp	/^int zmq::pgm_socket_t::init_address (const char *network_,$/;"	f	class:zmq::pgm_socket_t	signature:(const char *network_, struct pgm_addrinfo_t **res, uint16_t *port_number)
init_address	.\src\pgm_socket.hpp	/^        static int init_address(const char *network_, struct pgm_addrinfo_t **addr, uint16_t *port_number);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(const char *network_, struct pgm_addrinfo_t **addr, uint16_t *port_number)
init_data	.\src\msg.cpp	/^int zmq::msg_t::init_data (void *data_, size_t size_, msg_free_fn *ffn_,$/;"	f	class:zmq::msg_t	signature:(void *data_, size_t size_, msg_free_fn *ffn_, void *hint_)
init_data	.\src\msg.hpp	/^        int init_data (void *data_, size_t size_, msg_free_fn *ffn_,$/;"	p	class:zmq::msg_t	access:public	signature:(void *data_, size_t size_, msg_free_fn *ffn_, void *hint_)
init_delimiter	.\src\msg.cpp	/^int zmq::msg_t::init_delimiter ()$/;"	f	class:zmq::msg_t	signature:()
init_delimiter	.\src\msg.hpp	/^        int init_delimiter ();$/;"	p	class:zmq::msg_t	access:public	signature:()
init_size	.\src\msg.cpp	/^int zmq::msg_t::init_size (size_t size_)$/;"	f	class:zmq::msg_t	signature:(size_t size_)
init_size	.\src\msg.hpp	/^        int init_size (size_t size_);$/;"	p	class:zmq::msg_t	access:public	signature:(size_t size_)
inpipe	.\src\pipe.hpp	/^        upipe_t *inpipe;$/;"	m	class:zmq::pipe_t	access:private
inpos	.\src\stream_engine.hpp	/^        unsigned char *inpos;$/;"	m	class:zmq::stream_engine_t	access:private
inprocs	.\src\socket_base.hpp	/^        inprocs_t inprocs;$/;"	m	class:zmq::socket_base_t	access:private
inprocs_t	.\src\socket_base.hpp	/^        typedef std::multimap <std::string, pipe_t *> inprocs_t;$/;"	t	class:zmq::socket_base_t	access:private
insize	.\src\stream_engine.hpp	/^        size_t insize;$/;"	m	class:zmq::stream_engine_t	access:private
int16_t	.\src\stdint.hpp	/^typedef __int16 int16_t;$/;"	t
int32_t	.\src\stdint.hpp	/^typedef __int32 int32_t;$/;"	t
int64_t	.\src\stdint.hpp	/^typedef __int64 int64_t;$/;"	t
int8_t	.\src\stdint.hpp	/^typedef __int8 int8_t;$/;"	t
int_type	.\src\blob.hpp	/^      typedef unsigned long  	int_type;$/;"	t	struct:std::char_traits	access:public
integer_t	.\src\atomic_counter.hpp	/^        typedef uint32_t integer_t;$/;"	t	class:zmq::atomic_counter_t	access:public
interval	.\include\zmq.h	/^        int interval;$/;"	m	struct:__anon1::__anon2::__anon5	access:public
io_enabled	.\src\stream_engine.hpp	/^        bool io_enabled;$/;"	m	class:zmq::stream_engine_t	access:private
io_object_t	.\src\io_object.cpp	/^zmq::io_object_t::io_object_t (io_thread_t *io_thread_) :$/;"	f	class:zmq::io_object_t	signature:(io_thread_t *io_thread_)
io_object_t	.\src\io_object.hpp	/^        io_object_t (const io_object_t&);$/;"	p	class:zmq::io_object_t	access:private	signature:(const io_object_t&)
io_object_t	.\src\io_object.hpp	/^        io_object_t (zmq::io_thread_t *io_thread_ = NULL);$/;"	p	class:zmq::io_object_t	access:public	signature:(zmq::io_thread_t *io_thread_ = NULL)
io_object_t	.\src\io_object.hpp	/^    class io_object_t : public i_poll_events$/;"	c	namespace:zmq	inherits:i_poll_events
io_thread	.\src\session_base.hpp	/^        zmq::io_thread_t *io_thread;$/;"	m	class:zmq::session_base_t	access:private
io_thread_count	.\src\ctx.hpp	/^        int io_thread_count;$/;"	m	class:zmq::ctx_t	access:private
io_thread_t	.\src\io_thread.cpp	/^zmq::io_thread_t::io_thread_t (ctx_t *ctx_, uint32_t tid_) :$/;"	f	class:zmq::io_thread_t	signature:(ctx_t *ctx_, uint32_t tid_)
io_thread_t	.\src\io_thread.hpp	/^        io_thread_t (const io_thread_t&);$/;"	p	class:zmq::io_thread_t	access:private	signature:(const io_thread_t&)
io_thread_t	.\src\io_thread.hpp	/^        io_thread_t (zmq::ctx_t *ctx_, uint32_t tid_);$/;"	p	class:zmq::io_thread_t	access:public	signature:(zmq::ctx_t *ctx_, uint32_t tid_)
io_thread_t	.\src\io_thread.hpp	/^    class io_thread_t : public object_t, public i_poll_events$/;"	c	namespace:zmq	inherits:object_t,i_poll_events
io_threads	.\src\ctx.hpp	/^        io_threads_t io_threads;$/;"	m	class:zmq::ctx_t	access:private
io_threads_t	.\src\ctx.hpp	/^        typedef std::vector <zmq::io_thread_t*> io_threads_t;$/;"	t	class:zmq::ctx_t	access:private
iov_base	.\src\zmq.cpp	/^    void *iov_base;$/;"	m	struct:iovec	file:	access:public
iov_len	.\src\zmq.cpp	/^    size_t iov_len;$/;"	m	struct:iovec	file:	access:public
iovec	.\src\zmq.cpp	/^struct iovec {$/;"	s	file:
iovec::iov_base	.\src\zmq.cpp	/^    void *iov_base;$/;"	m	struct:iovec	file:	access:public
iovec::iov_len	.\src\zmq.cpp	/^    size_t iov_len;$/;"	m	struct:iovec	file:	access:public
ipc_addr	.\src\address.hpp	/^            ipc_address_t *ipc_addr;$/;"	m	union:zmq::address_t::__anon14	access:public
ipc_address_t	.\src\ipc_address.cpp	/^zmq::ipc_address_t::ipc_address_t ()$/;"	f	class:zmq::ipc_address_t	signature:()
ipc_address_t	.\src\ipc_address.cpp	/^zmq::ipc_address_t::ipc_address_t (const sockaddr *sa, socklen_t sa_len)$/;"	f	class:zmq::ipc_address_t	signature:(const sockaddr *sa, socklen_t sa_len)
ipc_address_t	.\src\ipc_address.hpp	/^        ipc_address_t ();$/;"	p	class:zmq::ipc_address_t	access:public	signature:()
ipc_address_t	.\src\ipc_address.hpp	/^        ipc_address_t (const ipc_address_t&);$/;"	p	class:zmq::ipc_address_t	access:private	signature:(const ipc_address_t&)
ipc_address_t	.\src\ipc_address.hpp	/^        ipc_address_t (const sockaddr *sa, socklen_t sa_len);$/;"	p	class:zmq::ipc_address_t	access:public	signature:(const sockaddr *sa, socklen_t sa_len)
ipc_address_t	.\src\ipc_address.hpp	/^    class ipc_address_t$/;"	c	namespace:zmq
ipc_connecter_t	.\src\ipc_connecter.cpp	/^zmq::ipc_connecter_t::ipc_connecter_t (class io_thread_t *io_thread_,$/;"	f	class:zmq::ipc_connecter_t	signature:(class io_thread_t *io_thread_, class session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
ipc_connecter_t	.\src\ipc_connecter.hpp	/^        ipc_connecter_t (const ipc_connecter_t&);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(const ipc_connecter_t&)
ipc_connecter_t	.\src\ipc_connecter.hpp	/^        ipc_connecter_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::ipc_connecter_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
ipc_connecter_t	.\src\ipc_connecter.hpp	/^    class ipc_connecter_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
ipc_listener_t	.\src\ipc_listener.cpp	/^zmq::ipc_listener_t::ipc_listener_t (io_thread_t *io_thread_,$/;"	f	class:zmq::ipc_listener_t	signature:(io_thread_t *io_thread_, socket_base_t *socket_, const options_t &options_)
ipc_listener_t	.\src\ipc_listener.hpp	/^        ipc_listener_t (const ipc_listener_t&);$/;"	p	class:zmq::ipc_listener_t	access:private	signature:(const ipc_listener_t&)
ipc_listener_t	.\src\ipc_listener.hpp	/^        ipc_listener_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::ipc_listener_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::socket_base_t *socket_, const options_t &options_)
ipc_listener_t	.\src\ipc_listener.hpp	/^    class ipc_listener_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
ipv4	.\src\tcp_address.hpp	/^            sockaddr_in ipv4;$/;"	m	union:zmq::tcp_address_t::__anon49	access:public
ipv4only	.\src\options.hpp	/^        int ipv4only;$/;"	m	struct:zmq::options_t	access:public
ipv6	.\src\tcp_address.hpp	/^            sockaddr_in6 ipv6;$/;"	m	union:zmq::tcp_address_t::__anon49	access:public
is_delimiter	.\src\msg.cpp	/^bool zmq::msg_t::is_delimiter ()$/;"	f	class:zmq::msg_t	signature:()
is_delimiter	.\src\msg.hpp	/^        bool is_delimiter ();$/;"	p	class:zmq::msg_t	access:public	signature:()
is_delimiter	.\src\pipe.cpp	/^bool zmq::pipe_t::is_delimiter (msg_t &msg_)$/;"	f	class:zmq::pipe_t	signature:(msg_t &msg_)
is_delimiter	.\src\pipe.hpp	/^        static bool is_delimiter (msg_t &msg_);$/;"	p	class:zmq::pipe_t	access:private	signature:(msg_t &msg_)
is_identity	.\src\msg.cpp	/^bool zmq::msg_t::is_identity () const$/;"	f	class:zmq::msg_t	signature:() const
is_identity	.\src\msg.hpp	/^        bool is_identity () const;$/;"	p	class:zmq::msg_t	access:public	signature:() const
is_redundant	.\src\mtrie.cpp	/^bool zmq::mtrie_t::is_redundant () const$/;"	f	class:zmq::mtrie_t	signature:() const
is_redundant	.\src\mtrie.hpp	/^        bool is_redundant () const;$/;"	p	class:zmq::mtrie_t	access:private	signature:() const
is_redundant	.\src\trie.cpp	/^bool zmq::trie_t::is_redundant () const$/;"	f	class:zmq::trie_t	signature:() const
is_redundant	.\src\trie.hpp	/^        bool is_redundant () const;$/;"	p	class:zmq::trie_t	access:private	signature:() const
is_retired_fd	.\src\select.cpp	/^bool zmq::select_t::is_retired_fd (const fd_entry_t &entry)$/;"	f	class:zmq::select_t	signature:(const fd_entry_t &entry)
is_retired_fd	.\src\select.hpp	/^        static bool is_retired_fd (const fd_entry_t &entry);$/;"	p	class:zmq::select_t	access:private	signature:(const fd_entry_t &entry)
is_terminating	.\src\own.cpp	/^bool zmq::own_t::is_terminating ()$/;"	f	class:zmq::own_t	signature:()
is_terminating	.\src\own.hpp	/^        bool is_terminating ();$/;"	p	class:zmq::own_t	access:protected	signature:()
is_vsm	.\src\msg.cpp	/^bool zmq::msg_t::is_vsm ()$/;"	f	class:zmq::msg_t	signature:()
is_vsm	.\src\msg.hpp	/^        bool is_vsm ();$/;"	p	class:zmq::msg_t	access:public	signature:()
item_t	.\src\array.hpp	/^        typedef array_item_t <ID> item_t;$/;"	t	class:zmq::array_t	access:private
items	.\src\array.hpp	/^        items_t items;$/;"	m	class:zmq::array_t	access:private
items_t	.\src\array.hpp	/^        typedef std::vector <T*> items_t;$/;"	t	class:zmq::array_t	access:private
joined	.\src\pgm_receiver.hpp	/^            bool joined;$/;"	m	struct:zmq::pgm_receiver_t::peer_info_t	access:public
kevent_add	.\src\kqueue.cpp	/^void zmq::kqueue_t::kevent_add (fd_t fd_, short filter_, void *udata_)$/;"	f	class:zmq::kqueue_t	signature:(fd_t fd_, short filter_, void *udata_)
kevent_add	.\src\kqueue.hpp	/^        void kevent_add (fd_t fd_, short filter_, void *udata_);$/;"	p	class:zmq::kqueue_t	access:private	signature:(fd_t fd_, short filter_, void *udata_)
kevent_delete	.\src\kqueue.cpp	/^void zmq::kqueue_t::kevent_delete (fd_t fd_, short filter_)$/;"	f	class:zmq::kqueue_t	signature:(fd_t fd_, short filter_)
kevent_delete	.\src\kqueue.hpp	/^        void kevent_delete (fd_t fd_, short filter_);$/;"	p	class:zmq::kqueue_t	access:private	signature:(fd_t fd_, short filter_)
kevent_udata_t	.\src\kqueue.cpp	42;"	d	file:
kevent_udata_t	.\src\kqueue.cpp	44;"	d	file:
kqueue_fd	.\src\kqueue.hpp	/^        fd_t kqueue_fd;$/;"	m	class:zmq::kqueue_t	access:private
kqueue_t	.\src\kqueue.cpp	/^zmq::kqueue_t::kqueue_t () :$/;"	f	class:zmq::kqueue_t	signature:()
kqueue_t	.\src\kqueue.hpp	/^        kqueue_t ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
kqueue_t	.\src\kqueue.hpp	/^        kqueue_t (const kqueue_t&);$/;"	p	class:zmq::kqueue_t	access:private	signature:(const kqueue_t&)
kqueue_t	.\src\kqueue.hpp	/^    class kqueue_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
large_flag	.\src\v1_protocol.hpp	/^            large_flag = 2$/;"	e	enum:zmq::v1_protocol_t::__anon52
last_endpoint	.\src\options.hpp	/^        std::string last_endpoint;$/;"	m	struct:zmq::options_t	access:public
last_rx_status	.\src\pgm_socket.hpp	/^        int last_rx_status, last_tx_status;$/;"	m	class:zmq::pgm_socket_t	access:private
last_time	.\src\clock.hpp	/^        uint64_t last_time;$/;"	m	class:zmq::clock_t	access:private
last_tsc	.\src\clock.hpp	/^        uint64_t last_tsc;$/;"	m	class:zmq::clock_t	access:private
last_tsc	.\src\socket_base.hpp	/^        uint64_t last_tsc;$/;"	m	class:zmq::socket_base_t	access:private
last_tx_status	.\src\pgm_socket.hpp	/^        int last_rx_status, last_tx_status;$/;"	m	class:zmq::pgm_socket_t	access:private
launch_child	.\src\own.cpp	/^void zmq::own_t::launch_child (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
launch_child	.\src\own.hpp	/^        void launch_child (own_t *object_);$/;"	p	class:zmq::own_t	access:protected	signature:(own_t *object_)
lb	.\src\dealer.hpp	/^        lb_t lb;$/;"	m	class:zmq::dealer_t	access:private
lb	.\src\push.hpp	/^        lb_t lb;$/;"	m	class:zmq::push_t	access:private
lb_t	.\src\lb.cpp	/^zmq::lb_t::lb_t () :$/;"	f	class:zmq::lb_t	signature:()
lb_t	.\src\lb.hpp	/^        lb_t ();$/;"	p	class:zmq::lb_t	access:public	signature:()
lb_t	.\src\lb.hpp	/^        lb_t (const lb_t&);$/;"	p	class:zmq::lb_t	access:private	signature:(const lb_t&)
lb_t	.\src\lb.hpp	/^    class lb_t$/;"	c	namespace:zmq
length	.\src\blob.hpp	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type* __s)
likely	.\src\likely.hpp	25;"	d
likely	.\src\likely.hpp	28;"	d
linger	.\src\command.hpp	/^                int linger;$/;"	m	struct:zmq::command_t::__anon15::__anon27	access:public
linger	.\src\options.hpp	/^        int linger;$/;"	m	struct:zmq::options_t	access:public
linger_timer_id	.\src\session_base.hpp	/^        enum {linger_timer_id = 0x20};$/;"	e	enum:zmq::session_base_t::__anon48
listening	.\include\zmq.h	/^    } listening;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::__anon6	access:public
live_nodes	.\src\mtrie.hpp	/^        unsigned short live_nodes;$/;"	m	class:zmq::mtrie_t	access:private
live_nodes	.\src\trie.hpp	/^        unsigned short live_nodes;$/;"	m	class:zmq::trie_t	access:private
lmsg	.\src\msg.hpp	/^            } lmsg;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon41	access:public
load	.\src\poller_base.hpp	/^        atomic_counter_t load;$/;"	m	class:zmq::poller_base_t	access:private
lock	.\src\mutex.hpp	/^        inline void lock ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
lock	.\src\socket_base.hpp	/^        void lock();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
log	.\src\object.hpp	/^        void log (const char *format_, ...);$/;"	p	class:zmq::object_t	access:protected	signature:(const char *format_, ...)
loop	.\src\devpoll.cpp	/^void zmq::devpoll_t::loop ()$/;"	f	class:zmq::devpoll_t	signature:()
loop	.\src\devpoll.hpp	/^        void loop ();$/;"	p	class:zmq::devpoll_t	access:private	signature:()
loop	.\src\epoll.cpp	/^void zmq::epoll_t::loop ()$/;"	f	class:zmq::epoll_t	signature:()
loop	.\src\epoll.hpp	/^        void loop ();$/;"	p	class:zmq::epoll_t	access:private	signature:()
loop	.\src\kqueue.cpp	/^void zmq::kqueue_t::loop ()$/;"	f	class:zmq::kqueue_t	signature:()
loop	.\src\kqueue.hpp	/^        void loop ();$/;"	p	class:zmq::kqueue_t	access:private	signature:()
loop	.\src\poll.cpp	/^void zmq::poll_t::loop ()$/;"	f	class:zmq::poll_t	signature:()
loop	.\src\poll.hpp	/^        void loop ();$/;"	p	class:zmq::poll_t	access:private	signature:()
loop	.\src\select.cpp	/^void zmq::select_t::loop ()$/;"	f	class:zmq::select_t	signature:()
loop	.\src\select.hpp	/^        void loop ();$/;"	p	class:zmq::select_t	access:private	signature:()
lt	.\src\blob.hpp	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type& __c1, const char_type& __c2)
lwm	.\src\pipe.hpp	/^        int lwm;$/;"	m	class:zmq::pipe_t	access:private
mailbox	.\src\io_thread.hpp	/^        mailbox_t mailbox;$/;"	m	class:zmq::io_thread_t	access:private
mailbox	.\src\reaper.hpp	/^        mailbox_t mailbox;$/;"	m	class:zmq::reaper_t	access:private
mailbox	.\src\socket_base.hpp	/^        mailbox_t mailbox;$/;"	m	class:zmq::socket_base_t	access:private
mailbox_handle	.\src\io_thread.hpp	/^        poller_t::handle_t mailbox_handle;$/;"	m	class:zmq::io_thread_t	access:private
mailbox_handle	.\src\reaper.hpp	/^        poller_t::handle_t mailbox_handle;$/;"	m	class:zmq::reaper_t	access:private
mailbox_t	.\src\mailbox.cpp	/^zmq::mailbox_t::mailbox_t ()$/;"	f	class:zmq::mailbox_t	signature:()
mailbox_t	.\src\mailbox.hpp	/^        mailbox_t ();$/;"	p	class:zmq::mailbox_t	access:public	signature:()
mailbox_t	.\src\mailbox.hpp	/^        mailbox_t (const mailbox_t&);$/;"	p	class:zmq::mailbox_t	access:private	signature:(const mailbox_t&)
mailbox_t	.\src\mailbox.hpp	/^    class mailbox_t$/;"	c	namespace:zmq
make_fdpair	.\src\signaler.cpp	/^int zmq::signaler_t::make_fdpair (fd_t *r_, fd_t *w_)$/;"	f	class:zmq::signaler_t	signature:(fd_t *r_, fd_t *w_)
make_fdpair	.\src\signaler.hpp	/^        static int make_fdpair (fd_t *r_, fd_t *w_);$/;"	p	class:zmq::signaler_t	access:private	signature:(fd_t *r_, fd_t *w_)
mandatory	.\src\router.hpp	/^        bool mandatory;$/;"	m	class:zmq::router_t	access:private
mark_as_matching	.\src\xpub.cpp	/^void zmq::xpub_t::mark_as_matching (pipe_t *pipe_, void *arg_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_, void *arg_)
mark_as_matching	.\src\xpub.hpp	/^        static void mark_as_matching (zmq::pipe_t *pipe_, void *arg_);$/;"	p	class:zmq::xpub_t	access:private	signature:(zmq::pipe_t *pipe_, void *arg_)
mask	.\src\tcp_address.cpp	/^int zmq::tcp_address_mask_t::mask () const$/;"	f	class:zmq::tcp_address_mask_t	signature:() const
mask	.\src\tcp_address.hpp	/^        int mask () const;$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:() const
match	.\src\dist.cpp	/^void zmq::dist_t::match (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
match	.\src\dist.hpp	/^        void match (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
match	.\src\mtrie.cpp	/^void zmq::mtrie_t::match (unsigned char *data_, size_t size_,$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *data_, size_t size_, void (*func_) (pipe_t *pipe_, void *arg_), void *arg_)
match	.\src\mtrie.hpp	/^        void match (unsigned char *data_, size_t size_,$/;"	p	class:zmq::mtrie_t	access:public	signature:(unsigned char *data_, size_t size_, void (*func_) (zmq::pipe_t *pipe_, void *arg_), void *arg_)
match	.\src\xsub.cpp	/^bool zmq::xsub_t::match (msg_t *msg_)$/;"	f	class:zmq::xsub_t	signature:(msg_t *msg_)
match	.\src\xsub.hpp	/^        bool match (zmq::msg_t *msg_);$/;"	p	class:zmq::xsub_t	access:private	signature:(zmq::msg_t *msg_)
match_address	.\src\tcp_address.cpp	/^bool zmq::tcp_address_mask_t::match_address (const struct sockaddr *ss, const socklen_t ss_len) const$/;"	f	class:zmq::tcp_address_mask_t	signature:(const struct sockaddr *ss, const socklen_t ss_len) const
match_address	.\src\tcp_address.hpp	/^        bool match_address (const struct sockaddr *ss, const socklen_t ss_len) const;$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:(const struct sockaddr *ss, const socklen_t ss_len) const
matching	.\src\dist.hpp	/^        pipes_t::size_type matching;$/;"	m	class:zmq::dist_t	access:private
max_command_delay	.\src\config.hpp	/^        max_command_delay = 3000000,$/;"	e	enum:zmq::__anon32
max_io_events	.\src\config.hpp	/^        max_io_events = 256,$/;"	e	enum:zmq::__anon32
max_socket_id	.\src\ctx.cpp	/^zmq::atomic_counter_t zmq::ctx_t::max_socket_id;$/;"	m	class:zmq::ctx_t	file:
max_socket_id	.\src\ctx.hpp	/^        static atomic_counter_t max_socket_id;$/;"	m	class:zmq::ctx_t	access:private
max_sockets	.\src\ctx.hpp	/^        int max_sockets;$/;"	m	class:zmq::ctx_t	access:private
max_vsm_size	.\src\msg.hpp	/^        enum {max_vsm_size = 29};$/;"	e	enum:zmq::msg_t::__anon37
max_wm_delta	.\src\config.hpp	/^        max_wm_delta = 1024,$/;"	e	enum:zmq::__anon32
maxfd	.\src\select.hpp	/^        fd_t maxfd;$/;"	m	class:zmq::select_t	access:private
maxmsgsize	.\src\decoder.hpp	/^        int64_t maxmsgsize;$/;"	m	class:zmq::decoder_t	access:private
maxmsgsize	.\src\options.hpp	/^        int64_t maxmsgsize;$/;"	m	struct:zmq::options_t	access:public
maxmsgsize	.\src\v1_decoder.hpp	/^        const int64_t maxmsgsize;$/;"	m	class:zmq::v1_decoder_t	access:private
message	.\src\xsub.hpp	/^        msg_t message;$/;"	m	class:zmq::xsub_t	access:private
message_begins	.\src\req.hpp	/^        bool message_begins;$/;"	m	class:zmq::req_t	access:private
message_pipe_granularity	.\src\config.hpp	/^        message_pipe_granularity = 256,$/;"	e	enum:zmq::__anon32
message_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::message_ready ()$/;"	f	class:zmq::decoder_t	signature:()
message_ready	.\src\decoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
message_ready	.\src\encoder.cpp	/^bool zmq::encoder_t::message_ready ()$/;"	f	class:zmq::encoder_t	signature:()
message_ready	.\src\encoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::encoder_t	access:private	signature:()
message_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::message_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
message_ready	.\src\v1_decoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
message_ready	.\src\v1_encoder.cpp	/^bool zmq::v1_encoder_t::message_ready ()$/;"	f	class:zmq::v1_encoder_t	signature:()
message_ready	.\src\v1_encoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::v1_encoder_t	access:private	signature:()
message_ready_size	.\src\decoder.hpp	/^        inline bool message_ready_size (size_t msg_sz)$/;"	f	class:zmq::decoder_base_t	access:public	signature:(size_t msg_sz)
min	.\src\mtrie.hpp	/^        unsigned char min;$/;"	m	class:zmq::mtrie_t	access:private
min	.\src\trie.hpp	/^        unsigned char min;$/;"	m	class:zmq::trie_t	access:private
monitor	.\src\socket_base.cpp	/^int zmq::socket_base_t::monitor (const char *addr_, int events_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_, int events_)
monitor	.\src\socket_base.hpp	/^        int monitor(const char *endpoint_, int events_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *endpoint_, int events_)
monitor_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::monitor_event (zmq_event_t event_)$/;"	f	class:zmq::socket_base_t	signature:(zmq_event_t event_)
monitor_event	.\src\socket_base.hpp	/^        void monitor_event (zmq_event_t data_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq_event_t data_)
monitor_events	.\src\socket_base.hpp	/^        int monitor_events;$/;"	m	class:zmq::socket_base_t	access:private
monitor_socket	.\src\socket_base.hpp	/^        void *monitor_socket;$/;"	m	class:zmq::socket_base_t	access:private
more	.\src\dist.hpp	/^        bool more;$/;"	m	class:zmq::dist_t	access:private
more	.\src\fq.hpp	/^        bool more;$/;"	m	class:zmq::fq_t	access:private
more	.\src\lb.hpp	/^        bool more;$/;"	m	class:zmq::lb_t	access:private
more	.\src\msg.hpp	/^            more = 1,$/;"	e	enum:zmq::msg_t::__anon36
more	.\src\xpub.hpp	/^        bool more;$/;"	m	class:zmq::xpub_t	access:private
more	.\src\xsub.hpp	/^        bool more;$/;"	m	class:zmq::xsub_t	access:private
more_flag	.\src\v1_protocol.hpp	/^            more_flag = 1,$/;"	e	enum:zmq::v1_protocol_t::__anon52
more_in	.\src\router.hpp	/^        bool more_in;$/;"	m	class:zmq::router_t	access:private
more_out	.\src\router.hpp	/^        bool more_out;$/;"	m	class:zmq::router_t	access:private
move	.\src\blob.hpp	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	access:public	signature:(char_type* __s1, const char_type* __s2, size_t __n)
move	.\src\msg.cpp	/^int zmq::msg_t::move (msg_t &src_)$/;"	f	class:zmq::msg_t	signature:(msg_t &src_)
move	.\src\msg.hpp	/^        int move (msg_t &src_);$/;"	p	class:zmq::msg_t	access:public	signature:(msg_t &src_)
mru_decoder	.\src\pgm_receiver.hpp	/^        decoder_t *mru_decoder;$/;"	m	class:zmq::pgm_receiver_t	access:private
msg_flags	.\src\v1_decoder.hpp	/^        unsigned char msg_flags;$/;"	m	class:zmq::v1_decoder_t	access:private
msg_free_fn	.\src\msg.hpp	/^    typedef void (msg_free_fn) (void *data, void *hint);$/;"	t
msg_sink	.\src\decoder.hpp	/^        i_msg_sink *msg_sink;$/;"	m	class:zmq::decoder_t	access:private
msg_sink	.\src\v1_decoder.hpp	/^        i_msg_sink *msg_sink;$/;"	m	class:zmq::v1_decoder_t	access:private
msg_source	.\src\encoder.hpp	/^        i_msg_source *msg_source;$/;"	m	class:zmq::encoder_t	access:private
msg_source	.\src\v1_encoder.hpp	/^        i_msg_source *msg_source;$/;"	m	class:zmq::v1_encoder_t	access:private
msg_t	.\src\msg.hpp	/^    class msg_t$/;"	c	namespace:zmq
msgs_read	.\src\command.hpp	/^                uint64_t msgs_read;$/;"	m	struct:zmq::command_t::__anon15::__anon22	access:public
msgs_read	.\src\pipe.hpp	/^        uint64_t msgs_read;$/;"	m	class:zmq::pipe_t	access:private
msgs_written	.\src\pipe.hpp	/^        uint64_t msgs_written;$/;"	m	class:zmq::pipe_t	access:private
mtrie_t	.\src\mtrie.cpp	/^zmq::mtrie_t::mtrie_t () :$/;"	f	class:zmq::mtrie_t	signature:()
mtrie_t	.\src\mtrie.hpp	/^        mtrie_t ();$/;"	p	class:zmq::mtrie_t	access:public	signature:()
mtrie_t	.\src\mtrie.hpp	/^        mtrie_t (const mtrie_t&);$/;"	p	class:zmq::mtrie_t	access:private	signature:(const mtrie_t&)
mtrie_t	.\src\mtrie.hpp	/^    class mtrie_t$/;"	c	namespace:zmq
multicast_hops	.\src\options.hpp	/^        int multicast_hops;$/;"	m	struct:zmq::options_t	access:public
mutex_t	.\src\mutex.hpp	/^        inline mutex_t ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
mutex_t	.\src\mutex.hpp	/^        mutex_t (const mutex_t&);$/;"	p	class:zmq::mutex_t	access:private	signature:(const mutex_t&)
mutex_t	.\src\mutex.hpp	/^    class mutex_t$/;"	c	namespace:zmq
nbytes_processed	.\src\pgm_socket.hpp	/^        size_t nbytes_processed;$/;"	m	class:zmq::pgm_socket_t	access:private
nbytes_rec	.\src\pgm_socket.hpp	/^        size_t nbytes_rec;$/;"	m	class:zmq::pgm_socket_t	access:private
next	.\src\decoder.hpp	/^        step_t next;$/;"	m	class:zmq::decoder_base_t	access:private
next	.\src\encoder.hpp	/^        step_t next;$/;"	m	class:zmq::encoder_base_t	access:private
next	.\src\mtrie.hpp	/^        } next;$/;"	m	class:zmq::mtrie_t	typeref:union:zmq::mtrie_t::__anon43	access:private
next	.\src\trie.hpp	/^        } next;$/;"	m	class:zmq::trie_t	typeref:union:zmq::trie_t::__anon51	access:private
next	.\src\yqueue.hpp	/^             chunk_t *next;$/;"	m	struct:zmq::yqueue_t::chunk_t	access:public
next_peer_id	.\src\router.hpp	/^        uint32_t next_peer_id;$/;"	m	class:zmq::router_t	access:private
next_step	.\src\decoder.hpp	/^        inline void next_step (void *read_pos_, size_t to_read_,$/;"	f	class:zmq::decoder_base_t	access:protected	signature:(void *read_pos_, size_t to_read_, step_t next_)
next_step	.\src\encoder.hpp	/^        inline void next_step (void *write_pos_, size_t to_write_,$/;"	f	class:zmq::encoder_base_t	access:protected	signature:(void *write_pos_, size_t to_write_, step_t next_, bool beginning_)
node	.\src\mtrie.hpp	/^            class mtrie_t *node;$/;"	m	union:zmq::mtrie_t::__anon43	typeref:class:zmq::mtrie_t::__anon43::mtrie_t	access:public
node	.\src\trie.hpp	/^            class trie_t *node;$/;"	m	union:zmq::trie_t::__anon51	typeref:class:zmq::trie_t::__anon51::trie_t	access:public
not_eof	.\src\blob.hpp	/^      not_eof(const int_type& __c)$/;"	f	struct:std::char_traits	access:public	signature:(const int_type& __c)
now_ms	.\src\clock.cpp	/^uint64_t zmq::clock_t::now_ms ()$/;"	f	class:zmq::clock_t	signature:()
now_ms	.\src\clock.hpp	/^        uint64_t now_ms ();$/;"	p	class:zmq::clock_t	access:public	signature:()
now_us	.\src\clock.cpp	/^uint64_t zmq::clock_t::now_us ()$/;"	f	class:zmq::clock_t	signature:()
now_us	.\src\clock.hpp	/^        static uint64_t now_us ();$/;"	p	class:zmq::clock_t	access:public	signature:()
object	.\src\command.hpp	/^                zmq::own_t *object;$/;"	m	struct:zmq::command_t::__anon15::__anon18	access:public
object	.\src\command.hpp	/^                zmq::own_t *object;$/;"	m	struct:zmq::command_t::__anon15::__anon26	access:public
object_t	.\src\object.cpp	/^zmq::object_t::object_t (ctx_t *ctx_, uint32_t tid_) :$/;"	f	class:zmq::object_t	signature:(ctx_t *ctx_, uint32_t tid_)
object_t	.\src\object.cpp	/^zmq::object_t::object_t (object_t *parent_) :$/;"	f	class:zmq::object_t	signature:(object_t *parent_)
object_t	.\src\object.hpp	/^        object_t (const object_t&);$/;"	p	class:zmq::object_t	access:private	signature:(const object_t&)
object_t	.\src\object.hpp	/^        object_t (object_t *parent_);$/;"	p	class:zmq::object_t	access:public	signature:(object_t *parent_)
object_t	.\src\object.hpp	/^        object_t (zmq::ctx_t *ctx_, uint32_t tid_);$/;"	p	class:zmq::object_t	access:public	signature:(zmq::ctx_t *ctx_, uint32_t tid_)
object_t	.\src\object.hpp	/^    class object_t$/;"	c	namespace:zmq
off_type	.\src\blob.hpp	/^      typedef streamoff 	off_type;$/;"	t	struct:std::char_traits	access:public
one_byte_size_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::one_byte_size_ready ()$/;"	f	class:zmq::decoder_t	signature:()
one_byte_size_ready	.\src\decoder.hpp	/^        bool one_byte_size_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
one_byte_size_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::one_byte_size_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
one_byte_size_ready	.\src\v1_decoder.hpp	/^        bool one_byte_size_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
open	.\src\ipc_connecter.cpp	/^int zmq::ipc_connecter_t::open ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
open	.\src\ipc_connecter.hpp	/^        int open ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
open	.\src\tcp_connecter.cpp	/^int zmq::tcp_connecter_t::open ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
open	.\src\tcp_connecter.hpp	/^        int open ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
open_socket	.\src\ip.cpp	/^zmq::fd_t zmq::open_socket (int domain_, int type_, int protocol_)$/;"	f	class:zmq	signature:(int domain_, int type_, int protocol_)
open_socket	.\src\ip.hpp	/^    fd_t open_socket (int domain_, int type_, int protocol_);$/;"	p	namespace:zmq	signature:(int domain_, int type_, int protocol_)
operator ()	.\src\pgm_receiver.hpp	/^            bool operator () (const pgm_tsi_t &ltsi,$/;"	f	struct:zmq::pgm_receiver_t::tsi_comp	access:public	signature:(const pgm_tsi_t &ltsi, const pgm_tsi_t &rtsi) const
operator =	.\src\array.hpp	/^        const array_item_t &operator = (const array_item_t&);$/;"	p	class:zmq::array_item_t	access:private	signature:(const array_item_t&)
operator =	.\src\array.hpp	/^        const array_t &operator = (const array_t&);$/;"	p	class:zmq::array_t	access:private	signature:(const array_t&)
operator =	.\src\atomic_counter.hpp	/^        const atomic_counter_t& operator = (const atomic_counter_t&);$/;"	p	class:zmq::atomic_counter_t	access:private	signature:(const atomic_counter_t&)
operator =	.\src\atomic_ptr.hpp	/^        const atomic_ptr_t &operator = (const atomic_ptr_t&);$/;"	p	class:zmq::atomic_ptr_t	access:private	signature:(const atomic_ptr_t&)
operator =	.\src\clock.hpp	/^        const clock_t &operator = (const clock_t&);$/;"	p	class:zmq::clock_t	access:private	signature:(const clock_t&)
operator =	.\src\ctx.hpp	/^        const ctx_t &operator = (const ctx_t&);$/;"	p	class:zmq::ctx_t	access:private	signature:(const ctx_t&)
operator =	.\src\dealer.hpp	/^        const dealer_session_t &operator = (const dealer_session_t&);$/;"	p	class:zmq::dealer_session_t	access:private	signature:(const dealer_session_t&)
operator =	.\src\dealer.hpp	/^        const dealer_t &operator = (const dealer_t&);$/;"	p	class:zmq::dealer_t	access:private	signature:(const dealer_t&)
operator =	.\src\decoder.hpp	/^        const decoder_base_t &operator = (const decoder_base_t&);$/;"	p	class:zmq::decoder_base_t	access:private	signature:(const decoder_base_t&)
operator =	.\src\decoder.hpp	/^        void operator = (const decoder_t&);$/;"	p	class:zmq::decoder_t	access:private	signature:(const decoder_t&)
operator =	.\src\devpoll.hpp	/^        const devpoll_t &operator = (const devpoll_t&);$/;"	p	class:zmq::devpoll_t	access:private	signature:(const devpoll_t&)
operator =	.\src\dist.hpp	/^        const dist_t &operator = (const dist_t&);$/;"	p	class:zmq::dist_t	access:private	signature:(const dist_t&)
operator =	.\src\encoder.hpp	/^        const encoder_t &operator = (const encoder_t&);$/;"	p	class:zmq::encoder_t	access:private	signature:(const encoder_t&)
operator =	.\src\encoder.hpp	/^        void operator = (const encoder_base_t&);$/;"	p	class:zmq::encoder_base_t	access:private	signature:(const encoder_base_t&)
operator =	.\src\epoll.hpp	/^        const epoll_t &operator = (const epoll_t&);$/;"	p	class:zmq::epoll_t	access:private	signature:(const epoll_t&)
operator =	.\src\fq.hpp	/^        const fq_t &operator = (const fq_t&);$/;"	p	class:zmq::fq_t	access:private	signature:(const fq_t&)
operator =	.\src\io_object.hpp	/^        const io_object_t &operator = (const io_object_t&);$/;"	p	class:zmq::io_object_t	access:private	signature:(const io_object_t&)
operator =	.\src\io_thread.hpp	/^        const io_thread_t &operator = (const io_thread_t&);$/;"	p	class:zmq::io_thread_t	access:private	signature:(const io_thread_t&)
operator =	.\src\ipc_address.hpp	/^        const ipc_address_t &operator = (const ipc_address_t&);$/;"	p	class:zmq::ipc_address_t	access:private	signature:(const ipc_address_t&)
operator =	.\src\ipc_connecter.hpp	/^        const ipc_connecter_t &operator = (const ipc_connecter_t&);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(const ipc_connecter_t&)
operator =	.\src\ipc_listener.hpp	/^        const ipc_listener_t &operator = (const ipc_listener_t&);$/;"	p	class:zmq::ipc_listener_t	access:private	signature:(const ipc_listener_t&)
operator =	.\src\kqueue.hpp	/^        const kqueue_t &operator = (const kqueue_t&);$/;"	p	class:zmq::kqueue_t	access:private	signature:(const kqueue_t&)
operator =	.\src\lb.hpp	/^        const lb_t &operator = (const lb_t&);$/;"	p	class:zmq::lb_t	access:private	signature:(const lb_t&)
operator =	.\src\mailbox.hpp	/^        const mailbox_t &operator = (const mailbox_t&);$/;"	p	class:zmq::mailbox_t	access:private	signature:(const mailbox_t&)
operator =	.\src\mtrie.hpp	/^        const mtrie_t &operator = (const mtrie_t&);$/;"	p	class:zmq::mtrie_t	access:private	signature:(const mtrie_t&)
operator =	.\src\mutex.hpp	/^        void operator = (const mutex_t&);$/;"	p	class:zmq::mutex_t	access:private	signature:(const mutex_t&)
operator =	.\src\object.hpp	/^        const object_t &operator = (const object_t&);$/;"	p	class:zmq::object_t	access:private	signature:(const object_t&)
operator =	.\src\own.hpp	/^        const own_t &operator = (const own_t&);$/;"	p	class:zmq::own_t	access:private	signature:(const own_t&)
operator =	.\src\pair.hpp	/^        const pair_session_t &operator = (const pair_session_t&);$/;"	p	class:zmq::pair_session_t	access:private	signature:(const pair_session_t&)
operator =	.\src\pair.hpp	/^        const pair_t &operator = (const pair_t&);$/;"	p	class:zmq::pair_t	access:private	signature:(const pair_t&)
operator =	.\src\pgm_receiver.hpp	/^        const pgm_receiver_t &operator = (const pgm_receiver_t&);$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:(const pgm_receiver_t&)
operator =	.\src\pgm_sender.hpp	/^        const pgm_sender_t &operator = (const pgm_sender_t&);$/;"	p	class:zmq::pgm_sender_t	access:private	signature:(const pgm_sender_t&)
operator =	.\src\pipe.hpp	/^        const pipe_t &operator = (const pipe_t&);$/;"	p	class:zmq::pipe_t	access:private	signature:(const pipe_t&)
operator =	.\src\poll.hpp	/^        const poll_t &operator = (const poll_t&);$/;"	p	class:zmq::poll_t	access:private	signature:(const poll_t&)
operator =	.\src\poller_base.hpp	/^        const poller_base_t &operator = (const poller_base_t&);$/;"	p	class:zmq::poller_base_t	access:private	signature:(const poller_base_t&)
operator =	.\src\pub.hpp	/^        const pub_session_t &operator = (const pub_session_t&);$/;"	p	class:zmq::pub_session_t	access:private	signature:(const pub_session_t&)
operator =	.\src\pub.hpp	/^        const pub_t &operator = (const pub_t&);$/;"	p	class:zmq::pub_t	access:private	signature:(const pub_t&)
operator =	.\src\pull.hpp	/^        const pull_session_t &operator = (const pull_session_t&);$/;"	p	class:zmq::pull_session_t	access:private	signature:(const pull_session_t&)
operator =	.\src\pull.hpp	/^        const pull_t &operator = (const pull_t&);$/;"	p	class:zmq::pull_t	access:private	signature:(const pull_t&)
operator =	.\src\push.hpp	/^        const push_session_t &operator = (const push_session_t&);$/;"	p	class:zmq::push_session_t	access:private	signature:(const push_session_t&)
operator =	.\src\push.hpp	/^        const push_t &operator = (const push_t&);$/;"	p	class:zmq::push_t	access:private	signature:(const push_t&)
operator =	.\src\reaper.hpp	/^        const reaper_t &operator = (const reaper_t&);$/;"	p	class:zmq::reaper_t	access:private	signature:(const reaper_t&)
operator =	.\src\rep.hpp	/^        const rep_session_t &operator = (const rep_session_t&);$/;"	p	class:zmq::rep_session_t	access:private	signature:(const rep_session_t&)
operator =	.\src\rep.hpp	/^        const rep_t &operator = (const rep_t&);$/;"	p	class:zmq::rep_t	access:private	signature:(const rep_t&)
operator =	.\src\req.hpp	/^        const req_session_t &operator = (const req_session_t&);$/;"	p	class:zmq::req_session_t	access:private	signature:(const req_session_t&)
operator =	.\src\req.hpp	/^        const req_t &operator = (const req_t&);$/;"	p	class:zmq::req_t	access:private	signature:(const req_t&)
operator =	.\src\router.hpp	/^        const router_session_t &operator = (const router_session_t&);$/;"	p	class:zmq::router_session_t	access:private	signature:(const router_session_t&)
operator =	.\src\router.hpp	/^        const router_t &operator = (const router_t&);$/;"	p	class:zmq::router_t	access:private	signature:(const router_t&)
operator =	.\src\select.hpp	/^        const select_t &operator = (const select_t&);$/;"	p	class:zmq::select_t	access:private	signature:(const select_t&)
operator =	.\src\session_base.hpp	/^        const session_base_t &operator = (const session_base_t&);$/;"	p	class:zmq::session_base_t	access:private	signature:(const session_base_t&)
operator =	.\src\signaler.hpp	/^        const signaler_t &operator = (const signaler_t&);$/;"	p	class:zmq::signaler_t	access:private	signature:(const signaler_t&)
operator =	.\src\socket_base.hpp	/^        const socket_base_t &operator = (const socket_base_t&);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const socket_base_t&)
operator =	.\src\stream_engine.hpp	/^        const stream_engine_t &operator = (const stream_engine_t&);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(const stream_engine_t&)
operator =	.\src\sub.hpp	/^        const sub_session_t &operator = (const sub_session_t&);$/;"	p	class:zmq::sub_session_t	access:private	signature:(const sub_session_t&)
operator =	.\src\sub.hpp	/^        const sub_t &operator = (const sub_t&);$/;"	p	class:zmq::sub_t	access:private	signature:(const sub_t&)
operator =	.\src\tcp_connecter.hpp	/^        const tcp_connecter_t &operator = (const tcp_connecter_t&);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(const tcp_connecter_t&)
operator =	.\src\tcp_listener.hpp	/^        const tcp_listener_t &operator = (const tcp_listener_t&);$/;"	p	class:zmq::tcp_listener_t	access:private	signature:(const tcp_listener_t&)
operator =	.\src\thread.hpp	/^        const thread_t &operator = (const thread_t&);$/;"	p	class:zmq::thread_t	access:private	signature:(const thread_t&)
operator =	.\src\trie.hpp	/^        const trie_t &operator = (const trie_t&);$/;"	p	class:zmq::trie_t	access:private	signature:(const trie_t&)
operator =	.\src\v1_decoder.hpp	/^        void operator = (const v1_decoder_t&);$/;"	p	class:zmq::v1_decoder_t	access:private	signature:(const v1_decoder_t&)
operator =	.\src\v1_encoder.hpp	/^        const v1_encoder_t &operator = (const v1_encoder_t&);$/;"	p	class:zmq::v1_encoder_t	access:private	signature:(const v1_encoder_t&)
operator =	.\src\xpub.hpp	/^        const xpub_session_t &operator = (const xpub_session_t&);$/;"	p	class:zmq::xpub_session_t	access:private	signature:(const xpub_session_t&)
operator =	.\src\xpub.hpp	/^        const xpub_t &operator = (const xpub_t&);$/;"	p	class:zmq::xpub_t	access:private	signature:(const xpub_t&)
operator =	.\src\xsub.hpp	/^        const xsub_session_t &operator = (const xsub_session_t&);$/;"	p	class:zmq::xsub_session_t	access:private	signature:(const xsub_session_t&)
operator =	.\src\xsub.hpp	/^        const xsub_t &operator = (const xsub_t&);$/;"	p	class:zmq::xsub_t	access:private	signature:(const xsub_t&)
operator =	.\src\ypipe.hpp	/^        const ypipe_t &operator = (const ypipe_t&);$/;"	p	class:zmq::ypipe_t	access:protected	signature:(const ypipe_t&)
operator =	.\src\yqueue.hpp	/^        const yqueue_t &operator = (const yqueue_t&);$/;"	p	class:zmq::yqueue_t	access:private	signature:(const yqueue_t&)
operator []	.\src\array.hpp	/^        inline T *&operator [] (size_type index_)$/;"	f	class:zmq::array_t	access:public	signature:(size_type index_)
opt_sync	.\src\ctx.hpp	/^        mutex_t opt_sync;$/;"	m	class:zmq::ctx_t	access:private
options	.\src\ctx.hpp	/^        options_t options;$/;"	m	struct:zmq::endpoint_t	access:public
options	.\src\own.hpp	/^        options_t options;$/;"	m	class:zmq::own_t	access:protected
options	.\src\pgm_receiver.hpp	/^        options_t options;$/;"	m	class:zmq::pgm_receiver_t	access:private
options	.\src\pgm_sender.hpp	/^        options_t options;$/;"	m	class:zmq::pgm_sender_t	access:private
options	.\src\pgm_socket.hpp	/^        options_t options;$/;"	m	class:zmq::pgm_socket_t	access:private
options	.\src\stream_engine.hpp	/^        options_t options;$/;"	m	class:zmq::stream_engine_t	access:private
options_t	.\src\options.cpp	/^zmq::options_t::options_t () :$/;"	f	class:zmq::options_t	signature:()
options_t	.\src\options.hpp	/^        options_t ();$/;"	p	struct:zmq::options_t	access:public	signature:()
options_t	.\src\options.hpp	/^    struct options_t$/;"	s	namespace:zmq
out_active	.\src\pipe.hpp	/^        bool out_active;$/;"	m	class:zmq::pipe_t	access:private
out_batch_size	.\src\config.hpp	/^        out_batch_size = 8192,$/;"	e	enum:zmq::__anon32
out_buffer	.\src\pgm_sender.hpp	/^        unsigned char *out_buffer;$/;"	m	class:zmq::pgm_sender_t	access:private
out_buffer_size	.\src\pgm_sender.hpp	/^        size_t out_buffer_size;$/;"	m	class:zmq::pgm_sender_t	access:private
out_event	.\src\i_poll_events.hpp	/^        virtual void out_event () = 0;$/;"	p	struct:zmq::i_poll_events	access:public	signature:()
out_event	.\src\io_object.cpp	/^void zmq::io_object_t::out_event ()$/;"	f	class:zmq::io_object_t	signature:()
out_event	.\src\io_object.hpp	/^        void out_event ();$/;"	p	class:zmq::io_object_t	access:protected	signature:()
out_event	.\src\io_thread.cpp	/^void zmq::io_thread_t::out_event ()$/;"	f	class:zmq::io_thread_t	signature:()
out_event	.\src\io_thread.hpp	/^        void out_event ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
out_event	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::out_event ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
out_event	.\src\ipc_connecter.hpp	/^        void out_event ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
out_event	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::out_event ()$/;"	f	class:zmq::pgm_sender_t	signature:()
out_event	.\src\pgm_sender.hpp	/^        void out_event ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
out_event	.\src\reaper.cpp	/^void zmq::reaper_t::out_event ()$/;"	f	class:zmq::reaper_t	signature:()
out_event	.\src\reaper.hpp	/^        void out_event ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
out_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::out_event ()$/;"	f	class:zmq::socket_base_t	signature:()
out_event	.\src\socket_base.hpp	/^        void out_event ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
out_event	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::out_event ()$/;"	f	class:zmq::stream_engine_t	signature:()
out_event	.\src\stream_engine.hpp	/^        void out_event ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
out_event	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::out_event ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
out_event	.\src\tcp_connecter.hpp	/^        void out_event ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
outpipe	.\src\pipe.hpp	/^        upipe_t *outpipe;$/;"	m	class:zmq::pipe_t	access:private
outpipe_t	.\src\router.hpp	/^        struct outpipe_t$/;"	s	class:zmq::router_t	access:private
outpipes	.\src\router.hpp	/^        outpipes_t outpipes;$/;"	m	class:zmq::router_t	access:private
outpipes_t	.\src\router.hpp	/^        typedef std::map <blob_t, outpipe_t> outpipes_t;$/;"	t	class:zmq::router_t	access:private
outpos	.\src\stream_engine.hpp	/^        unsigned char *outpos;$/;"	m	class:zmq::stream_engine_t	access:private
outsize	.\src\stream_engine.hpp	/^        size_t outsize;$/;"	m	class:zmq::stream_engine_t	access:private
own	.\src\command.hpp	/^            own,$/;"	e	enum:zmq::command_t::type_t
own	.\src\command.hpp	/^            } own;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon18	access:public
own_t	.\src\own.cpp	/^zmq::own_t::own_t (class ctx_t *parent_, uint32_t tid_) :$/;"	f	class:zmq::own_t	signature:(class ctx_t *parent_, uint32_t tid_)
own_t	.\src\own.cpp	/^zmq::own_t::own_t (io_thread_t *io_thread_, const options_t &options_) :$/;"	f	class:zmq::own_t	signature:(io_thread_t *io_thread_, const options_t &options_)
own_t	.\src\own.hpp	/^        own_t (const own_t&);$/;"	p	class:zmq::own_t	access:private	signature:(const own_t&)
own_t	.\src\own.hpp	/^        own_t (zmq::ctx_t *parent_, uint32_t tid_);$/;"	p	class:zmq::own_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_)
own_t	.\src\own.hpp	/^        own_t (zmq::io_thread_t *io_thread_, const options_t &options_);$/;"	p	class:zmq::own_t	access:public	signature:(zmq::io_thread_t *io_thread_, const options_t &options_)
own_t	.\src\own.hpp	/^    class own_t : public object_t$/;"	c	namespace:zmq	inherits:object_t
owned	.\src\own.hpp	/^        owned_t owned;$/;"	m	class:zmq::own_t	access:private
owned_t	.\src\own.hpp	/^        typedef std::set <own_t*> owned_t;$/;"	t	class:zmq::own_t	access:private
owner	.\src\own.hpp	/^        own_t *owner;$/;"	m	class:zmq::own_t	access:private
pair_session_t	.\src\pair.cpp	/^zmq::pair_session_t::pair_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::pair_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
pair_session_t	.\src\pair.hpp	/^        pair_session_t (const pair_session_t&);$/;"	p	class:zmq::pair_session_t	access:private	signature:(const pair_session_t&)
pair_session_t	.\src\pair.hpp	/^        pair_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::pair_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
pair_session_t	.\src\pair.hpp	/^    class pair_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
pair_t	.\src\pair.cpp	/^zmq::pair_t::pair_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::pair_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
pair_t	.\src\pair.hpp	/^        pair_t (const pair_t&);$/;"	p	class:zmq::pair_t	access:private	signature:(const pair_t&)
pair_t	.\src\pair.hpp	/^        pair_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
pair_t	.\src\pair.hpp	/^    class pair_t :$/;"	c	namespace:zmq	inherits:socket_base_t
parse_uri	.\src\socket_base.cpp	/^int zmq::socket_base_t::parse_uri (const char *uri_,$/;"	f	class:zmq::socket_base_t	signature:(const char *uri_, std::string &protocol_, std::string &address_)
parse_uri	.\src\socket_base.hpp	/^        int parse_uri (const char *uri_, std::string &protocol_,$/;"	p	class:zmq::socket_base_t	access:private	signature:(const char *uri_, std::string &protocol_, std::string &address_)
peer	.\src\pipe.hpp	/^        pipe_t *peer;$/;"	m	class:zmq::pipe_t	access:private
peer_info_t	.\src\pgm_receiver.hpp	/^        struct peer_info_t$/;"	s	class:zmq::pgm_receiver_t	access:private
peers	.\src\pgm_receiver.hpp	/^        peers_t peers;$/;"	m	class:zmq::pgm_receiver_t	access:private
peers_msgs_read	.\src\pipe.hpp	/^        uint64_t peers_msgs_read;$/;"	m	class:zmq::pipe_t	access:private
peers_t	.\src\pgm_receiver.hpp	/^        typedef std::map <pgm_tsi_t, peer_info_t, tsi_comp> peers_t;$/;"	t	class:zmq::pgm_receiver_t	access:private
pending	.\src\pipe.hpp	/^            pending,$/;"	e	enum:zmq::pipe_t::__anon46
pending	.\src\session_base.hpp	/^        bool pending;$/;"	m	class:zmq::session_base_t	access:private
pending	.\src\xpub.hpp	/^        pending_t pending;$/;"	m	class:zmq::xpub_t	access:private
pending_bytes	.\src\pgm_receiver.hpp	/^        size_t pending_bytes;$/;"	m	class:zmq::pgm_receiver_t	access:private
pending_list	.\src\devpoll.hpp	/^        pending_list_t pending_list;$/;"	m	class:zmq::devpoll_t	access:private
pending_list_t	.\src\devpoll.hpp	/^        typedef std::vector <fd_t> pending_list_t;$/;"	t	class:zmq::devpoll_t	access:private
pending_notify_handle	.\src\pgm_sender.hpp	/^        handle_t pending_notify_handle;$/;"	m	class:zmq::pgm_sender_t	access:private
pending_ptr	.\src\pgm_receiver.hpp	/^        unsigned char *pending_ptr;$/;"	m	class:zmq::pgm_receiver_t	access:private
pending_t	.\src\xpub.hpp	/^        typedef std::deque <blob_t> pending_t;$/;"	t	class:zmq::xpub_t	access:private
pgm_max_tpdu	.\src\config.hpp	/^        pgm_max_tpdu = 1500,$/;"	e	enum:zmq::__anon32
pgm_msgv	.\src\pgm_socket.hpp	/^        pgm_msgv_t *pgm_msgv;$/;"	m	class:zmq::pgm_socket_t	access:private
pgm_msgv_len	.\src\pgm_socket.hpp	/^        size_t pgm_msgv_len;$/;"	m	class:zmq::pgm_socket_t	access:private
pgm_msgv_processed	.\src\pgm_socket.hpp	/^        size_t pgm_msgv_processed;$/;"	m	class:zmq::pgm_socket_t	access:private
pgm_receiver_t	.\src\pgm_receiver.cpp	/^zmq::pgm_receiver_t::pgm_receiver_t (class io_thread_t *parent_, $/;"	f	class:zmq::pgm_receiver_t	signature:(class io_thread_t *parent_, const options_t &options_)
pgm_receiver_t	.\src\pgm_receiver.hpp	/^        pgm_receiver_t (const pgm_receiver_t&);$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:(const pgm_receiver_t&)
pgm_receiver_t	.\src\pgm_receiver.hpp	/^        pgm_receiver_t (zmq::io_thread_t *parent_, const options_t &options_);$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(zmq::io_thread_t *parent_, const options_t &options_)
pgm_receiver_t	.\src\pgm_receiver.hpp	/^    class pgm_receiver_t : public io_object_t, public i_engine$/;"	c	namespace:zmq	inherits:io_object_t,i_engine
pgm_sender_t	.\src\pgm_sender.cpp	/^zmq::pgm_sender_t::pgm_sender_t (io_thread_t *parent_, $/;"	f	class:zmq::pgm_sender_t	signature:(io_thread_t *parent_, const options_t &options_)
pgm_sender_t	.\src\pgm_sender.hpp	/^        pgm_sender_t (const pgm_sender_t&);$/;"	p	class:zmq::pgm_sender_t	access:private	signature:(const pgm_sender_t&)
pgm_sender_t	.\src\pgm_sender.hpp	/^        pgm_sender_t (zmq::io_thread_t *parent_, const options_t &options_);$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(zmq::io_thread_t *parent_, const options_t &options_)
pgm_sender_t	.\src\pgm_sender.hpp	/^    class pgm_sender_t : public io_object_t, public i_engine$/;"	c	namespace:zmq	inherits:io_object_t,i_engine
pgm_socket	.\src\pgm_receiver.hpp	/^        pgm_socket_t pgm_socket;$/;"	m	class:zmq::pgm_receiver_t	access:private
pgm_socket	.\src\pgm_sender.hpp	/^        pgm_socket_t pgm_socket;$/;"	m	class:zmq::pgm_sender_t	access:private
pgm_socket_t	.\src\pgm_socket.cpp	/^zmq::pgm_socket_t::pgm_socket_t (bool receiver_, const options_t &options_) :$/;"	f	class:zmq::pgm_socket_t	signature:(bool receiver_, const options_t &options_)
pgm_socket_t	.\src\pgm_socket.hpp	/^        pgm_socket_t (bool receiver_, const options_t &options_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(bool receiver_, const options_t &options_)
pgm_socket_t	.\src\pgm_socket.hpp	/^    class pgm_socket_t$/;"	c	namespace:zmq
pipe	.\src\command.hpp	/^                void *pipe;$/;"	m	struct:zmq::command_t::__anon15::__anon23	access:public
pipe	.\src\command.hpp	/^                zmq::pipe_t *pipe;$/;"	m	struct:zmq::command_t::__anon15::__anon20	access:public
pipe	.\src\pair.hpp	/^        zmq::pipe_t *pipe;$/;"	m	class:zmq::pair_t	access:private
pipe	.\src\router.hpp	/^            zmq::pipe_t *pipe;$/;"	m	struct:zmq::router_t::outpipe_t	access:public
pipe	.\src\session_base.hpp	/^        zmq::pipe_t *pipe;$/;"	m	class:zmq::session_base_t	access:private
pipe_handle	.\src\pgm_receiver.hpp	/^        handle_t pipe_handle;$/;"	m	class:zmq::pgm_receiver_t	access:private
pipe_t	.\src\pipe.cpp	/^zmq::pipe_t::pipe_t (object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_,$/;"	f	class:zmq::pipe_t	signature:(object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_, int inhwm_, int outhwm_, bool delay_)
pipe_t	.\src\pipe.hpp	/^        pipe_t (const pipe_t&);$/;"	p	class:zmq::pipe_t	access:private	signature:(const pipe_t&)
pipe_t	.\src\pipe.hpp	/^        pipe_t (object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_,$/;"	p	class:zmq::pipe_t	access:private	signature:(object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_, int inhwm_, int outhwm_, bool delay_)
pipe_t	.\src\pipe.hpp	/^    class pipe_t :$/;"	c	namespace:zmq	inherits:object_t,array_item_t,array_item_t,array_item_t
pipe_term	.\src\command.hpp	/^            pipe_term,$/;"	e	enum:zmq::command_t::type_t
pipe_term	.\src\command.hpp	/^            } pipe_term;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon24	access:public
pipe_term_ack	.\src\command.hpp	/^            pipe_term_ack,$/;"	e	enum:zmq::command_t::type_t
pipe_term_ack	.\src\command.hpp	/^            } pipe_term_ack;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon25	access:public
pipepair	.\src\pipe.cpp	/^int zmq::pipepair (class object_t *parents_ [2], class pipe_t* pipes_ [2],$/;"	f	class:zmq	signature:(class object_t *parents_ [2], class pipe_t* pipes_ [2], int hwms_ [2], bool delays_ [2])
pipepair	.\src\pipe.hpp	/^        friend int pipepair (zmq::object_t *parents_ [2],$/;"	p	class:zmq::pipe_t	access:friend	signature:(zmq::object_t *parents_ [2], zmq::pipe_t* pipes_ [2], int hwms_ [2], bool delays_ [2])
pipepair	.\src\pipe.hpp	/^    int pipepair (zmq::object_t *parents_ [2], zmq::pipe_t* pipes_ [2],$/;"	p	namespace:zmq	signature:(zmq::object_t *parents_ [2], zmq::pipe_t* pipes_ [2], int hwms_ [2], bool delays_ [2])
pipes	.\src\dist.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::dist_t	access:private
pipes	.\src\fq.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::fq_t	access:private
pipes	.\src\lb.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::lb_t	access:private
pipes	.\src\mtrie.hpp	/^        pipes_t *pipes;$/;"	m	class:zmq::mtrie_t	access:private
pipes	.\src\socket_base.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::socket_base_t	access:private
pipes_t	.\src\dist.hpp	/^        typedef array_t <zmq::pipe_t, 2> pipes_t;$/;"	t	class:zmq::dist_t	access:private
pipes_t	.\src\fq.hpp	/^        typedef array_t <pipe_t, 1> pipes_t;$/;"	t	class:zmq::fq_t	access:private
pipes_t	.\src\lb.hpp	/^        typedef array_t <pipe_t, 2> pipes_t;$/;"	t	class:zmq::lb_t	access:private
pipes_t	.\src\mtrie.hpp	/^        typedef std::set <zmq::pipe_t*> pipes_t;$/;"	t	class:zmq::mtrie_t	access:private
pipes_t	.\src\socket_base.hpp	/^        typedef array_t <pipe_t, 3> pipes_t;$/;"	t	class:zmq::socket_base_t	access:private
plug	.\src\command.hpp	/^            plug,$/;"	e	enum:zmq::command_t::type_t
plug	.\src\command.hpp	/^            } plug;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon17	access:public
plug	.\src\i_engine.hpp	/^        virtual void plug (zmq::io_thread_t *io_thread_,$/;"	p	struct:zmq::i_engine	access:public	signature:(zmq::io_thread_t *io_thread_, class session_base_t *session_)
plug	.\src\io_object.cpp	/^void zmq::io_object_t::plug (io_thread_t *io_thread_)$/;"	f	class:zmq::io_object_t	signature:(io_thread_t *io_thread_)
plug	.\src\io_object.hpp	/^        void plug (zmq::io_thread_t *io_thread_);$/;"	p	class:zmq::io_object_t	access:public	signature:(zmq::io_thread_t *io_thread_)
plug	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::plug (io_thread_t *io_thread_,$/;"	f	class:zmq::pgm_receiver_t	signature:(io_thread_t *io_thread_, session_base_t *session_)
plug	.\src\pgm_receiver.hpp	/^        void plug (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_)
plug	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::plug (io_thread_t *io_thread_, session_base_t *session_)$/;"	f	class:zmq::pgm_sender_t	signature:(io_thread_t *io_thread_, session_base_t *session_)
plug	.\src\pgm_sender.hpp	/^        void plug (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_)
plug	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::plug (io_thread_t *io_thread_,$/;"	f	class:zmq::stream_engine_t	signature:(io_thread_t *io_thread_, session_base_t *session_)
plug	.\src\stream_engine.hpp	/^        void plug (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::stream_engine_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_)
plugged	.\src\stream_engine.hpp	/^        bool plugged;$/;"	m	class:zmq::stream_engine_t	access:private
poll_entry_t	.\src\epoll.hpp	/^        struct poll_entry_t$/;"	s	class:zmq::epoll_t	access:private
poll_entry_t	.\src\kqueue.hpp	/^        struct poll_entry_t$/;"	s	class:zmq::kqueue_t	access:private
poll_t	.\src\poll.cpp	/^zmq::poll_t::poll_t () :$/;"	f	class:zmq::poll_t	signature:()
poll_t	.\src\poll.hpp	/^        poll_t ();$/;"	p	class:zmq::poll_t	access:public	signature:()
poll_t	.\src\poll.hpp	/^        poll_t (const poll_t&);$/;"	p	class:zmq::poll_t	access:private	signature:(const poll_t&)
poll_t	.\src\poll.hpp	/^    class poll_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
poller	.\src\io_object.hpp	/^        poller_t *poller;$/;"	m	class:zmq::io_object_t	access:private
poller	.\src\io_thread.hpp	/^        poller_t *poller;$/;"	m	class:zmq::io_thread_t	access:private
poller	.\src\reaper.hpp	/^        poller_t *poller;$/;"	m	class:zmq::reaper_t	access:private
poller	.\src\socket_base.hpp	/^        poller_t *poller;$/;"	m	class:zmq::socket_base_t	access:private
poller_base_t	.\src\poller_base.cpp	/^zmq::poller_base_t::poller_base_t ()$/;"	f	class:zmq::poller_base_t	signature:()
poller_base_t	.\src\poller_base.hpp	/^        poller_base_t ();$/;"	p	class:zmq::poller_base_t	access:public	signature:()
poller_base_t	.\src\poller_base.hpp	/^        poller_base_t (const poller_base_t&);$/;"	p	class:zmq::poller_base_t	access:private	signature:(const poller_base_t&)
poller_base_t	.\src\poller_base.hpp	/^    class poller_base_t$/;"	c	namespace:zmq
poller_t	.\src\devpoll.hpp	/^    typedef devpoll_t poller_t;$/;"	t	namespace:zmq
poller_t	.\src\epoll.hpp	/^    typedef epoll_t poller_t;$/;"	t	namespace:zmq
poller_t	.\src\kqueue.hpp	/^    typedef kqueue_t poller_t;$/;"	t	namespace:zmq
poller_t	.\src\poll.hpp	/^    typedef poll_t poller_t;$/;"	t	namespace:zmq
poller_t	.\src\select.hpp	/^    typedef select_t poller_t;$/;"	t	namespace:zmq
pollset	.\src\poll.hpp	/^        pollset_t pollset;$/;"	m	class:zmq::poll_t	access:private
pollset_t	.\src\poll.hpp	/^        typedef std::vector <pollfd> pollset_t;$/;"	t	class:zmq::poll_t	access:private
pop	.\src\yqueue.hpp	/^        inline void pop ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
pos_type	.\src\blob.hpp	/^      typedef streampos 	pos_type;$/;"	t	struct:std::char_traits	access:public
posix_assert	.\src\err.hpp	124;"	d
prefetched	.\src\dealer.hpp	/^        bool prefetched;$/;"	m	class:zmq::dealer_t	access:private
prefetched	.\src\router.hpp	/^        bool prefetched;$/;"	m	class:zmq::router_t	access:private
prefetched_id	.\src\router.hpp	/^        msg_t prefetched_id;$/;"	m	class:zmq::router_t	access:private
prefetched_msg	.\src\dealer.hpp	/^        msg_t prefetched_msg;$/;"	m	class:zmq::dealer_t	access:private
prefetched_msg	.\src\router.hpp	/^        msg_t prefetched_msg;$/;"	m	class:zmq::router_t	access:private
prev	.\src\yqueue.hpp	/^             chunk_t *prev;$/;"	m	struct:zmq::yqueue_t::chunk_t	access:public
probe	.\src\ypipe.hpp	/^        inline bool probe (bool (*fn)(T &))$/;"	f	class:zmq::ypipe_t	access:public	signature:(bool (fn)T &))
proceed_with_term	.\src\session_base.cpp	/^void zmq::session_base_t::proceed_with_term ()$/;"	f	class:zmq::session_base_t	signature:()
proceed_with_term	.\src\session_base.hpp	/^        void proceed_with_term ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
process_activate_read	.\src\object.cpp	/^void zmq::object_t::process_activate_read ()$/;"	f	class:zmq::object_t	signature:()
process_activate_read	.\src\object.hpp	/^        virtual void process_activate_read ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_activate_read	.\src\pipe.cpp	/^void zmq::pipe_t::process_activate_read ()$/;"	f	class:zmq::pipe_t	signature:()
process_activate_read	.\src\pipe.hpp	/^        void process_activate_read ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
process_activate_write	.\src\object.cpp	/^void zmq::object_t::process_activate_write (uint64_t)$/;"	f	class:zmq::object_t	signature:(uint64_t)
process_activate_write	.\src\object.hpp	/^        virtual void process_activate_write (uint64_t msgs_read_);$/;"	p	class:zmq::object_t	access:protected	signature:(uint64_t msgs_read_)
process_activate_write	.\src\pipe.cpp	/^void zmq::pipe_t::process_activate_write (uint64_t msgs_read_)$/;"	f	class:zmq::pipe_t	signature:(uint64_t msgs_read_)
process_activate_write	.\src\pipe.hpp	/^        void process_activate_write (uint64_t msgs_read_);$/;"	p	class:zmq::pipe_t	access:private	signature:(uint64_t msgs_read_)
process_attach	.\src\object.cpp	/^void zmq::object_t::process_attach (i_engine *)$/;"	f	class:zmq::object_t	signature:(i_engine *)
process_attach	.\src\object.hpp	/^        virtual void process_attach (zmq::i_engine *engine_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::i_engine *engine_)
process_attach	.\src\session_base.cpp	/^void zmq::session_base_t::process_attach (i_engine *engine_)$/;"	f	class:zmq::session_base_t	signature:(i_engine *engine_)
process_attach	.\src\session_base.hpp	/^        void process_attach (zmq::i_engine *engine_);$/;"	p	class:zmq::session_base_t	access:private	signature:(zmq::i_engine *engine_)
process_bind	.\src\object.cpp	/^void zmq::object_t::process_bind (pipe_t *)$/;"	f	class:zmq::object_t	signature:(pipe_t *)
process_bind	.\src\object.hpp	/^        virtual void process_bind (zmq::pipe_t *pipe_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *pipe_)
process_bind	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_bind (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
process_bind	.\src\socket_base.hpp	/^        void process_bind (zmq::pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(zmq::pipe_t *pipe_)
process_buffer	.\src\decoder.hpp	/^        inline size_t process_buffer (unsigned char *data_, size_t size_)$/;"	f	class:zmq::decoder_base_t	access:public	signature:(unsigned char *data_, size_t size_)
process_buffer	.\src\i_decoder.hpp	/^        virtual size_t process_buffer (unsigned char *data_, size_t size_) = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:(unsigned char *data_, size_t size_)
process_command	.\src\object.cpp	/^void zmq::object_t::process_command (command_t &cmd_)$/;"	f	class:zmq::object_t	signature:(command_t &cmd_)
process_command	.\src\object.hpp	/^        void process_command (zmq::command_t &cmd_);$/;"	p	class:zmq::object_t	access:public	signature:(zmq::command_t &cmd_)
process_commands	.\src\socket_base.cpp	/^int zmq::socket_base_t::process_commands (int timeout_, bool throttle_)$/;"	f	class:zmq::socket_base_t	signature:(int timeout_, bool throttle_)
process_commands	.\src\socket_base.hpp	/^        int process_commands (int timeout_, bool throttle_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(int timeout_, bool throttle_)
process_destroy	.\src\own.cpp	/^void zmq::own_t::process_destroy ()$/;"	f	class:zmq::own_t	signature:()
process_destroy	.\src\own.hpp	/^        virtual void process_destroy ();$/;"	p	class:zmq::own_t	access:protected	signature:()
process_destroy	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_destroy ()$/;"	f	class:zmq::socket_base_t	signature:()
process_destroy	.\src\socket_base.hpp	/^        void process_destroy ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
process_hiccup	.\src\object.cpp	/^void zmq::object_t::process_hiccup (void *)$/;"	f	class:zmq::object_t	signature:(void *)
process_hiccup	.\src\object.hpp	/^        virtual void process_hiccup (void *pipe_);$/;"	p	class:zmq::object_t	access:protected	signature:(void *pipe_)
process_hiccup	.\src\pipe.cpp	/^void zmq::pipe_t::process_hiccup (void *pipe_)$/;"	f	class:zmq::pipe_t	signature:(void *pipe_)
process_hiccup	.\src\pipe.hpp	/^        void process_hiccup (void *pipe_);$/;"	p	class:zmq::pipe_t	access:private	signature:(void *pipe_)
process_own	.\src\object.cpp	/^void zmq::object_t::process_own (own_t *)$/;"	f	class:zmq::object_t	signature:(own_t *)
process_own	.\src\object.hpp	/^        virtual void process_own (zmq::own_t *object_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *object_)
process_own	.\src\own.cpp	/^void zmq::own_t::process_own (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
process_own	.\src\own.hpp	/^        void process_own (own_t *object_);$/;"	p	class:zmq::own_t	access:private	signature:(own_t *object_)
process_pipe_term	.\src\object.cpp	/^void zmq::object_t::process_pipe_term ()$/;"	f	class:zmq::object_t	signature:()
process_pipe_term	.\src\object.hpp	/^        virtual void process_pipe_term ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_pipe_term	.\src\pipe.cpp	/^void zmq::pipe_t::process_pipe_term ()$/;"	f	class:zmq::pipe_t	signature:()
process_pipe_term	.\src\pipe.hpp	/^        void process_pipe_term ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
process_pipe_term_ack	.\src\object.cpp	/^void zmq::object_t::process_pipe_term_ack ()$/;"	f	class:zmq::object_t	signature:()
process_pipe_term_ack	.\src\object.hpp	/^        virtual void process_pipe_term_ack ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_pipe_term_ack	.\src\pipe.cpp	/^void zmq::pipe_t::process_pipe_term_ack ()$/;"	f	class:zmq::pipe_t	signature:()
process_pipe_term_ack	.\src\pipe.hpp	/^        void process_pipe_term_ack ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
process_plug	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::process_plug ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
process_plug	.\src\ipc_connecter.hpp	/^        void process_plug ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
process_plug	.\src\ipc_listener.cpp	/^void zmq::ipc_listener_t::process_plug ()$/;"	f	class:zmq::ipc_listener_t	signature:()
process_plug	.\src\ipc_listener.hpp	/^        void process_plug ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
process_plug	.\src\object.cpp	/^void zmq::object_t::process_plug ()$/;"	f	class:zmq::object_t	signature:()
process_plug	.\src\object.hpp	/^        virtual void process_plug ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_plug	.\src\session_base.cpp	/^void zmq::session_base_t::process_plug ()$/;"	f	class:zmq::session_base_t	signature:()
process_plug	.\src\session_base.hpp	/^        void process_plug ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
process_plug	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::process_plug ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
process_plug	.\src\tcp_connecter.hpp	/^        void process_plug ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
process_plug	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::process_plug ()$/;"	f	class:zmq::tcp_listener_t	signature:()
process_plug	.\src\tcp_listener.hpp	/^        void process_plug ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
process_reap	.\src\object.cpp	/^void zmq::object_t::process_reap (class socket_base_t *)$/;"	f	class:zmq::object_t	signature:(class socket_base_t *)
process_reap	.\src\object.hpp	/^        virtual void process_reap (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
process_reap	.\src\reaper.cpp	/^void zmq::reaper_t::process_reap (socket_base_t *socket_)$/;"	f	class:zmq::reaper_t	signature:(socket_base_t *socket_)
process_reap	.\src\reaper.hpp	/^        void process_reap (zmq::socket_base_t *socket_);$/;"	p	class:zmq::reaper_t	access:private	signature:(zmq::socket_base_t *socket_)
process_reaped	.\src\object.cpp	/^void zmq::object_t::process_reaped ()$/;"	f	class:zmq::object_t	signature:()
process_reaped	.\src\object.hpp	/^        virtual void process_reaped ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_reaped	.\src\reaper.cpp	/^void zmq::reaper_t::process_reaped ()$/;"	f	class:zmq::reaper_t	signature:()
process_reaped	.\src\reaper.hpp	/^        void process_reaped ();$/;"	p	class:zmq::reaper_t	access:private	signature:()
process_seqnum	.\src\object.cpp	/^void zmq::object_t::process_seqnum ()$/;"	f	class:zmq::object_t	signature:()
process_seqnum	.\src\object.hpp	/^        virtual void process_seqnum ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_seqnum	.\src\own.cpp	/^void zmq::own_t::process_seqnum ()$/;"	f	class:zmq::own_t	signature:()
process_seqnum	.\src\own.hpp	/^        void process_seqnum ();$/;"	p	class:zmq::own_t	access:private	signature:()
process_stop	.\src\io_thread.cpp	/^void zmq::io_thread_t::process_stop ()$/;"	f	class:zmq::io_thread_t	signature:()
process_stop	.\src\io_thread.hpp	/^        void process_stop ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
process_stop	.\src\object.cpp	/^void zmq::object_t::process_stop ()$/;"	f	class:zmq::object_t	signature:()
process_stop	.\src\object.hpp	/^        virtual void process_stop ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_stop	.\src\reaper.cpp	/^void zmq::reaper_t::process_stop ()$/;"	f	class:zmq::reaper_t	signature:()
process_stop	.\src\reaper.hpp	/^        void process_stop ();$/;"	p	class:zmq::reaper_t	access:private	signature:()
process_stop	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_stop ()$/;"	f	class:zmq::socket_base_t	signature:()
process_stop	.\src\socket_base.hpp	/^        void process_stop ();$/;"	p	class:zmq::socket_base_t	access:private	signature:()
process_term	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::process_term (int linger_)$/;"	f	class:zmq::ipc_connecter_t	signature:(int linger_)
process_term	.\src\ipc_connecter.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(int linger_)
process_term	.\src\ipc_listener.cpp	/^void zmq::ipc_listener_t::process_term (int linger_)$/;"	f	class:zmq::ipc_listener_t	signature:(int linger_)
process_term	.\src\ipc_listener.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::ipc_listener_t	access:private	signature:(int linger_)
process_term	.\src\object.cpp	/^void zmq::object_t::process_term (int)$/;"	f	class:zmq::object_t	signature:(int)
process_term	.\src\object.hpp	/^        virtual void process_term (int linger_);$/;"	p	class:zmq::object_t	access:protected	signature:(int linger_)
process_term	.\src\own.cpp	/^void zmq::own_t::process_term (int linger_)$/;"	f	class:zmq::own_t	signature:(int linger_)
process_term	.\src\own.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::own_t	access:protected	signature:(int linger_)
process_term	.\src\session_base.cpp	/^void zmq::session_base_t::process_term (int linger_)$/;"	f	class:zmq::session_base_t	signature:(int linger_)
process_term	.\src\session_base.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::session_base_t	access:private	signature:(int linger_)
process_term	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_term (int linger_)$/;"	f	class:zmq::socket_base_t	signature:(int linger_)
process_term	.\src\socket_base.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(int linger_)
process_term	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::process_term (int linger_)$/;"	f	class:zmq::tcp_connecter_t	signature:(int linger_)
process_term	.\src\tcp_connecter.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(int linger_)
process_term	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::process_term (int linger_)$/;"	f	class:zmq::tcp_listener_t	signature:(int linger_)
process_term	.\src\tcp_listener.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::tcp_listener_t	access:private	signature:(int linger_)
process_term_ack	.\src\object.cpp	/^void zmq::object_t::process_term_ack ()$/;"	f	class:zmq::object_t	signature:()
process_term_ack	.\src\object.hpp	/^        virtual void process_term_ack ();$/;"	p	class:zmq::object_t	access:protected	signature:()
process_term_ack	.\src\own.cpp	/^void zmq::own_t::process_term_ack ()$/;"	f	class:zmq::own_t	signature:()
process_term_ack	.\src\own.hpp	/^        void process_term_ack ();$/;"	p	class:zmq::own_t	access:private	signature:()
process_term_req	.\src\object.cpp	/^void zmq::object_t::process_term_req (own_t *)$/;"	f	class:zmq::object_t	signature:(own_t *)
process_term_req	.\src\object.hpp	/^        virtual void process_term_req (zmq::own_t *object_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *object_)
process_term_req	.\src\own.cpp	/^void zmq::own_t::process_term_req (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
process_term_req	.\src\own.hpp	/^        void process_term_req (own_t *object_);$/;"	p	class:zmq::own_t	access:private	signature:(own_t *object_)
process_upstream	.\src\pgm_socket.cpp	/^void zmq::pgm_socket_t::process_upstream ()$/;"	f	class:zmq::pgm_socket_t	signature:()
process_upstream	.\src\pgm_socket.hpp	/^        void process_upstream ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
processed_seqnum	.\src\own.hpp	/^        uint64_t processed_seqnum;$/;"	m	class:zmq::own_t	access:private
protocol	.\src\address.hpp	/^        const std::string protocol;$/;"	m	struct:zmq::address_t	access:public
proxy	.\src\proxy.cpp	/^int zmq::proxy ($/;"	f	class:zmq	signature:( class socket_base_t *frontend_, class socket_base_t *backend_, class socket_base_t *capture_)
proxy	.\src\proxy.hpp	/^    int proxy ($/;"	p	namespace:zmq	signature:( class socket_base_t *frontend_, class socket_base_t *backend_, class socket_base_t *control_)
ptr	.\src\atomic_ptr.hpp	/^        volatile T *ptr;$/;"	m	class:zmq::atomic_ptr_t	access:private
pub_session_t	.\src\pub.cpp	/^zmq::pub_session_t::pub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::pub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
pub_session_t	.\src\pub.hpp	/^        pub_session_t (const pub_session_t&);$/;"	p	class:zmq::pub_session_t	access:private	signature:(const pub_session_t&)
pub_session_t	.\src\pub.hpp	/^        pub_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::pub_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
pub_session_t	.\src\pub.hpp	/^    class pub_session_t : public xpub_session_t$/;"	c	namespace:zmq	inherits:xpub_session_t
pub_t	.\src\pub.cpp	/^zmq::pub_t::pub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::pub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
pub_t	.\src\pub.hpp	/^        pub_t (const pub_t&);$/;"	p	class:zmq::pub_t	access:private	signature:(const pub_t&)
pub_t	.\src\pub.hpp	/^        pub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::pub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
pub_t	.\src\pub.hpp	/^    class pub_t : public xpub_t$/;"	c	namespace:zmq	inherits:xpub_t
pull_msg	.\src\i_msg_source.hpp	/^        virtual int pull_msg (msg_t *msg_) = 0;$/;"	p	struct:zmq::i_msg_source	access:public	signature:(msg_t *msg_)
pull_msg	.\src\session_base.cpp	/^int zmq::session_base_t::pull_msg (msg_t *msg_)$/;"	f	class:zmq::session_base_t	signature:(msg_t *msg_)
pull_msg	.\src\session_base.hpp	/^        virtual int pull_msg (msg_t *msg_);$/;"	p	class:zmq::session_base_t	access:public	signature:(msg_t *msg_)
pull_session_t	.\src\pull.cpp	/^zmq::pull_session_t::pull_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::pull_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
pull_session_t	.\src\pull.hpp	/^        pull_session_t (const pull_session_t&);$/;"	p	class:zmq::pull_session_t	access:private	signature:(const pull_session_t&)
pull_session_t	.\src\pull.hpp	/^        pull_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::pull_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
pull_session_t	.\src\pull.hpp	/^    class pull_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
pull_t	.\src\pull.cpp	/^zmq::pull_t::pull_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::pull_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
pull_t	.\src\pull.hpp	/^        pull_t (const pull_t&);$/;"	p	class:zmq::pull_t	access:private	signature:(const pull_t&)
pull_t	.\src\pull.hpp	/^        pull_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::pull_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
pull_t	.\src\pull.hpp	/^    class pull_t :$/;"	c	namespace:zmq	inherits:socket_base_t
push	.\src\yqueue.hpp	/^        inline void push ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
push_back	.\src\array.hpp	/^        inline void push_back (T *item_)$/;"	f	class:zmq::array_t	access:public	signature:(T *item_)
push_msg	.\src\i_msg_sink.hpp	/^        virtual int push_msg (msg_t *msg_) = 0;$/;"	p	struct:zmq::i_msg_sink	access:public	signature:(msg_t *msg_)
push_msg	.\src\req.cpp	/^int zmq::req_session_t::push_msg (msg_t *msg_)$/;"	f	class:zmq::req_session_t	signature:(msg_t *msg_)
push_msg	.\src\req.hpp	/^        int push_msg (msg_t *msg_);$/;"	p	class:zmq::req_session_t	access:public	signature:(msg_t *msg_)
push_msg	.\src\session_base.cpp	/^int zmq::session_base_t::push_msg (msg_t *msg_)$/;"	f	class:zmq::session_base_t	signature:(msg_t *msg_)
push_msg	.\src\session_base.hpp	/^        virtual int push_msg (msg_t *msg_);$/;"	p	class:zmq::session_base_t	access:public	signature:(msg_t *msg_)
push_msg	.\src\stream_engine.cpp	/^int zmq::stream_engine_t::push_msg (msg_t *msg_)$/;"	f	class:zmq::stream_engine_t	signature:(msg_t *msg_)
push_msg	.\src\stream_engine.hpp	/^        virtual int push_msg (msg_t *msg_);$/;"	p	class:zmq::stream_engine_t	access:public	signature:(msg_t *msg_)
push_session_t	.\src\push.cpp	/^zmq::push_session_t::push_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::push_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
push_session_t	.\src\push.hpp	/^        push_session_t (const push_session_t&);$/;"	p	class:zmq::push_session_t	access:private	signature:(const push_session_t&)
push_session_t	.\src\push.hpp	/^        push_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::push_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
push_session_t	.\src\push.hpp	/^    class push_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
push_t	.\src\push.cpp	/^zmq::push_t::push_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::push_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
push_t	.\src\push.hpp	/^        push_t (const push_t&);$/;"	p	class:zmq::push_t	access:private	signature:(const push_t&)
push_t	.\src\push.hpp	/^        push_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::push_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
push_t	.\src\push.hpp	/^    class push_t :$/;"	c	namespace:zmq	inherits:socket_base_t
put_uint16	.\src\wire.hpp	/^    inline void put_uint16 (unsigned char *buffer_, uint16_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint16_t value)
put_uint32	.\src\wire.hpp	/^    inline void put_uint32 (unsigned char *buffer_, uint32_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint32_t value)
put_uint64	.\src\wire.hpp	/^    inline void put_uint64 (unsigned char *buffer_, uint64_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint64_t value)
put_uint8	.\src\wire.hpp	/^    inline void put_uint8 (unsigned char *buffer_, uint8_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint8_t value)
queue	.\src\ypipe.hpp	/^        yqueue_t <T, N> queue;$/;"	m	class:zmq::ypipe_t	access:protected
r	.\src\signaler.hpp	/^        fd_t r;$/;"	m	class:zmq::signaler_t	access:private
r	.\src\ypipe.hpp	/^        T *r;$/;"	m	class:zmq::ypipe_t	access:protected
rate	.\src\options.hpp	/^        int rate;$/;"	m	struct:zmq::options_t	access:public
rcvbuf	.\src\options.hpp	/^        int rcvbuf;$/;"	m	struct:zmq::options_t	access:public
rcvhwm	.\src\options.hpp	/^        int rcvhwm;$/;"	m	struct:zmq::options_t	access:public
rcvmore	.\src\socket_base.hpp	/^        bool rcvmore;$/;"	m	class:zmq::socket_base_t	access:private
rcvtimeo	.\src\options.hpp	/^        int rcvtimeo;$/;"	m	struct:zmq::options_t	access:public
rdata_notify_handle	.\src\pgm_sender.hpp	/^        handle_t rdata_notify_handle;$/;"	m	class:zmq::pgm_sender_t	access:private
rdtsc	.\src\clock.cpp	/^uint64_t zmq::clock_t::rdtsc ()$/;"	f	class:zmq::clock_t	signature:()
rdtsc	.\src\clock.hpp	/^        static uint64_t rdtsc ();$/;"	p	class:zmq::clock_t	access:public	signature:()
reactor	.\src\devpoll.hpp	/^            zmq::i_poll_events *reactor;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
reactor	.\src\kqueue.hpp	/^            zmq::i_poll_events *reactor;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
read	.\src\pipe.cpp	/^bool zmq::pipe_t::read (msg_t *msg_)$/;"	f	class:zmq::pipe_t	signature:(msg_t *msg_)
read	.\src\pipe.hpp	/^        bool read (msg_t *msg_);$/;"	p	class:zmq::pipe_t	access:public	signature:(msg_t *msg_)
read	.\src\stream_engine.cpp	/^int zmq::stream_engine_t::read (void *data_, size_t size_)$/;"	f	class:zmq::stream_engine_t	signature:(void *data_, size_t size_)
read	.\src\stream_engine.hpp	/^        int read (void *data_, size_t size_);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(void *data_, size_t size_)
read	.\src\ypipe.hpp	/^        inline bool read (T *value_)$/;"	f	class:zmq::ypipe_t	access:public	signature:(T *value_)
read_activated	.\src\pipe.hpp	/^        virtual void read_activated (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
read_activated	.\src\session_base.cpp	/^void zmq::session_base_t::read_activated (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
read_activated	.\src\session_base.hpp	/^        void read_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
read_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::read_activated (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
read_activated	.\src\socket_base.hpp	/^        void read_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
read_pos	.\src\decoder.hpp	/^        unsigned char *read_pos;$/;"	m	class:zmq::decoder_base_t	access:private
readfds	.\src\select.hpp	/^        fd_set readfds;$/;"	m	class:zmq::select_t	access:private
reap	.\src\command.hpp	/^            reap,$/;"	e	enum:zmq::command_t::type_t
reap	.\src\command.hpp	/^            } reap;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon29	access:public
reaped	.\src\command.hpp	/^            reaped,$/;"	e	enum:zmq::command_t::type_t
reaped	.\src\command.hpp	/^            } reaped;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon30	access:public
reaper	.\src\ctx.hpp	/^        zmq::reaper_t *reaper;$/;"	m	class:zmq::ctx_t	access:private
reaper_t	.\src\reaper.cpp	/^zmq::reaper_t::reaper_t (class ctx_t *ctx_, uint32_t tid_) :$/;"	f	class:zmq::reaper_t	signature:(class ctx_t *ctx_, uint32_t tid_)
reaper_t	.\src\reaper.hpp	/^        reaper_t (const reaper_t&);$/;"	p	class:zmq::reaper_t	access:private	signature:(const reaper_t&)
reaper_t	.\src\reaper.hpp	/^        reaper_t (zmq::ctx_t *ctx_, uint32_t tid_);$/;"	p	class:zmq::reaper_t	access:public	signature:(zmq::ctx_t *ctx_, uint32_t tid_)
reaper_t	.\src\reaper.hpp	/^    class reaper_t : public object_t, public i_poll_events$/;"	c	namespace:zmq	inherits:object_t,i_poll_events
reaper_tid	.\src\ctx.hpp	/^            reaper_tid = 1$/;"	e	enum:zmq::ctx_t::__anon33
receive	.\src\pgm_socket.cpp	/^ssize_t zmq::pgm_socket_t::receive (void **raw_data_, const pgm_tsi_t **tsi_)$/;"	f	class:zmq::pgm_socket_t	signature:(void **raw_data_, const pgm_tsi_t **tsi_)
receive	.\src\pgm_socket.hpp	/^        ssize_t receive (void **data_, const pgm_tsi_t **tsi_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(void **data_, const pgm_tsi_t **tsi_)
receive_greeting	.\src\stream_engine.hpp	/^        int receive_greeting ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
receiver	.\src\pgm_socket.hpp	/^        bool receiver;$/;"	m	class:zmq::pgm_socket_t	access:private
receiving_reply	.\src\req.hpp	/^        bool receiving_reply;$/;"	m	class:zmq::req_t	access:private
reconnect_ivl	.\src\options.hpp	/^        int reconnect_ivl;$/;"	m	struct:zmq::options_t	access:public
reconnect_ivl_max	.\src\options.hpp	/^        int reconnect_ivl_max;$/;"	m	struct:zmq::options_t	access:public
reconnect_timer_id	.\src\ipc_connecter.hpp	/^        enum {reconnect_timer_id = 1};$/;"	e	enum:zmq::ipc_connecter_t::__anon35
reconnect_timer_id	.\src\tcp_connecter.hpp	/^        enum {reconnect_timer_id = 1};$/;"	e	enum:zmq::tcp_connecter_t::__anon50
recovery_ivl	.\src\options.hpp	/^        int recovery_ivl;$/;"	m	struct:zmq::options_t	access:public
recv	.\src\fq.cpp	/^int zmq::fq_t::recv (msg_t *msg_)$/;"	f	class:zmq::fq_t	signature:(msg_t *msg_)
recv	.\src\fq.hpp	/^        int recv (msg_t *msg_);$/;"	p	class:zmq::fq_t	access:public	signature:(msg_t *msg_)
recv	.\src\mailbox.cpp	/^int zmq::mailbox_t::recv (command_t *cmd_, int timeout_)$/;"	f	class:zmq::mailbox_t	signature:(command_t *cmd_, int timeout_)
recv	.\src\mailbox.hpp	/^        int recv (command_t *cmd_, int timeout_);$/;"	p	class:zmq::mailbox_t	access:public	signature:(command_t *cmd_, int timeout_)
recv	.\src\signaler.cpp	/^void zmq::signaler_t::recv ()$/;"	f	class:zmq::signaler_t	signature:()
recv	.\src\signaler.hpp	/^        void recv ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
recv	.\src\socket_base.cpp	/^int zmq::socket_base_t::recv (msg_t *msg_, int flags_)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *msg_, int flags_)
recv	.\src\socket_base.hpp	/^        int recv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
recv_identity	.\src\options.hpp	/^        bool recv_identity;$/;"	m	struct:zmq::options_t	access:public
recvpipe	.\src\fq.cpp	/^int zmq::fq_t::recvpipe (msg_t *msg_, pipe_t **pipe_)$/;"	f	class:zmq::fq_t	signature:(msg_t *msg_, pipe_t **pipe_)
recvpipe	.\src\fq.hpp	/^        int recvpipe (msg_t *msg_, pipe_t **pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(msg_t *msg_, pipe_t **pipe_)
refcnt	.\src\msg.hpp	/^            zmq::atomic_counter_t refcnt;$/;"	m	struct:zmq::msg_t::content_t	access:public
refcnt	.\src\trie.hpp	/^        uint32_t refcnt;$/;"	m	class:zmq::trie_t	access:private
register_endpoint	.\src\ctx.cpp	/^int zmq::ctx_t::register_endpoint (const char *addr_, endpoint_t &endpoint_)$/;"	f	class:zmq::ctx_t	signature:(const char *addr_, endpoint_t &endpoint_)
register_endpoint	.\src\ctx.hpp	/^        int register_endpoint (const char *addr_, endpoint_t &endpoint_);$/;"	p	class:zmq::ctx_t	access:public	signature:(const char *addr_, endpoint_t &endpoint_)
register_endpoint	.\src\object.cpp	/^int zmq::object_t::register_endpoint (const char *addr_, endpoint_t &endpoint_)$/;"	f	class:zmq::object_t	signature:(const char *addr_, endpoint_t &endpoint_)
register_endpoint	.\src\object.hpp	/^        int register_endpoint (const char *addr_, zmq::endpoint_t &endpoint_);$/;"	p	class:zmq::object_t	access:protected	signature:(const char *addr_, zmq::endpoint_t &endpoint_)
register_term_acks	.\src\own.cpp	/^void zmq::own_t::register_term_acks (int count_)$/;"	f	class:zmq::own_t	signature:(int count_)
register_term_acks	.\src\own.hpp	/^        void register_term_acks (int count_);$/;"	p	class:zmq::own_t	access:public	signature:(int count_)
rep_session_t	.\src\rep.cpp	/^zmq::rep_session_t::rep_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::rep_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
rep_session_t	.\src\rep.hpp	/^        rep_session_t (const rep_session_t&);$/;"	p	class:zmq::rep_session_t	access:private	signature:(const rep_session_t&)
rep_session_t	.\src\rep.hpp	/^        rep_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::rep_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
rep_session_t	.\src\rep.hpp	/^    class rep_session_t : public router_session_t$/;"	c	namespace:zmq	inherits:router_session_t
rep_t	.\src\rep.cpp	/^zmq::rep_t::rep_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::rep_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
rep_t	.\src\rep.hpp	/^        rep_t (const rep_t&);$/;"	p	class:zmq::rep_t	access:private	signature:(const rep_t&)
rep_t	.\src\rep.hpp	/^        rep_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::rep_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
rep_t	.\src\rep.hpp	/^    class rep_t : public router_t$/;"	c	namespace:zmq	inherits:router_t
req_session_t	.\src\req.cpp	/^zmq::req_session_t::req_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::req_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
req_session_t	.\src\req.hpp	/^        req_session_t (const req_session_t&);$/;"	p	class:zmq::req_session_t	access:private	signature:(const req_session_t&)
req_session_t	.\src\req.hpp	/^        req_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::req_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
req_session_t	.\src\req.hpp	/^    class req_session_t : public dealer_session_t$/;"	c	namespace:zmq	inherits:dealer_session_t
req_t	.\src\req.cpp	/^zmq::req_t::req_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::req_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
req_t	.\src\req.hpp	/^        req_t (const req_t&);$/;"	p	class:zmq::req_t	access:private	signature:(const req_t&)
req_t	.\src\req.hpp	/^        req_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::req_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
req_t	.\src\req.hpp	/^    class req_t : public dealer_t$/;"	c	namespace:zmq	inherits:dealer_t
request_begins	.\src\rep.hpp	/^        bool request_begins;$/;"	m	class:zmq::rep_t	access:private
reset	.\src\req.cpp	/^void zmq::req_session_t::reset ()$/;"	f	class:zmq::req_session_t	signature:()
reset	.\src\req.hpp	/^        void reset ();$/;"	p	class:zmq::req_session_t	access:public	signature:()
reset	.\src\session_base.cpp	/^void zmq::session_base_t::reset ()$/;"	f	class:zmq::session_base_t	signature:()
reset	.\src\session_base.hpp	/^        virtual void reset ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
reset_flags	.\src\msg.cpp	/^void zmq::msg_t::reset_flags (unsigned char flags_)$/;"	f	class:zmq::msg_t	signature:(unsigned char flags_)
reset_flags	.\src\msg.hpp	/^        void reset_flags (unsigned char flags_);$/;"	p	class:zmq::msg_t	access:public	signature:(unsigned char flags_)
reset_pollin	.\src\devpoll.cpp	/^void zmq::devpoll_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
reset_pollin	.\src\devpoll.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
reset_pollin	.\src\epoll.cpp	/^void zmq::epoll_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
reset_pollin	.\src\epoll.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
reset_pollin	.\src\io_object.cpp	/^void zmq::io_object_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
reset_pollin	.\src\io_object.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
reset_pollin	.\src\kqueue.cpp	/^void zmq::kqueue_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
reset_pollin	.\src\kqueue.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
reset_pollin	.\src\poll.cpp	/^void zmq::poll_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
reset_pollin	.\src\poll.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
reset_pollin	.\src\select.cpp	/^void zmq::select_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
reset_pollin	.\src\select.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
reset_pollout	.\src\devpoll.cpp	/^void zmq::devpoll_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
reset_pollout	.\src\devpoll.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
reset_pollout	.\src\epoll.cpp	/^void zmq::epoll_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
reset_pollout	.\src\epoll.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
reset_pollout	.\src\io_object.cpp	/^void zmq::io_object_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
reset_pollout	.\src\io_object.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
reset_pollout	.\src\kqueue.cpp	/^void zmq::kqueue_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
reset_pollout	.\src\kqueue.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
reset_pollout	.\src\poll.cpp	/^void zmq::poll_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
reset_pollout	.\src\poll.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
reset_pollout	.\src\select.cpp	/^void zmq::select_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
reset_pollout	.\src\select.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
resolve	.\src\ipc_address.cpp	/^int zmq::ipc_address_t::resolve (const char *path_)$/;"	f	class:zmq::ipc_address_t	signature:(const char *path_)
resolve	.\src\ipc_address.hpp	/^        int resolve (const char* path_);$/;"	p	class:zmq::ipc_address_t	access:public	signature:(const char* path_)
resolve	.\src\tcp_address.cpp	/^int zmq::tcp_address_mask_t::resolve (const char *name_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_mask_t	signature:(const char *name_, bool ipv4only_)
resolve	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve (const char *name_, bool local_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_t	signature:(const char *name_, bool local_, bool ipv4only_)
resolve	.\src\tcp_address.hpp	/^        int resolve (const char* name_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:(const char* name_, bool ipv4only_)
resolve	.\src\tcp_address.hpp	/^        int resolve (const char* name_, bool local_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:public	signature:(const char* name_, bool local_, bool ipv4only_)
resolve_hostname	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve_hostname (const char *hostname_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_t	signature:(const char *hostname_, bool ipv4only_)
resolve_hostname	.\src\tcp_address.hpp	/^        int resolve_hostname (const char *hostname_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:protected	signature:(const char *hostname_, bool ipv4only_)
resolve_interface	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve_interface (const char *interface_,$/;"	f	class:zmq::tcp_address_t	signature:(const char *interface_, bool ipv4only_)
resolve_interface	.\src\tcp_address.hpp	/^        int resolve_interface (const char *interface_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:protected	signature:(const char *interface_, bool ipv4only_)
resolve_nic_name	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve_nic_name (const char *nic_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_t	signature:(const char *nic_, bool ipv4only_)
resolve_nic_name	.\src\tcp_address.hpp	/^        int resolve_nic_name (const char *nic_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:protected	signature:(const char *nic_, bool ipv4only_)
resolved	.\src\address.hpp	/^        } resolved;$/;"	m	struct:zmq::address_t	typeref:union:zmq::address_t::__anon14	access:public
retired	.\src\epoll.hpp	/^        retired_t retired;$/;"	m	class:zmq::epoll_t	access:private
retired	.\src\kqueue.hpp	/^        retired_t retired;$/;"	m	class:zmq::kqueue_t	access:private
retired	.\src\poll.hpp	/^        bool retired;$/;"	m	class:zmq::poll_t	access:private
retired	.\src\select.hpp	/^        bool retired;$/;"	m	class:zmq::select_t	access:private
retired_fd	.\src\fd.hpp	/^    enum {retired_fd = (fd_t)(~0)};$/;"	e	enum:zmq::__anon34
retired_t	.\src\epoll.hpp	/^        typedef std::vector <poll_entry_t*> retired_t;$/;"	t	class:zmq::epoll_t	access:private
retired_t	.\src\kqueue.hpp	/^        typedef std::vector <poll_entry_t*> retired_t;$/;"	t	class:zmq::kqueue_t	access:private
revents	.\include\zmq.h	/^    short revents;$/;"	m	struct:__anon13	access:public
rm	.\src\mtrie.cpp	/^bool zmq::mtrie_t::rm (unsigned char *prefix_, size_t size_, pipe_t *pipe_)$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
rm	.\src\mtrie.cpp	/^void zmq::mtrie_t::rm (pipe_t *pipe_,$/;"	f	class:zmq::mtrie_t	signature:(pipe_t *pipe_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
rm	.\src\mtrie.hpp	/^        bool rm (unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_);$/;"	p	class:zmq::mtrie_t	access:public	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
rm	.\src\mtrie.hpp	/^        void rm (zmq::pipe_t *pipe_,$/;"	p	class:zmq::mtrie_t	access:public	signature:(zmq::pipe_t *pipe_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
rm	.\src\trie.cpp	/^bool zmq::trie_t::rm (unsigned char *prefix_, size_t size_)$/;"	f	class:zmq::trie_t	signature:(unsigned char *prefix_, size_t size_)
rm	.\src\trie.hpp	/^        bool rm (unsigned char *prefix_, size_t size_);$/;"	p	class:zmq::trie_t	access:public	signature:(unsigned char *prefix_, size_t size_)
rm_fd	.\src\devpoll.cpp	/^void zmq::devpoll_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
rm_fd	.\src\devpoll.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
rm_fd	.\src\epoll.cpp	/^void zmq::epoll_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
rm_fd	.\src\epoll.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
rm_fd	.\src\io_object.cpp	/^void zmq::io_object_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
rm_fd	.\src\io_object.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
rm_fd	.\src\kqueue.cpp	/^void zmq::kqueue_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
rm_fd	.\src\kqueue.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
rm_fd	.\src\poll.cpp	/^void zmq::poll_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
rm_fd	.\src\poll.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
rm_fd	.\src\select.cpp	/^void zmq::select_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
rm_fd	.\src\select.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
rm_helper	.\src\mtrie.cpp	/^bool zmq::mtrie_t::rm_helper (unsigned char *prefix_, size_t size_,$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
rm_helper	.\src\mtrie.cpp	/^void zmq::mtrie_t::rm_helper (pipe_t *pipe_, unsigned char **buff_,$/;"	f	class:zmq::mtrie_t	signature:(pipe_t *pipe_, unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
rm_helper	.\src\mtrie.hpp	/^        bool rm_helper (unsigned char *prefix_, size_t size_,$/;"	p	class:zmq::mtrie_t	access:private	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
rm_helper	.\src\mtrie.hpp	/^        void rm_helper (zmq::pipe_t *pipe_, unsigned char **buff_,$/;"	p	class:zmq::mtrie_t	access:private	signature:(zmq::pipe_t *pipe_, unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
rm_refs	.\src\msg.cpp	/^bool zmq::msg_t::rm_refs (int refs_)$/;"	f	class:zmq::msg_t	signature:(int refs_)
rm_refs	.\src\msg.hpp	/^        bool rm_refs (int refs_);$/;"	p	class:zmq::msg_t	access:public	signature:(int refs_)
rollback	.\src\pipe.cpp	/^void zmq::pipe_t::rollback ()$/;"	f	class:zmq::pipe_t	signature:()
rollback	.\src\pipe.hpp	/^        void rollback ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
rollback	.\src\router.cpp	/^int zmq::router_t::rollback (void)$/;"	f	class:zmq::router_t	signature:(void)
rollback	.\src\router.hpp	/^        int rollback ();$/;"	p	class:zmq::router_t	access:protected	signature:()
router_session_t	.\src\router.cpp	/^zmq::router_session_t::router_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::router_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
router_session_t	.\src\router.hpp	/^        router_session_t (const router_session_t&);$/;"	p	class:zmq::router_session_t	access:private	signature:(const router_session_t&)
router_session_t	.\src\router.hpp	/^        router_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::router_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
router_session_t	.\src\router.hpp	/^    class router_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
router_t	.\src\router.cpp	/^zmq::router_t::router_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::router_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
router_t	.\src\router.hpp	/^        router_t (const router_t&);$/;"	p	class:zmq::router_t	access:private	signature:(const router_t&)
router_t	.\src\router.hpp	/^        router_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
router_t	.\src\router.hpp	/^    class router_t :$/;"	c	namespace:zmq	inherits:socket_base_t
rx_timer_id	.\src\pgm_receiver.hpp	/^        enum {rx_timer_id = 0xa1};$/;"	e	enum:zmq::pgm_receiver_t::__anon44
rx_timer_id	.\src\pgm_sender.hpp	/^        enum {tx_timer_id = 0xa0, rx_timer_id = 0xa1};$/;"	e	enum:zmq::pgm_sender_t::__anon45
s	.\src\ipc_connecter.hpp	/^        fd_t s;$/;"	m	class:zmq::ipc_connecter_t	access:private
s	.\src\ipc_listener.hpp	/^        fd_t s;$/;"	m	class:zmq::ipc_listener_t	access:private
s	.\src\stream_engine.hpp	/^        fd_t s;$/;"	m	class:zmq::stream_engine_t	access:private
s	.\src\tcp_connecter.hpp	/^        fd_t s;$/;"	m	class:zmq::tcp_connecter_t	access:private
s	.\src\tcp_listener.hpp	/^        fd_t s;$/;"	m	class:zmq::tcp_listener_t	access:private
s_recvmsg	.\src\zmq.cpp	/^s_recvmsg (zmq::socket_base_t *s_, zmq_msg_t *msg_, int flags_)$/;"	f	file:	signature:(zmq::socket_base_t *s_, zmq_msg_t *msg_, int flags_)
s_sendmsg	.\src\zmq.cpp	/^s_sendmsg (zmq::socket_base_t *s_, zmq_msg_t *msg_, int flags_)$/;"	f	file:	signature:(zmq::socket_base_t *s_, zmq_msg_t *msg_, int flags_)
seed_random	.\src\random.cpp	/^void zmq::seed_random ()$/;"	f	class:zmq	signature:()
seed_random	.\src\random.hpp	/^    void seed_random ();$/;"	p	namespace:zmq	signature:()
select_t	.\src\select.cpp	/^zmq::select_t::select_t () :$/;"	f	class:zmq::select_t	signature:()
select_t	.\src\select.hpp	/^        select_t ();$/;"	p	class:zmq::select_t	access:public	signature:()
select_t	.\src\select.hpp	/^        select_t (const select_t&);$/;"	p	class:zmq::select_t	access:private	signature:(const select_t&)
select_t	.\src\select.hpp	/^    class select_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
send	.\src\lb.cpp	/^int zmq::lb_t::send (msg_t *msg_, int flags_)$/;"	f	class:zmq::lb_t	signature:(msg_t *msg_, int flags_)
send	.\src\lb.hpp	/^        int send (msg_t *msg_, int flags_);$/;"	p	class:zmq::lb_t	access:public	signature:(msg_t *msg_, int flags_)
send	.\src\mailbox.cpp	/^void zmq::mailbox_t::send (const command_t &cmd_)$/;"	f	class:zmq::mailbox_t	signature:(const command_t &cmd_)
send	.\src\mailbox.hpp	/^        void send (const command_t &cmd_);$/;"	p	class:zmq::mailbox_t	access:public	signature:(const command_t &cmd_)
send	.\src\pgm_socket.cpp	/^size_t zmq::pgm_socket_t::send (unsigned char *data_, size_t data_len_)$/;"	f	class:zmq::pgm_socket_t	signature:(unsigned char *data_, size_t data_len_)
send	.\src\pgm_socket.hpp	/^        size_t send (unsigned char *data_, size_t data_len_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(unsigned char *data_, size_t data_len_)
send	.\src\signaler.cpp	/^void zmq::signaler_t::send ()$/;"	f	class:zmq::signaler_t	signature:()
send	.\src\signaler.hpp	/^        void send ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
send	.\src\socket_base.cpp	/^int zmq::socket_base_t::send (msg_t *msg_, int flags_)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *msg_, int flags_)
send	.\src\socket_base.hpp	/^        int send (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
send_activate_read	.\src\object.cpp	/^void zmq::object_t::send_activate_read (pipe_t *destination_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_)
send_activate_read	.\src\object.hpp	/^        void send_activate_read (zmq::pipe_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_)
send_activate_write	.\src\object.cpp	/^void zmq::object_t::send_activate_write (pipe_t *destination_,$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_, uint64_t msgs_read_)
send_activate_write	.\src\object.hpp	/^        void send_activate_write (zmq::pipe_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_, uint64_t msgs_read_)
send_attach	.\src\object.cpp	/^void zmq::object_t::send_attach (session_base_t *destination_,$/;"	f	class:zmq::object_t	signature:(session_base_t *destination_, i_engine *engine_, bool inc_seqnum_)
send_attach	.\src\object.hpp	/^        void send_attach (zmq::session_base_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::session_base_t *destination_, zmq::i_engine *engine_, bool inc_seqnum_ = true)
send_bind	.\src\object.cpp	/^void zmq::object_t::send_bind (own_t *destination_, pipe_t *pipe_,$/;"	f	class:zmq::object_t	signature:(own_t *destination_, pipe_t *pipe_, bool inc_seqnum_)
send_bind	.\src\object.hpp	/^        void send_bind (zmq::own_t *destination_, zmq::pipe_t *pipe_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, zmq::pipe_t *pipe_, bool inc_seqnum_ = true)
send_command	.\src\ctx.cpp	/^void zmq::ctx_t::send_command (uint32_t tid_, const command_t &command_)$/;"	f	class:zmq::ctx_t	signature:(uint32_t tid_, const command_t &command_)
send_command	.\src\ctx.hpp	/^        void send_command (uint32_t tid_, const command_t &command_);$/;"	p	class:zmq::ctx_t	access:public	signature:(uint32_t tid_, const command_t &command_)
send_command	.\src\object.cpp	/^void zmq::object_t::send_command (command_t &cmd_)$/;"	f	class:zmq::object_t	signature:(command_t &cmd_)
send_command	.\src\object.hpp	/^        void send_command (command_t &cmd_);$/;"	p	class:zmq::object_t	access:private	signature:(command_t &cmd_)
send_done	.\src\object.cpp	/^void zmq::object_t::send_done ()$/;"	f	class:zmq::object_t	signature:()
send_done	.\src\object.hpp	/^        void send_done ();$/;"	p	class:zmq::object_t	access:protected	signature:()
send_hiccup	.\src\object.cpp	/^void zmq::object_t::send_hiccup (pipe_t *destination_, void *pipe_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_, void *pipe_)
send_hiccup	.\src\object.hpp	/^        void send_hiccup (zmq::pipe_t *destination_, void *pipe_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_, void *pipe_)
send_own	.\src\object.cpp	/^void zmq::object_t::send_own (own_t *destination_, own_t *object_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_, own_t *object_)
send_own	.\src\object.hpp	/^        void send_own (zmq::own_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, zmq::own_t *object_)
send_pipe_term	.\src\object.cpp	/^void zmq::object_t::send_pipe_term (pipe_t *destination_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_)
send_pipe_term	.\src\object.hpp	/^        void send_pipe_term (zmq::pipe_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_)
send_pipe_term_ack	.\src\object.cpp	/^void zmq::object_t::send_pipe_term_ack (pipe_t *destination_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_)
send_pipe_term_ack	.\src\object.hpp	/^        void send_pipe_term_ack (zmq::pipe_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_)
send_plug	.\src\object.cpp	/^void zmq::object_t::send_plug (own_t *destination_, bool inc_seqnum_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_, bool inc_seqnum_)
send_plug	.\src\object.hpp	/^        void send_plug (zmq::own_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, bool inc_seqnum_ = true)
send_reap	.\src\object.cpp	/^void zmq::object_t::send_reap (class socket_base_t *socket_)$/;"	f	class:zmq::object_t	signature:(class socket_base_t *socket_)
send_reap	.\src\object.hpp	/^        void send_reap (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
send_reaped	.\src\object.cpp	/^void zmq::object_t::send_reaped ()$/;"	f	class:zmq::object_t	signature:()
send_reaped	.\src\object.hpp	/^        void send_reaped ();$/;"	p	class:zmq::object_t	access:protected	signature:()
send_stop	.\src\object.cpp	/^void zmq::object_t::send_stop ()$/;"	f	class:zmq::object_t	signature:()
send_stop	.\src\object.hpp	/^        void send_stop ();$/;"	p	class:zmq::object_t	access:protected	signature:()
send_subscription	.\src\xsub.cpp	/^void zmq::xsub_t::send_subscription (unsigned char *data_, size_t size_,$/;"	f	class:zmq::xsub_t	signature:(unsigned char *data_, size_t size_, void *arg_)
send_subscription	.\src\xsub.hpp	/^        static void send_subscription (unsigned char *data_, size_t size_,$/;"	p	class:zmq::xsub_t	access:private	signature:(unsigned char *data_, size_t size_, void *arg_)
send_term	.\src\object.cpp	/^void zmq::object_t::send_term (own_t *destination_, int linger_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_, int linger_)
send_term	.\src\object.hpp	/^        void send_term (zmq::own_t *destination_, int linger_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, int linger_)
send_term_ack	.\src\object.cpp	/^void zmq::object_t::send_term_ack (own_t *destination_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_)
send_term_ack	.\src\object.hpp	/^        void send_term_ack (zmq::own_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_)
send_term_req	.\src\object.cpp	/^void zmq::object_t::send_term_req (own_t *destination_,$/;"	f	class:zmq::object_t	signature:(own_t *destination_, own_t *object_)
send_term_req	.\src\object.hpp	/^        void send_term_req (zmq::own_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, zmq::own_t *object_)
send_to_all	.\src\dist.cpp	/^int zmq::dist_t::send_to_all (msg_t *msg_, int flags_)$/;"	f	class:zmq::dist_t	signature:(msg_t *msg_, int flags_)
send_to_all	.\src\dist.hpp	/^        int send_to_all (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
send_to_matching	.\src\dist.cpp	/^int zmq::dist_t::send_to_matching (msg_t *msg_, int flags_)$/;"	f	class:zmq::dist_t	signature:(msg_t *msg_, int flags_)
send_to_matching	.\src\dist.hpp	/^        int send_to_matching (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
send_unsubscription	.\src\xpub.cpp	/^void zmq::xpub_t::send_unsubscription (unsigned char *data_, size_t size_,$/;"	f	class:zmq::xpub_t	signature:(unsigned char *data_, size_t size_, void *arg_)
send_unsubscription	.\src\xpub.hpp	/^        static void send_unsubscription (unsigned char *data_, size_t size_,$/;"	p	class:zmq::xpub_t	access:private	signature:(unsigned char *data_, size_t size_, void *arg_)
sending_reply	.\src\rep.hpp	/^        bool sending_reply;$/;"	m	class:zmq::rep_t	access:private
sent_seqnum	.\src\own.hpp	/^        atomic_counter_t sent_seqnum;$/;"	m	class:zmq::own_t	access:private
session	.\src\ipc_connecter.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::ipc_connecter_t	access:private
session	.\src\pgm_receiver.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::pgm_receiver_t	access:private
session	.\src\stream_engine.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::stream_engine_t	access:private
session	.\src\tcp_connecter.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::tcp_connecter_t	access:private
session_base_t	.\src\session_base.cpp	/^zmq::session_base_t::session_base_t (class io_thread_t *io_thread_,$/;"	f	class:zmq::session_base_t	signature:(class io_thread_t *io_thread_, bool connect_, class socket_base_t *socket_, const options_t &options_, const address_t *addr_)
session_base_t	.\src\session_base.hpp	/^        session_base_t (const session_base_t&);$/;"	p	class:zmq::session_base_t	access:private	signature:(const session_base_t&)
session_base_t	.\src\session_base.hpp	/^        session_base_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::session_base_t	access:protected	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
session_base_t	.\src\session_base.hpp	/^    class session_base_t :$/;"	c	namespace:zmq	inherits:own_t,io_object_t,i_pipe_events,i_msg_source,i_msg_sink
set	.\src\atomic_counter.hpp	/^        inline void set (integer_t value_)$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t value_)
set	.\src\atomic_ptr.hpp	/^        inline void set (T *ptr_)$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:(T *ptr_)
set	.\src\ctx.cpp	/^int zmq::ctx_t::set (int option_, int optval_)$/;"	f	class:zmq::ctx_t	signature:(int option_, int optval_)
set	.\src\ctx.hpp	/^        int set (int option_, int optval_);$/;"	p	class:zmq::ctx_t	access:public	signature:(int option_, int optval_)
set_address	.\src\ipc_listener.cpp	/^int zmq::ipc_listener_t::set_address (const char *addr_)$/;"	f	class:zmq::ipc_listener_t	signature:(const char *addr_)
set_address	.\src\ipc_listener.hpp	/^        int set_address (const char *addr_);$/;"	p	class:zmq::ipc_listener_t	access:public	signature:(const char *addr_)
set_address	.\src\tcp_listener.cpp	/^int zmq::tcp_listener_t::set_address (const char *addr_)$/;"	f	class:zmq::tcp_listener_t	signature:(const char *addr_)
set_address	.\src\tcp_listener.hpp	/^        int set_address (const char *addr_);$/;"	p	class:zmq::tcp_listener_t	access:public	signature:(const char *addr_)
set_array_index	.\src\array.hpp	/^        inline void set_array_index (int index_)$/;"	f	class:zmq::array_item_t	access:public	signature:(int index_)
set_event_sink	.\src\pipe.cpp	/^void zmq::pipe_t::set_event_sink (i_pipe_events *sink_)$/;"	f	class:zmq::pipe_t	signature:(i_pipe_events *sink_)
set_event_sink	.\src\pipe.hpp	/^        void set_event_sink (i_pipe_events *sink_);$/;"	p	class:zmq::pipe_t	access:public	signature:(i_pipe_events *sink_)
set_flags	.\src\msg.cpp	/^void zmq::msg_t::set_flags (unsigned char flags_)$/;"	f	class:zmq::msg_t	signature:(unsigned char flags_)
set_flags	.\src\msg.hpp	/^        void set_flags (unsigned char flags_);$/;"	p	class:zmq::msg_t	access:public	signature:(unsigned char flags_)
set_identity	.\src\pipe.cpp	/^void zmq::pipe_t::set_identity (const blob_t &identity_)$/;"	f	class:zmq::pipe_t	signature:(const blob_t &identity_)
set_identity	.\src\pipe.hpp	/^        void set_identity (const blob_t &identity_);$/;"	p	class:zmq::pipe_t	access:public	signature:(const blob_t &identity_)
set_msg_sink	.\src\decoder.cpp	/^void zmq::decoder_t::set_msg_sink (i_msg_sink *msg_sink_)$/;"	f	class:zmq::decoder_t	signature:(i_msg_sink *msg_sink_)
set_msg_sink	.\src\decoder.hpp	/^        void set_msg_sink (i_msg_sink *msg_sink_);$/;"	p	class:zmq::decoder_t	access:public	signature:(i_msg_sink *msg_sink_)
set_msg_sink	.\src\i_decoder.hpp	/^        virtual void set_msg_sink (i_msg_sink *msg_sink_) = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:(i_msg_sink *msg_sink_)
set_msg_sink	.\src\v1_decoder.cpp	/^void zmq::v1_decoder_t::set_msg_sink (i_msg_sink *msg_sink_)$/;"	f	class:zmq::v1_decoder_t	signature:(i_msg_sink *msg_sink_)
set_msg_sink	.\src\v1_decoder.hpp	/^        virtual void set_msg_sink (i_msg_sink *msg_sink_);$/;"	p	class:zmq::v1_decoder_t	access:public	signature:(i_msg_sink *msg_sink_)
set_msg_source	.\src\encoder.cpp	/^void zmq::encoder_t::set_msg_source (i_msg_source *msg_source_)$/;"	f	class:zmq::encoder_t	signature:(i_msg_source *msg_source_)
set_msg_source	.\src\encoder.hpp	/^        void set_msg_source (i_msg_source *msg_source_);$/;"	p	class:zmq::encoder_t	access:public	signature:(i_msg_source *msg_source_)
set_msg_source	.\src\i_encoder.hpp	/^        virtual void set_msg_source (i_msg_source *msg_source_) = 0;$/;"	p	struct:zmq::i_encoder	access:public	signature:(i_msg_source *msg_source_)
set_msg_source	.\src\v1_encoder.cpp	/^void zmq::v1_encoder_t::set_msg_source (i_msg_source *msg_source_)$/;"	f	class:zmq::v1_encoder_t	signature:(i_msg_source *msg_source_)
set_msg_source	.\src\v1_encoder.hpp	/^        virtual void set_msg_source (i_msg_source *msg_source_);$/;"	p	class:zmq::v1_encoder_t	access:public	signature:(i_msg_source *msg_source_)
set_owner	.\src\own.cpp	/^void zmq::own_t::set_owner (own_t *owner_)$/;"	f	class:zmq::own_t	signature:(own_t *owner_)
set_owner	.\src\own.hpp	/^        void set_owner (own_t *owner_);$/;"	p	class:zmq::own_t	access:private	signature:(own_t *owner_)
set_peer	.\src\pipe.cpp	/^void zmq::pipe_t::set_peer (pipe_t *peer_)$/;"	f	class:zmq::pipe_t	signature:(pipe_t *peer_)
set_peer	.\src\pipe.hpp	/^        void set_peer (pipe_t *pipe_);$/;"	p	class:zmq::pipe_t	access:private	signature:(pipe_t *pipe_)
set_pollin	.\src\devpoll.cpp	/^void zmq::devpoll_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
set_pollin	.\src\devpoll.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
set_pollin	.\src\epoll.cpp	/^void zmq::epoll_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
set_pollin	.\src\epoll.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
set_pollin	.\src\io_object.cpp	/^void zmq::io_object_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
set_pollin	.\src\io_object.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
set_pollin	.\src\kqueue.cpp	/^void zmq::kqueue_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
set_pollin	.\src\kqueue.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
set_pollin	.\src\poll.cpp	/^void zmq::poll_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
set_pollin	.\src\poll.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
set_pollin	.\src\select.cpp	/^void zmq::select_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
set_pollin	.\src\select.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
set_pollout	.\src\devpoll.cpp	/^void zmq::devpoll_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
set_pollout	.\src\devpoll.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
set_pollout	.\src\epoll.cpp	/^void zmq::epoll_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
set_pollout	.\src\epoll.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
set_pollout	.\src\io_object.cpp	/^void zmq::io_object_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
set_pollout	.\src\io_object.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
set_pollout	.\src\kqueue.cpp	/^void zmq::kqueue_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
set_pollout	.\src\kqueue.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
set_pollout	.\src\poll.cpp	/^void zmq::poll_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
set_pollout	.\src\poll.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
set_pollout	.\src\select.cpp	/^void zmq::select_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
set_pollout	.\src\select.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
setsockopt	.\src\options.cpp	/^int zmq::options_t::setsockopt (int option_, const void *optval_,$/;"	f	class:zmq::options_t	signature:(int option_, const void *optval_, size_t optvallen_)
setsockopt	.\src\options.hpp	/^        int setsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	struct:zmq::options_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
setsockopt	.\src\socket_base.cpp	/^int zmq::socket_base_t::setsockopt (int option_, const void *optval_,$/;"	f	class:zmq::socket_base_t	signature:(int option_, const void *optval_, size_t optvallen_)
setsockopt	.\src\socket_base.hpp	/^        int setsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
shared	.\src\msg.hpp	/^            shared = 128$/;"	e	enum:zmq::msg_t::__anon36
signaler	.\src\mailbox.hpp	/^        signaler_t signaler;$/;"	m	class:zmq::mailbox_t	access:private
signaler_port	.\src\config.hpp	/^        signaler_port = 5905$/;"	e	enum:zmq::__anon32
signaler_t	.\src\signaler.cpp	/^zmq::signaler_t::signaler_t ()$/;"	f	class:zmq::signaler_t	signature:()
signaler_t	.\src\signaler.hpp	/^        signaler_t ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
signaler_t	.\src\signaler.hpp	/^        signaler_t (const signaler_t&);$/;"	p	class:zmq::signaler_t	access:private	signature:(const signaler_t&)
signaler_t	.\src\signaler.hpp	/^    class signaler_t$/;"	c	namespace:zmq
sink	.\src\pipe.hpp	/^        i_pipe_events *sink;$/;"	m	class:zmq::pipe_t	access:private
sink	.\src\poller_base.hpp	/^            zmq::i_poll_events *sink;$/;"	m	struct:zmq::poller_base_t::timer_info_t	access:public
size	.\src\array.hpp	/^        inline size_type size ()$/;"	f	class:zmq::array_t	access:public	signature:()
size	.\src\msg.cpp	/^size_t zmq::msg_t::size ()$/;"	f	class:zmq::msg_t	signature:()
size	.\src\msg.hpp	/^                unsigned char size;$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
size	.\src\msg.hpp	/^            size_t size;$/;"	m	struct:zmq::msg_t::content_t	access:public
size	.\src\msg.hpp	/^        size_t size ();$/;"	p	class:zmq::msg_t	access:public	signature:()
size_ready	.\src\encoder.cpp	/^bool zmq::encoder_t::size_ready ()$/;"	f	class:zmq::encoder_t	signature:()
size_ready	.\src\encoder.hpp	/^        bool size_ready ();$/;"	p	class:zmq::encoder_t	access:private	signature:()
size_ready	.\src\v1_encoder.cpp	/^bool zmq::v1_encoder_t::size_ready ()$/;"	f	class:zmq::v1_encoder_t	signature:()
size_ready	.\src\v1_encoder.hpp	/^        bool size_ready ();$/;"	p	class:zmq::v1_encoder_t	access:private	signature:()
size_type	.\src\array.hpp	/^        typedef typename std::vector <T*>::size_type size_type;$/;"	t	class:zmq::array_t	access:public
slot_count	.\src\ctx.hpp	/^        uint32_t slot_count;$/;"	m	class:zmq::ctx_t	access:private
slot_sync	.\src\ctx.hpp	/^        mutex_t slot_sync;$/;"	m	class:zmq::ctx_t	access:private
slots	.\src\ctx.hpp	/^        mailbox_t **slots;$/;"	m	class:zmq::ctx_t	access:private
sndbuf	.\src\options.hpp	/^        int sndbuf;$/;"	m	struct:zmq::options_t	access:public
sndhwm	.\src\options.hpp	/^        int sndhwm;$/;"	m	struct:zmq::options_t	access:public
sndtimeo	.\src\options.hpp	/^        int sndtimeo;$/;"	m	struct:zmq::options_t	access:public
sock	.\src\pgm_socket.hpp	/^        pgm_sock_t* sock;$/;"	m	class:zmq::pgm_socket_t	access:private
socket	.\include\zmq.h	/^    void *socket;$/;"	m	struct:__anon13	access:public
socket	.\src\command.hpp	/^                zmq::socket_base_t *socket;$/;"	m	struct:zmq::command_t::__anon15::__anon29	access:public
socket	.\src\ctx.hpp	/^        socket_base_t *socket;$/;"	m	struct:zmq::endpoint_t	access:public
socket	.\src\ipc_connecter.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::ipc_connecter_t	access:private
socket	.\src\ipc_listener.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::ipc_listener_t	access:private
socket	.\src\session_base.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::session_base_t	access:private
socket	.\src\stream_engine.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::stream_engine_t	access:private
socket	.\src\tcp_connecter.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::tcp_connecter_t	access:private
socket	.\src\tcp_listener.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::tcp_listener_t	access:private
socket_base_t	.\src\socket_base.cpp	/^zmq::socket_base_t::socket_base_t (ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::socket_base_t	signature:(ctx_t *parent_, uint32_t tid_, int sid_)
socket_base_t	.\src\socket_base.hpp	/^        socket_base_t (const socket_base_t&);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const socket_base_t&)
socket_base_t	.\src\socket_base.hpp	/^        socket_base_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
socket_base_t	.\src\socket_base.hpp	/^    class socket_base_t :$/;"	c	namespace:zmq	inherits:own_t,array_item_t,i_poll_events,i_pipe_events
socket_handle	.\src\pgm_receiver.hpp	/^        handle_t socket_handle;$/;"	m	class:zmq::pgm_receiver_t	access:private
socket_id	.\src\options.hpp	/^        int socket_id;$/;"	m	struct:zmq::options_t	access:public
sockets	.\src\ctx.hpp	/^        sockets_t sockets;$/;"	m	class:zmq::ctx_t	access:private
sockets	.\src\reaper.hpp	/^        int sockets;$/;"	m	class:zmq::reaper_t	access:private
sockets_t	.\src\ctx.hpp	/^        typedef array_t <socket_base_t> sockets_t;$/;"	t	class:zmq::ctx_t	access:private
source_set_err	.\src\select.hpp	/^        fd_set source_set_err;$/;"	m	class:zmq::select_t	access:private
source_set_in	.\src\select.hpp	/^        fd_set source_set_in;$/;"	m	class:zmq::select_t	access:private
source_set_out	.\src\select.hpp	/^        fd_set source_set_out;$/;"	m	class:zmq::select_t	access:private
spare_chunk	.\src\yqueue.hpp	/^        atomic_ptr_t<chunk_t> spare_chunk;$/;"	m	class:zmq::yqueue_t	access:private
stalled	.\src\decoder.hpp	/^        bool stalled ()$/;"	f	class:zmq::decoder_base_t	access:public	signature:()
stalled	.\src\i_decoder.hpp	/^        virtual bool stalled () = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:()
start	.\src\devpoll.cpp	/^void zmq::devpoll_t::start ()$/;"	f	class:zmq::devpoll_t	signature:()
start	.\src\devpoll.hpp	/^        void start ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
start	.\src\epoll.cpp	/^void zmq::epoll_t::start ()$/;"	f	class:zmq::epoll_t	signature:()
start	.\src\epoll.hpp	/^        void start ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
start	.\src\io_thread.cpp	/^void zmq::io_thread_t::start ()$/;"	f	class:zmq::io_thread_t	signature:()
start	.\src\io_thread.hpp	/^        void start ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
start	.\src\kqueue.cpp	/^void zmq::kqueue_t::start ()$/;"	f	class:zmq::kqueue_t	signature:()
start	.\src\kqueue.hpp	/^        void start ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
start	.\src\poll.cpp	/^void zmq::poll_t::start ()$/;"	f	class:zmq::poll_t	signature:()
start	.\src\poll.hpp	/^        void start ();$/;"	p	class:zmq::poll_t	access:public	signature:()
start	.\src\reaper.cpp	/^void zmq::reaper_t::start ()$/;"	f	class:zmq::reaper_t	signature:()
start	.\src\reaper.hpp	/^        void start ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
start	.\src\select.cpp	/^void zmq::select_t::start ()$/;"	f	class:zmq::select_t	signature:()
start	.\src\select.hpp	/^        void start ();$/;"	p	class:zmq::select_t	access:public	signature:()
start	.\src\thread.cpp	/^void zmq::thread_t::start (thread_fn *tfn_, void *arg_)$/;"	f	class:zmq::thread_t	signature:(thread_fn *tfn_, void *arg_)
start	.\src\thread.hpp	/^        void start (thread_fn *tfn_, void *arg_);$/;"	p	class:zmq::thread_t	access:public	signature:(thread_fn *tfn_, void *arg_)
start_connecting	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::start_connecting ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
start_connecting	.\src\ipc_connecter.hpp	/^        void start_connecting ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
start_connecting	.\src\session_base.cpp	/^void zmq::session_base_t::start_connecting (bool wait_)$/;"	f	class:zmq::session_base_t	signature:(bool wait_)
start_connecting	.\src\session_base.hpp	/^        void start_connecting (bool wait_);$/;"	p	class:zmq::session_base_t	access:private	signature:(bool wait_)
start_connecting	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::start_connecting ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
start_connecting	.\src\tcp_connecter.hpp	/^        void start_connecting ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
start_reaping	.\src\socket_base.cpp	/^void zmq::socket_base_t::start_reaping (poller_t *poller_)$/;"	f	class:zmq::socket_base_t	signature:(poller_t *poller_)
start_reaping	.\src\socket_base.hpp	/^        void start_reaping (poller_t *poller_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(poller_t *poller_)
starting	.\src\ctx.hpp	/^        bool starting;$/;"	m	class:zmq::ctx_t	access:private
state	.\src\pipe.hpp	/^        } state;$/;"	m	class:zmq::pipe_t	typeref:enum:zmq::pipe_t::__anon46	access:private
state	.\src\req.hpp	/^        } state;$/;"	m	class:zmq::req_session_t	typeref:enum:zmq::req_session_t::__anon47	access:private
state_type	.\src\blob.hpp	/^      typedef mbstate_t 	state_type;$/;"	t	struct:std::char_traits	access:public
std	.\src\blob.hpp	/^namespace std$/;"	n
std::char_traits	.\src\blob.hpp	/^    struct char_traits<unsigned char>$/;"	s	namespace:std
std::char_traits::assign	.\src\blob.hpp	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(char_type& __c1, const char_type& __c2)
std::char_traits::assign	.\src\blob.hpp	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits	access:public	signature:(char_type* __s, size_t __n, char_type __a)
std::char_traits::char_type	.\src\blob.hpp	/^      typedef unsigned char char_type;$/;"	t	struct:std::char_traits	access:public
std::char_traits::compare	.\src\blob.hpp	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type* __s1, const char_type* __s2, size_t __n)
std::char_traits::copy	.\src\blob.hpp	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	access:public	signature:(char_type* __s1, const char_type* __s2, size_t __n)
std::char_traits::eof	.\src\blob.hpp	/^      eof() { return static_cast<int_type>(-1); }$/;"	f	struct:std::char_traits	access:public	signature:()
std::char_traits::eq	.\src\blob.hpp	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type& __c1, const char_type& __c2)
std::char_traits::eq_int_type	.\src\blob.hpp	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(const int_type& __c1, const int_type& __c2)
std::char_traits::find	.\src\blob.hpp	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type* __s, size_t __n, const char_type& __a)
std::char_traits::int_type	.\src\blob.hpp	/^      typedef unsigned long  	int_type;$/;"	t	struct:std::char_traits	access:public
std::char_traits::length	.\src\blob.hpp	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type* __s)
std::char_traits::lt	.\src\blob.hpp	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits	access:public	signature:(const char_type& __c1, const char_type& __c2)
std::char_traits::move	.\src\blob.hpp	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	access:public	signature:(char_type* __s1, const char_type* __s2, size_t __n)
std::char_traits::not_eof	.\src\blob.hpp	/^      not_eof(const int_type& __c)$/;"	f	struct:std::char_traits	access:public	signature:(const int_type& __c)
std::char_traits::off_type	.\src\blob.hpp	/^      typedef streamoff 	off_type;$/;"	t	struct:std::char_traits	access:public
std::char_traits::pos_type	.\src\blob.hpp	/^      typedef streampos 	pos_type;$/;"	t	struct:std::char_traits	access:public
std::char_traits::state_type	.\src\blob.hpp	/^      typedef mbstate_t 	state_type;$/;"	t	struct:std::char_traits	access:public
std::char_traits::to_char_type	.\src\blob.hpp	/^      to_char_type(const int_type& __c)$/;"	f	struct:std::char_traits	access:public	signature:(const int_type& __c)
std::char_traits::to_int_type	.\src\blob.hpp	/^      to_int_type(const char_type& __c) { return int_type(__c); }$/;"	f	struct:std::char_traits	access:public	signature:(const char_type& __c)
step_t	.\src\decoder.hpp	/^        typedef bool (T::*step_t) ();$/;"	t	class:zmq::decoder_base_t	access:protected
step_t	.\src\encoder.hpp	/^        typedef bool (T::*step_t) ();$/;"	t	class:zmq::encoder_base_t	access:protected
stop	.\src\command.hpp	/^            stop,$/;"	e	enum:zmq::command_t::type_t
stop	.\src\command.hpp	/^            } stop;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon16	access:public
stop	.\src\devpoll.cpp	/^void zmq::devpoll_t::stop ()$/;"	f	class:zmq::devpoll_t	signature:()
stop	.\src\devpoll.hpp	/^        void stop ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
stop	.\src\epoll.cpp	/^void zmq::epoll_t::stop ()$/;"	f	class:zmq::epoll_t	signature:()
stop	.\src\epoll.hpp	/^        void stop ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
stop	.\src\io_thread.cpp	/^void zmq::io_thread_t::stop ()$/;"	f	class:zmq::io_thread_t	signature:()
stop	.\src\io_thread.hpp	/^        void stop ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
stop	.\src\kqueue.cpp	/^void zmq::kqueue_t::stop ()$/;"	f	class:zmq::kqueue_t	signature:()
stop	.\src\kqueue.hpp	/^        void stop ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
stop	.\src\poll.cpp	/^void zmq::poll_t::stop ()$/;"	f	class:zmq::poll_t	signature:()
stop	.\src\poll.hpp	/^        void stop ();$/;"	p	class:zmq::poll_t	access:public	signature:()
stop	.\src\reaper.cpp	/^void zmq::reaper_t::stop ()$/;"	f	class:zmq::reaper_t	signature:()
stop	.\src\reaper.hpp	/^        void stop ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
stop	.\src\select.cpp	/^void zmq::select_t::stop ()$/;"	f	class:zmq::select_t	signature:()
stop	.\src\select.hpp	/^        void stop ();$/;"	p	class:zmq::select_t	access:public	signature:()
stop	.\src\socket_base.cpp	/^void zmq::socket_base_t::stop ()$/;"	f	class:zmq::socket_base_t	signature:()
stop	.\src\socket_base.hpp	/^        void stop ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
stop	.\src\thread.cpp	/^void zmq::thread_t::stop ()$/;"	f	class:zmq::thread_t	signature:()
stop	.\src\thread.hpp	/^        void stop ();$/;"	p	class:zmq::thread_t	access:public	signature:()
stop_monitor	.\src\socket_base.cpp	/^void zmq::socket_base_t::stop_monitor()$/;"	f	class:zmq::socket_base_t	signature:()
stop_monitor	.\src\socket_base.hpp	/^        void stop_monitor ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
stopping	.\src\devpoll.hpp	/^        bool stopping;$/;"	m	class:zmq::devpoll_t	access:private
stopping	.\src\epoll.hpp	/^        bool stopping;$/;"	m	class:zmq::epoll_t	access:private
stopping	.\src\kqueue.hpp	/^        bool stopping;$/;"	m	class:zmq::kqueue_t	access:private
stopping	.\src\poll.hpp	/^        bool stopping;$/;"	m	class:zmq::poll_t	access:private
stopping	.\src\select.hpp	/^        bool stopping;$/;"	m	class:zmq::select_t	access:private
stream_engine_t	.\src\stream_engine.cpp	/^zmq::stream_engine_t::stream_engine_t (fd_t fd_, const options_t &options_, const std::string &endpoint_) :$/;"	f	class:zmq::stream_engine_t	signature:(fd_t fd_, const options_t &options_, const std::string &endpoint_)
stream_engine_t	.\src\stream_engine.hpp	/^        stream_engine_t (const stream_engine_t&);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(const stream_engine_t&)
stream_engine_t	.\src\stream_engine.hpp	/^        stream_engine_t (fd_t fd_, const options_t &options_, const std::string &endpoint);$/;"	p	class:zmq::stream_engine_t	access:public	signature:(fd_t fd_, const options_t &options_, const std::string &endpoint)
stream_engine_t	.\src\stream_engine.hpp	/^    class stream_engine_t : public io_object_t, public i_engine, public i_msg_sink$/;"	c	namespace:zmq	inherits:io_object_t,i_engine,i_msg_sink
sub	.\src\atomic_counter.hpp	/^        inline bool sub (integer_t decrement)$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t decrement)
sub_session_t	.\src\sub.cpp	/^zmq::sub_session_t::sub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::sub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
sub_session_t	.\src\sub.hpp	/^        sub_session_t (const sub_session_t&);$/;"	p	class:zmq::sub_session_t	access:private	signature:(const sub_session_t&)
sub_session_t	.\src\sub.hpp	/^        sub_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::sub_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
sub_session_t	.\src\sub.hpp	/^    class sub_session_t : public xsub_session_t$/;"	c	namespace:zmq	inherits:xsub_session_t
sub_t	.\src\sub.cpp	/^zmq::sub_t::sub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::sub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
sub_t	.\src\sub.hpp	/^        sub_t (const sub_t&);$/;"	p	class:zmq::sub_t	access:private	signature:(const sub_t&)
sub_t	.\src\sub.hpp	/^        sub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::sub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
sub_t	.\src\sub.hpp	/^    class sub_t : public xsub_t$/;"	c	namespace:zmq	inherits:xsub_t
subscriptions	.\src\xpub.hpp	/^        mtrie_t subscriptions;$/;"	m	class:zmq::xpub_t	access:private
subscriptions	.\src\xsub.hpp	/^        trie_t subscriptions;$/;"	m	class:zmq::xsub_t	access:private
swap	.\src\array.hpp	/^        inline void swap (size_type index1_, size_type index2_)$/;"	f	class:zmq::array_t	access:public	signature:(size_type index1_, size_type index2_)
sync	.\src\atomic_counter.hpp	/^        mutex_t sync;$/;"	m	class:zmq::atomic_counter_t	access:private
sync	.\src\atomic_ptr.hpp	/^        mutex_t sync;$/;"	m	class:zmq::atomic_ptr_t	access:private
sync	.\src\mailbox.hpp	/^        mutex_t sync;$/;"	m	class:zmq::mailbox_t	access:private
sync	.\src\socket_base.hpp	/^        mutex_t sync;$/;"	m	class:zmq::socket_base_t	access:private
table	.\src\mtrie.hpp	/^            class mtrie_t **table;$/;"	m	union:zmq::mtrie_t::__anon43	typeref:class:zmq::mtrie_t::__anon43::mtrie_t	access:public
table	.\src\trie.hpp	/^            class trie_t **table;$/;"	m	union:zmq::trie_t::__anon51	typeref:class:zmq::trie_t::__anon51::trie_t	access:public
tag	.\src\ctx.hpp	/^        uint32_t tag;$/;"	m	class:zmq::ctx_t	access:private
tag	.\src\socket_base.hpp	/^        uint32_t tag;$/;"	m	class:zmq::socket_base_t	access:private
tcp_accept_filters	.\src\options.hpp	/^        tcp_accept_filters_t tcp_accept_filters;$/;"	m	struct:zmq::options_t	access:public
tcp_accept_filters_t	.\src\options.hpp	/^        typedef std::vector <tcp_address_mask_t> tcp_accept_filters_t;$/;"	t	struct:zmq::options_t	access:public
tcp_addr	.\src\address.hpp	/^            tcp_address_t *tcp_addr;$/;"	m	union:zmq::address_t::__anon14	access:public
tcp_address_mask_t	.\src\tcp_address.cpp	/^zmq::tcp_address_mask_t::tcp_address_mask_t () :$/;"	f	class:zmq::tcp_address_mask_t	signature:()
tcp_address_mask_t	.\src\tcp_address.hpp	/^        tcp_address_mask_t ();$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:()
tcp_address_mask_t	.\src\tcp_address.hpp	/^    class tcp_address_mask_t : public tcp_address_t$/;"	c	namespace:zmq	inherits:tcp_address_t
tcp_address_t	.\src\tcp_address.cpp	/^zmq::tcp_address_t::tcp_address_t ()$/;"	f	class:zmq::tcp_address_t	signature:()
tcp_address_t	.\src\tcp_address.cpp	/^zmq::tcp_address_t::tcp_address_t (const sockaddr *sa, socklen_t sa_len)$/;"	f	class:zmq::tcp_address_t	signature:(const sockaddr *sa, socklen_t sa_len)
tcp_address_t	.\src\tcp_address.hpp	/^        tcp_address_t ();$/;"	p	class:zmq::tcp_address_t	access:public	signature:()
tcp_address_t	.\src\tcp_address.hpp	/^        tcp_address_t (const sockaddr *sa, socklen_t sa_len);$/;"	p	class:zmq::tcp_address_t	access:public	signature:(const sockaddr *sa, socklen_t sa_len)
tcp_address_t	.\src\tcp_address.hpp	/^    class tcp_address_t$/;"	c	namespace:zmq
tcp_connecter_t	.\src\tcp_connecter.cpp	/^zmq::tcp_connecter_t::tcp_connecter_t (class io_thread_t *io_thread_,$/;"	f	class:zmq::tcp_connecter_t	signature:(class io_thread_t *io_thread_, class session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
tcp_connecter_t	.\src\tcp_connecter.hpp	/^        tcp_connecter_t (const tcp_connecter_t&);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(const tcp_connecter_t&)
tcp_connecter_t	.\src\tcp_connecter.hpp	/^        tcp_connecter_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::tcp_connecter_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
tcp_connecter_t	.\src\tcp_connecter.hpp	/^    class tcp_connecter_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
tcp_keepalive	.\src\options.hpp	/^        int tcp_keepalive;$/;"	m	struct:zmq::options_t	access:public
tcp_keepalive_cnt	.\src\options.hpp	/^        int tcp_keepalive_cnt;$/;"	m	struct:zmq::options_t	access:public
tcp_keepalive_idle	.\src\options.hpp	/^        int tcp_keepalive_idle;$/;"	m	struct:zmq::options_t	access:public
tcp_keepalive_intvl	.\src\options.hpp	/^        int tcp_keepalive_intvl;$/;"	m	struct:zmq::options_t	access:public
tcp_listener_t	.\src\tcp_listener.cpp	/^zmq::tcp_listener_t::tcp_listener_t (io_thread_t *io_thread_,$/;"	f	class:zmq::tcp_listener_t	signature:(io_thread_t *io_thread_, socket_base_t *socket_, const options_t &options_)
tcp_listener_t	.\src\tcp_listener.hpp	/^        tcp_listener_t (const tcp_listener_t&);$/;"	p	class:zmq::tcp_listener_t	access:private	signature:(const tcp_listener_t&)
tcp_listener_t	.\src\tcp_listener.hpp	/^        tcp_listener_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::tcp_listener_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::socket_base_t *socket_, const options_t &options_)
tcp_listener_t	.\src\tcp_listener.hpp	/^    class tcp_listener_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
term	.\src\command.hpp	/^            term,$/;"	e	enum:zmq::command_t::type_t
term	.\src\command.hpp	/^            } term;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon27	access:public
term_ack	.\src\command.hpp	/^            term_ack,$/;"	e	enum:zmq::command_t::type_t
term_ack	.\src\command.hpp	/^            } term_ack;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon28	access:public
term_acks	.\src\own.hpp	/^        int term_acks;$/;"	m	class:zmq::own_t	access:private
term_child	.\src\own.cpp	/^void zmq::own_t::term_child (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
term_child	.\src\own.hpp	/^        void term_child (own_t *object_);$/;"	p	class:zmq::own_t	access:protected	signature:(own_t *object_)
term_endpoint	.\src\socket_base.cpp	/^int zmq::socket_base_t::term_endpoint (const char *addr_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_)
term_endpoint	.\src\socket_base.hpp	/^        int term_endpoint (const char *addr_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *addr_)
term_mailbox	.\src\ctx.hpp	/^        mailbox_t term_mailbox;$/;"	m	class:zmq::ctx_t	access:private
term_req	.\src\command.hpp	/^            term_req,$/;"	e	enum:zmq::command_t::type_t
term_req	.\src\command.hpp	/^            } term_req;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon26	access:public
term_tid	.\src\ctx.hpp	/^            term_tid = 0,$/;"	e	enum:zmq::ctx_t::__anon33
terminate	.\src\ctx.cpp	/^int zmq::ctx_t::terminate ()$/;"	f	class:zmq::ctx_t	signature:()
terminate	.\src\ctx.hpp	/^        int terminate ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
terminate	.\src\i_engine.hpp	/^        virtual void terminate () = 0;$/;"	p	struct:zmq::i_engine	access:public	signature:()
terminate	.\src\own.cpp	/^void zmq::own_t::terminate ()$/;"	f	class:zmq::own_t	signature:()
terminate	.\src\own.hpp	/^        void terminate ();$/;"	p	class:zmq::own_t	access:protected	signature:()
terminate	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::terminate ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
terminate	.\src\pgm_receiver.hpp	/^        void terminate ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
terminate	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::terminate ()$/;"	f	class:zmq::pgm_sender_t	signature:()
terminate	.\src\pgm_sender.hpp	/^        void terminate ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
terminate	.\src\pipe.cpp	/^void zmq::pipe_t::terminate (bool delay_)$/;"	f	class:zmq::pipe_t	signature:(bool delay_)
terminate	.\src\pipe.hpp	/^        void terminate (bool delay_);$/;"	p	class:zmq::pipe_t	access:public	signature:(bool delay_)
terminate	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::terminate ()$/;"	f	class:zmq::stream_engine_t	signature:()
terminate	.\src\stream_engine.hpp	/^        void terminate ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
terminated	.\src\dist.cpp	/^void zmq::dist_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
terminated	.\src\dist.hpp	/^        void terminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
terminated	.\src\fq.cpp	/^void zmq::fq_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::fq_t	signature:(pipe_t *pipe_)
terminated	.\src\fq.hpp	/^        void terminated (pipe_t *pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(pipe_t *pipe_)
terminated	.\src\lb.cpp	/^void zmq::lb_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::lb_t	signature:(pipe_t *pipe_)
terminated	.\src\lb.hpp	/^        void terminated (pipe_t *pipe_);$/;"	p	class:zmq::lb_t	access:public	signature:(pipe_t *pipe_)
terminated	.\src\pipe.hpp	/^            terminated,$/;"	e	enum:zmq::pipe_t::__anon46
terminated	.\src\pipe.hpp	/^        virtual void terminated (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
terminated	.\src\session_base.cpp	/^void zmq::session_base_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
terminated	.\src\session_base.hpp	/^        void terminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
terminated	.\src\socket_base.cpp	/^void zmq::socket_base_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
terminated	.\src\socket_base.hpp	/^        void terminated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
terminating	.\src\ctx.hpp	/^        bool terminating;$/;"	m	class:zmq::ctx_t	access:private
terminating	.\src\own.hpp	/^        bool terminating;$/;"	m	class:zmq::own_t	access:private
terminating	.\src\pipe.hpp	/^            terminating,$/;"	e	enum:zmq::pipe_t::__anon46
terminating	.\src\reaper.hpp	/^        bool terminating;$/;"	m	class:zmq::reaper_t	access:private
terminating_pipes	.\src\session_base.hpp	/^        std::set<pipe_t *> terminating_pipes;$/;"	m	class:zmq::session_base_t	access:private
tfn	.\src\thread.hpp	/^        thread_fn *tfn;$/;"	m	class:zmq::thread_t	access:public
thread_fn	.\src\thread.hpp	/^    typedef void (thread_fn) (void*);$/;"	t	namespace:zmq
thread_routine	.\src\thread.cpp	/^	static DWORD thread_routine (LPVOID arg_)$/;"	f	file:	signature:(LPVOID arg_)
thread_routine	.\src\thread.cpp	/^    static void *thread_routine (void *arg_)$/;"	f	file:	signature:(void *arg_)
thread_t	.\src\thread.hpp	/^        inline thread_t ()$/;"	f	class:zmq::thread_t	access:public	signature:()
thread_t	.\src\thread.hpp	/^        thread_t (const thread_t&);$/;"	p	class:zmq::thread_t	access:private	signature:(const thread_t&)
thread_t	.\src\thread.hpp	/^    class thread_t$/;"	c	namespace:zmq
ticks	.\src\socket_base.hpp	/^        int ticks;$/;"	m	class:zmq::socket_base_t	access:private
tid	.\src\object.hpp	/^        uint32_t tid;$/;"	m	class:zmq::object_t	access:private
timer_event	.\src\i_poll_events.hpp	/^        virtual void timer_event (int id_) = 0;$/;"	p	struct:zmq::i_poll_events	access:public	signature:(int id_)
timer_event	.\src\io_object.cpp	/^void zmq::io_object_t::timer_event (int)$/;"	f	class:zmq::io_object_t	signature:(int)
timer_event	.\src\io_object.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(int id_)
timer_event	.\src\io_thread.cpp	/^void zmq::io_thread_t::timer_event (int)$/;"	f	class:zmq::io_thread_t	signature:(int)
timer_event	.\src\io_thread.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::io_thread_t	access:public	signature:(int id_)
timer_event	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::timer_event (int id_)$/;"	f	class:zmq::ipc_connecter_t	signature:(int id_)
timer_event	.\src\ipc_connecter.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(int id_)
timer_event	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::timer_event (int token)$/;"	f	class:zmq::pgm_receiver_t	signature:(int token)
timer_event	.\src\pgm_receiver.hpp	/^        void timer_event (int token);$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(int token)
timer_event	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::timer_event (int token)$/;"	f	class:zmq::pgm_sender_t	signature:(int token)
timer_event	.\src\pgm_sender.hpp	/^        void timer_event (int token);$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(int token)
timer_event	.\src\reaper.cpp	/^void zmq::reaper_t::timer_event (int)$/;"	f	class:zmq::reaper_t	signature:(int)
timer_event	.\src\reaper.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::reaper_t	access:public	signature:(int id_)
timer_event	.\src\session_base.cpp	/^void zmq::session_base_t::timer_event (int id_)$/;"	f	class:zmq::session_base_t	signature:(int id_)
timer_event	.\src\session_base.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::session_base_t	access:private	signature:(int id_)
timer_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::timer_event (int)$/;"	f	class:zmq::socket_base_t	signature:(int)
timer_event	.\src\socket_base.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(int id_)
timer_event	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::timer_event (int id_)$/;"	f	class:zmq::tcp_connecter_t	signature:(int id_)
timer_event	.\src\tcp_connecter.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(int id_)
timer_info_t	.\src\poller_base.hpp	/^        struct timer_info_t$/;"	s	class:zmq::poller_base_t	access:private
timer_started	.\src\ipc_connecter.hpp	/^        bool timer_started;$/;"	m	class:zmq::ipc_connecter_t	access:private
timer_started	.\src\tcp_connecter.hpp	/^        bool timer_started;$/;"	m	class:zmq::tcp_connecter_t	access:private
timers	.\src\poller_base.hpp	/^        timers_t timers;$/;"	m	class:zmq::poller_base_t	access:private
timers_t	.\src\poller_base.hpp	/^        typedef std::multimap <uint64_t, timer_info_t> timers_t;$/;"	t	class:zmq::poller_base_t	access:private
tmpbuf	.\src\decoder.hpp	/^        unsigned char tmpbuf [8];$/;"	m	class:zmq::decoder_t	access:private
tmpbuf	.\src\encoder.hpp	/^        unsigned char tmpbuf [10];$/;"	m	class:zmq::encoder_t	access:private
tmpbuf	.\src\v1_decoder.hpp	/^        unsigned char tmpbuf [8];$/;"	m	class:zmq::v1_decoder_t	access:private
tmpbuf	.\src\v1_encoder.hpp	/^        unsigned char tmpbuf [9];$/;"	m	class:zmq::v1_encoder_t	access:private
to_char_type	.\src\blob.hpp	/^      to_char_type(const int_type& __c)$/;"	f	struct:std::char_traits	access:public	signature:(const int_type& __c)
to_int_type	.\src\blob.hpp	/^      to_int_type(const char_type& __c) { return int_type(__c); }$/;"	f	struct:std::char_traits	access:public	signature:(const char_type& __c)
to_read	.\src\decoder.hpp	/^        size_t to_read;$/;"	m	class:zmq::decoder_base_t	access:private
to_string	.\src\address.cpp	/^int zmq::address_t::to_string (std::string &addr_) const$/;"	f	class:zmq::address_t	signature:(std::string &addr_) const
to_string	.\src\address.hpp	/^        int to_string (std::string &addr_) const;$/;"	p	struct:zmq::address_t	access:public	signature:(std::string &addr_) const
to_string	.\src\ipc_address.cpp	/^int zmq::ipc_address_t::to_string (std::string &addr_)$/;"	f	class:zmq::ipc_address_t	signature:(std::string &addr_)
to_string	.\src\ipc_address.hpp	/^        int to_string (std::string &addr_);$/;"	p	class:zmq::ipc_address_t	access:public	signature:(std::string &addr_)
to_string	.\src\tcp_address.cpp	/^int zmq::tcp_address_mask_t::to_string (std::string &addr_)$/;"	f	class:zmq::tcp_address_mask_t	signature:(std::string &addr_)
to_string	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::to_string (std::string &addr_)$/;"	f	class:zmq::tcp_address_t	signature:(std::string &addr_)
to_string	.\src\tcp_address.hpp	/^        int to_string (std::string &addr_);$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:(std::string &addr_)
to_string	.\src\tcp_address.hpp	/^        virtual int to_string (std::string &addr_);$/;"	p	class:zmq::tcp_address_t	access:public	signature:(std::string &addr_)
to_write	.\src\encoder.hpp	/^        size_t to_write;$/;"	m	class:zmq::encoder_base_t	access:private
trie_t	.\src\trie.cpp	/^zmq::trie_t::trie_t () :$/;"	f	class:zmq::trie_t	signature:()
trie_t	.\src\trie.hpp	/^        trie_t ();$/;"	p	class:zmq::trie_t	access:public	signature:()
trie_t	.\src\trie.hpp	/^        trie_t (const trie_t&);$/;"	p	class:zmq::trie_t	access:private	signature:(const trie_t&)
trie_t	.\src\trie.hpp	/^    class trie_t$/;"	c	namespace:zmq
tsi_comp	.\src\pgm_receiver.hpp	/^        struct tsi_comp$/;"	s	class:zmq::pgm_receiver_t	access:private
tune_tcp_keepalives	.\src\tcp.cpp	/^void zmq::tune_tcp_keepalives (fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_)$/;"	f	class:zmq	signature:(fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_)
tune_tcp_keepalives	.\src\tcp.hpp	/^    void tune_tcp_keepalives (fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_);$/;"	p	namespace:zmq	signature:(fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_)
tune_tcp_socket	.\src\tcp.cpp	/^void zmq::tune_tcp_socket (fd_t s_)$/;"	f	class:zmq	signature:(fd_t s_)
tune_tcp_socket	.\src\tcp.hpp	/^    void tune_tcp_socket (fd_t s_);$/;"	p	namespace:zmq	signature:(fd_t s_)
tx_timer_id	.\src\pgm_sender.hpp	/^        enum {tx_timer_id = 0xa0, rx_timer_id = 0xa1};$/;"	e	enum:zmq::pgm_sender_t::__anon45
type	.\src\command.hpp	/^        } type;$/;"	m	struct:zmq::command_t	typeref:enum:zmq::command_t::type_t	access:public
type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon39	access:public
type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon42	access:public
type	.\src\options.hpp	/^        int type;$/;"	m	struct:zmq::options_t	access:public
type_delimiter	.\src\msg.hpp	/^            type_delimiter = 103,$/;"	e	enum:zmq::msg_t::type_t
type_lmsg	.\src\msg.hpp	/^            type_lmsg = 102,$/;"	e	enum:zmq::msg_t::type_t
type_max	.\src\msg.hpp	/^            type_max = 103$/;"	e	enum:zmq::msg_t::type_t
type_min	.\src\msg.hpp	/^            type_min = 101,$/;"	e	enum:zmq::msg_t::type_t
type_t	.\src\command.hpp	/^        enum type_t$/;"	g	struct:zmq::command_t	access:public
type_t	.\src\msg.hpp	/^        enum type_t$/;"	g	class:zmq::msg_t	access:private
type_vsm	.\src\msg.hpp	/^            type_vsm = 101,$/;"	e	enum:zmq::msg_t::type_t
u	.\src\msg.hpp	/^        } u;$/;"	m	class:zmq::msg_t	typeref:union:zmq::msg_t::__anon38	access:private
uint16_t	.\src\stdint.hpp	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	.\src\stdint.hpp	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	.\src\stdint.hpp	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	.\src\stdint.hpp	/^typedef unsigned __int8 uint8_t;$/;"	t
unblock_socket	.\src\ip.cpp	/^void zmq::unblock_socket (fd_t s_)$/;"	f	class:zmq	signature:(fd_t s_)
unblock_socket	.\src\ip.hpp	/^    void unblock_socket (fd_t s_);$/;"	p	namespace:zmq	signature:(fd_t s_)
unlikely	.\src\likely.hpp	26;"	d
unlikely	.\src\likely.hpp	29;"	d
unlock	.\src\mutex.hpp	/^        inline void unlock ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
unlock	.\src\socket_base.hpp	/^        void unlock();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
unmatch	.\src\dist.cpp	/^void zmq::dist_t::unmatch ()$/;"	f	class:zmq::dist_t	signature:()
unmatch	.\src\dist.hpp	/^        void unmatch ();$/;"	p	class:zmq::dist_t	access:public	signature:()
unplug	.\src\io_object.cpp	/^void zmq::io_object_t::unplug ()$/;"	f	class:zmq::io_object_t	signature:()
unplug	.\src\io_object.hpp	/^        void unplug ();$/;"	p	class:zmq::io_object_t	access:public	signature:()
unplug	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::unplug ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
unplug	.\src\pgm_receiver.hpp	/^        void unplug ();$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:()
unplug	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::unplug ()$/;"	f	class:zmq::pgm_sender_t	signature:()
unplug	.\src\pgm_sender.hpp	/^        void unplug ();$/;"	p	class:zmq::pgm_sender_t	access:private	signature:()
unplug	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::unplug ()$/;"	f	class:zmq::stream_engine_t	signature:()
unplug	.\src\stream_engine.hpp	/^        void unplug ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
unpush	.\src\yqueue.hpp	/^        inline void unpush ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
unregister_endpoints	.\src\ctx.cpp	/^void zmq::ctx_t::unregister_endpoints (socket_base_t *socket_)$/;"	f	class:zmq::ctx_t	signature:(socket_base_t *socket_)
unregister_endpoints	.\src\ctx.hpp	/^        void unregister_endpoints (zmq::socket_base_t *socket_);$/;"	p	class:zmq::ctx_t	access:public	signature:(zmq::socket_base_t *socket_)
unregister_endpoints	.\src\object.cpp	/^void zmq::object_t::unregister_endpoints (socket_base_t *socket_)$/;"	f	class:zmq::object_t	signature:(socket_base_t *socket_)
unregister_endpoints	.\src\object.hpp	/^        void unregister_endpoints (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
unregister_term_ack	.\src\own.cpp	/^void zmq::own_t::unregister_term_ack ()$/;"	f	class:zmq::own_t	signature:()
unregister_term_ack	.\src\own.hpp	/^        void unregister_term_ack ();$/;"	p	class:zmq::own_t	access:public	signature:()
unused	.\src\msg.hpp	/^                unsigned char unused [max_vsm_size + 1 - sizeof (content_t*)];$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
unused	.\src\msg.hpp	/^                unsigned char unused [max_vsm_size + 1];$/;"	m	struct:zmq::msg_t::__anon38::__anon39	access:public
unused	.\src\msg.hpp	/^                unsigned char unused [max_vsm_size + 1];$/;"	m	struct:zmq::msg_t::__anon38::__anon42	access:public
unwrite	.\src\ypipe.hpp	/^        inline bool unwrite (T *value_)$/;"	f	class:zmq::ypipe_t	access:public	signature:(T *value_)
upipe_t	.\src\pipe.hpp	/^        typedef ypipe_t <msg_t, message_pipe_granularity> upipe_t;$/;"	t	class:zmq::pipe_t	access:private
uplink_handle	.\src\pgm_sender.hpp	/^        handle_t uplink_handle;$/;"	m	class:zmq::pgm_sender_t	access:private
v1_decoder_t	.\src\v1_decoder.cpp	/^zmq::v1_decoder_t::v1_decoder_t (size_t bufsize_,$/;"	f	class:zmq::v1_decoder_t	signature:(size_t bufsize_, int64_t maxmsgsize_, i_msg_sink *msg_sink_)
v1_decoder_t	.\src\v1_decoder.hpp	/^        v1_decoder_t (const v1_decoder_t&);$/;"	p	class:zmq::v1_decoder_t	access:private	signature:(const v1_decoder_t&)
v1_decoder_t	.\src\v1_decoder.hpp	/^        v1_decoder_t (size_t bufsize_,$/;"	p	class:zmq::v1_decoder_t	access:public	signature:(size_t bufsize_, int64_t maxmsgsize_, i_msg_sink *msg_sink_)
v1_decoder_t	.\src\v1_decoder.hpp	/^    class v1_decoder_t : public decoder_base_t <v1_decoder_t>$/;"	c	namespace:zmq	inherits:decoder_base_t
v1_encoder_t	.\src\v1_encoder.cpp	/^zmq::v1_encoder_t::v1_encoder_t (size_t bufsize_, i_msg_source *msg_source_) :$/;"	f	class:zmq::v1_encoder_t	signature:(size_t bufsize_, i_msg_source *msg_source_)
v1_encoder_t	.\src\v1_encoder.hpp	/^        v1_encoder_t (const v1_encoder_t&);$/;"	p	class:zmq::v1_encoder_t	access:private	signature:(const v1_encoder_t&)
v1_encoder_t	.\src\v1_encoder.hpp	/^        v1_encoder_t (size_t bufsize_, i_msg_source *msg_source_);$/;"	p	class:zmq::v1_encoder_t	access:public	signature:(size_t bufsize_, i_msg_source *msg_source_)
v1_encoder_t	.\src\v1_encoder.hpp	/^    class v1_encoder_t : public encoder_base_t <v1_encoder_t>$/;"	c	namespace:zmq	inherits:encoder_base_t
v1_protocol_t	.\src\v1_protocol.hpp	/^    class v1_protocol_t$/;"	c	namespace:zmq
valid	.\src\devpoll.hpp	/^            bool valid;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
value	.\src\atomic_counter.hpp	/^        volatile integer_t value;$/;"	m	class:zmq::atomic_counter_t	access:private
values	.\src\yqueue.hpp	/^             T values [N];$/;"	m	struct:zmq::yqueue_t::chunk_t	access:public
verbose	.\src\xpub.hpp	/^        bool verbose;$/;"	m	class:zmq::xpub_t	access:private
vsm	.\src\msg.hpp	/^            } vsm;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon40	access:public
w	.\src\signaler.hpp	/^        fd_t w;$/;"	m	class:zmq::signaler_t	access:private
w	.\src\ypipe.hpp	/^        T *w;$/;"	m	class:zmq::ypipe_t	access:protected
wait	.\src\signaler.cpp	/^int zmq::signaler_t::wait (int timeout_)$/;"	f	class:zmq::signaler_t	signature:(int timeout_)
wait	.\src\signaler.hpp	/^        int wait (int timeout_);$/;"	p	class:zmq::signaler_t	access:public	signature:(int timeout_)
win_assert	.\src\err.hpp	88;"	d
win_error	.\src\err.cpp	/^void zmq::win_error (char *buffer_, size_t buffer_size_)$/;"	f	class:zmq	signature:(char *buffer_, size_t buffer_size_)
win_error	.\src\err.hpp	/^    void win_error (char *buffer_, size_t buffer_size_);$/;"	p	namespace:zmq	signature:(char *buffer_, size_t buffer_size_)
worker	.\src\devpoll.hpp	/^        thread_t worker;$/;"	m	class:zmq::devpoll_t	access:private
worker	.\src\epoll.hpp	/^        thread_t worker;$/;"	m	class:zmq::epoll_t	access:private
worker	.\src\kqueue.hpp	/^        thread_t worker;$/;"	m	class:zmq::kqueue_t	access:private
worker	.\src\poll.hpp	/^        thread_t worker;$/;"	m	class:zmq::poll_t	access:private
worker	.\src\select.hpp	/^        thread_t worker;$/;"	m	class:zmq::select_t	access:private
worker_routine	.\src\devpoll.cpp	/^void zmq::devpoll_t::worker_routine (void *arg_)$/;"	f	class:zmq::devpoll_t	signature:(void *arg_)
worker_routine	.\src\devpoll.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::devpoll_t	access:private	signature:(void *arg_)
worker_routine	.\src\epoll.cpp	/^void zmq::epoll_t::worker_routine (void *arg_)$/;"	f	class:zmq::epoll_t	signature:(void *arg_)
worker_routine	.\src\epoll.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::epoll_t	access:private	signature:(void *arg_)
worker_routine	.\src\kqueue.cpp	/^void zmq::kqueue_t::worker_routine (void *arg_)$/;"	f	class:zmq::kqueue_t	signature:(void *arg_)
worker_routine	.\src\kqueue.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::kqueue_t	access:private	signature:(void *arg_)
worker_routine	.\src\poll.cpp	/^void zmq::poll_t::worker_routine (void *arg_)$/;"	f	class:zmq::poll_t	signature:(void *arg_)
worker_routine	.\src\poll.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::poll_t	access:private	signature:(void *arg_)
worker_routine	.\src\select.cpp	/^void zmq::select_t::worker_routine (void *arg_)$/;"	f	class:zmq::select_t	signature:(void *arg_)
worker_routine	.\src\select.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::select_t	access:private	signature:(void *arg_)
write	.\src\dist.cpp	/^bool zmq::dist_t::write (pipe_t *pipe_, msg_t *msg_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_, msg_t *msg_)
write	.\src\dist.hpp	/^        bool write (zmq::pipe_t *pipe_, zmq::msg_t *msg_);$/;"	p	class:zmq::dist_t	access:private	signature:(zmq::pipe_t *pipe_, zmq::msg_t *msg_)
write	.\src\pipe.cpp	/^bool zmq::pipe_t::write (msg_t *msg_)$/;"	f	class:zmq::pipe_t	signature:(msg_t *msg_)
write	.\src\pipe.hpp	/^        bool write (msg_t *msg_);$/;"	p	class:zmq::pipe_t	access:public	signature:(msg_t *msg_)
write	.\src\stream_engine.cpp	/^int zmq::stream_engine_t::write (const void *data_, size_t size_)$/;"	f	class:zmq::stream_engine_t	signature:(const void *data_, size_t size_)
write	.\src\stream_engine.hpp	/^        int write (const void *data_, size_t size_);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(const void *data_, size_t size_)
write	.\src\ypipe.hpp	/^        inline void write (const T &value_, bool incomplete_)$/;"	f	class:zmq::ypipe_t	access:public	signature:(const T &value_, bool incomplete_)
write_activated	.\src\pipe.hpp	/^        virtual void write_activated (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
write_activated	.\src\session_base.cpp	/^void zmq::session_base_t::write_activated (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
write_activated	.\src\session_base.hpp	/^        void write_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
write_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::write_activated (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
write_activated	.\src\socket_base.hpp	/^        void write_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
write_pos	.\src\encoder.hpp	/^        unsigned char *write_pos;$/;"	m	class:zmq::encoder_base_t	access:private
write_size	.\src\pgm_sender.hpp	/^        size_t write_size;$/;"	m	class:zmq::pgm_sender_t	access:private
writefds	.\src\select.hpp	/^        fd_set writefds;$/;"	m	class:zmq::select_t	access:private
wsa_assert	.\src\err.hpp	64;"	d
wsa_assert_no	.\src\err.hpp	77;"	d
wsa_error	.\src\err.cpp	/^const char *zmq::wsa_error()$/;"	f	class:zmq	signature:()
wsa_error	.\src\err.hpp	/^    const char *wsa_error ();$/;"	p	namespace:zmq	signature:()
wsa_error_no	.\src\err.cpp	/^const char *zmq::wsa_error_no (int no_)$/;"	f	class:zmq	signature:(int no_)
wsa_error_no	.\src\err.hpp	/^    const char *wsa_error_no (int no_);$/;"	p	namespace:zmq	signature:(int no_)
wsa_error_to_errno	.\src\err.cpp	/^int zmq::wsa_error_to_errno (int errcode)$/;"	f	class:zmq	signature:(int errcode)
wsa_error_to_errno	.\src\err.hpp	/^    int wsa_error_to_errno (int errcode);$/;"	p	namespace:zmq	signature:(int errcode)
xattach_pipe	.\src\dealer.cpp	/^void zmq::dealer_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\dealer.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\pair.cpp	/^void zmq::pair_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::pair_t	signature:(pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\pair.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\pull.cpp	/^void zmq::pull_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::pull_t	signature:(pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\pull.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\push.cpp	/^void zmq::push_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::push_t	signature:(pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\push.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\router.cpp	/^void zmq::router_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\router.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\socket_base.hpp	/^        virtual void xattach_pipe (zmq::pipe_t *pipe_,$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_ = false)
xattach_pipe	.\src\xpub.cpp	/^void zmq::xpub_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\xpub.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_ = false);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_, bool icanhasall_ = false)
xattach_pipe	.\src\xsub.cpp	/^void zmq::xsub_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_, bool icanhasall_)
xattach_pipe	.\src\xsub.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
xchg	.\src\atomic_ptr.hpp	/^        inline T *xchg (T *val_)$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:(T *val_)
xhas_in	.\src\dealer.cpp	/^bool zmq::dealer_t::xhas_in ()$/;"	f	class:zmq::dealer_t	signature:()
xhas_in	.\src\dealer.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::dealer_t	access:protected	signature:()
xhas_in	.\src\pair.cpp	/^bool zmq::pair_t::xhas_in ()$/;"	f	class:zmq::pair_t	signature:()
xhas_in	.\src\pair.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::pair_t	access:public	signature:()
xhas_in	.\src\pub.cpp	/^bool zmq::pub_t::xhas_in ()$/;"	f	class:zmq::pub_t	signature:()
xhas_in	.\src\pub.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::pub_t	access:public	signature:()
xhas_in	.\src\pull.cpp	/^bool zmq::pull_t::xhas_in ()$/;"	f	class:zmq::pull_t	signature:()
xhas_in	.\src\pull.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::pull_t	access:protected	signature:()
xhas_in	.\src\rep.cpp	/^bool zmq::rep_t::xhas_in ()$/;"	f	class:zmq::rep_t	signature:()
xhas_in	.\src\rep.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::rep_t	access:public	signature:()
xhas_in	.\src\req.cpp	/^bool zmq::req_t::xhas_in ()$/;"	f	class:zmq::req_t	signature:()
xhas_in	.\src\req.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::req_t	access:public	signature:()
xhas_in	.\src\router.cpp	/^bool zmq::router_t::xhas_in ()$/;"	f	class:zmq::router_t	signature:()
xhas_in	.\src\router.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::router_t	access:public	signature:()
xhas_in	.\src\socket_base.cpp	/^bool zmq::socket_base_t::xhas_in ()$/;"	f	class:zmq::socket_base_t	signature:()
xhas_in	.\src\socket_base.hpp	/^        virtual bool xhas_in ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
xhas_in	.\src\xpub.cpp	/^bool zmq::xpub_t::xhas_in ()$/;"	f	class:zmq::xpub_t	signature:()
xhas_in	.\src\xpub.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::xpub_t	access:public	signature:()
xhas_in	.\src\xsub.cpp	/^bool zmq::xsub_t::xhas_in ()$/;"	f	class:zmq::xsub_t	signature:()
xhas_in	.\src\xsub.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::xsub_t	access:protected	signature:()
xhas_out	.\src\dealer.cpp	/^bool zmq::dealer_t::xhas_out ()$/;"	f	class:zmq::dealer_t	signature:()
xhas_out	.\src\dealer.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::dealer_t	access:protected	signature:()
xhas_out	.\src\pair.cpp	/^bool zmq::pair_t::xhas_out ()$/;"	f	class:zmq::pair_t	signature:()
xhas_out	.\src\pair.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::pair_t	access:public	signature:()
xhas_out	.\src\push.cpp	/^bool zmq::push_t::xhas_out ()$/;"	f	class:zmq::push_t	signature:()
xhas_out	.\src\push.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::push_t	access:protected	signature:()
xhas_out	.\src\rep.cpp	/^bool zmq::rep_t::xhas_out ()$/;"	f	class:zmq::rep_t	signature:()
xhas_out	.\src\rep.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::rep_t	access:public	signature:()
xhas_out	.\src\req.cpp	/^bool zmq::req_t::xhas_out ()$/;"	f	class:zmq::req_t	signature:()
xhas_out	.\src\req.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::req_t	access:public	signature:()
xhas_out	.\src\router.cpp	/^bool zmq::router_t::xhas_out ()$/;"	f	class:zmq::router_t	signature:()
xhas_out	.\src\router.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::router_t	access:public	signature:()
xhas_out	.\src\socket_base.cpp	/^bool zmq::socket_base_t::xhas_out ()$/;"	f	class:zmq::socket_base_t	signature:()
xhas_out	.\src\socket_base.hpp	/^        virtual bool xhas_out ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
xhas_out	.\src\sub.cpp	/^bool zmq::sub_t::xhas_out ()$/;"	f	class:zmq::sub_t	signature:()
xhas_out	.\src\sub.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::sub_t	access:protected	signature:()
xhas_out	.\src\xpub.cpp	/^bool zmq::xpub_t::xhas_out ()$/;"	f	class:zmq::xpub_t	signature:()
xhas_out	.\src\xpub.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::xpub_t	access:public	signature:()
xhas_out	.\src\xsub.cpp	/^bool zmq::xsub_t::xhas_out ()$/;"	f	class:zmq::xsub_t	signature:()
xhas_out	.\src\xsub.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::xsub_t	access:protected	signature:()
xhiccuped	.\src\socket_base.cpp	/^void zmq::socket_base_t::xhiccuped (pipe_t *)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *)
xhiccuped	.\src\socket_base.hpp	/^        virtual void xhiccuped (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
xhiccuped	.\src\xsub.cpp	/^void zmq::xsub_t::xhiccuped (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
xhiccuped	.\src\xsub.hpp	/^        void xhiccuped (pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(pipe_t *pipe_)
xpub_session_t	.\src\xpub.cpp	/^zmq::xpub_session_t::xpub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::xpub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
xpub_session_t	.\src\xpub.hpp	/^        xpub_session_t (const xpub_session_t&);$/;"	p	class:zmq::xpub_session_t	access:private	signature:(const xpub_session_t&)
xpub_session_t	.\src\xpub.hpp	/^        xpub_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::xpub_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
xpub_session_t	.\src\xpub.hpp	/^    class xpub_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
xpub_t	.\src\xpub.cpp	/^zmq::xpub_t::xpub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::xpub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
xpub_t	.\src\xpub.hpp	/^        xpub_t (const xpub_t&);$/;"	p	class:zmq::xpub_t	access:private	signature:(const xpub_t&)
xpub_t	.\src\xpub.hpp	/^        xpub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
xpub_t	.\src\xpub.hpp	/^    class xpub_t :$/;"	c	namespace:zmq	inherits:socket_base_t
xread_activated	.\src\dealer.cpp	/^void zmq::dealer_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_)
xread_activated	.\src\dealer.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_)
xread_activated	.\src\pair.cpp	/^void zmq::pair_t::xread_activated (pipe_t *)$/;"	f	class:zmq::pair_t	signature:(pipe_t *)
xread_activated	.\src\pair.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_)
xread_activated	.\src\pull.cpp	/^void zmq::pull_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::pull_t	signature:(pipe_t *pipe_)
xread_activated	.\src\pull.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::pipe_t *pipe_)
xread_activated	.\src\router.cpp	/^void zmq::router_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
xread_activated	.\src\router.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_)
xread_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::xread_activated (pipe_t *)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *)
xread_activated	.\src\socket_base.hpp	/^        virtual void xread_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
xread_activated	.\src\xpub.cpp	/^void zmq::xpub_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_)
xread_activated	.\src\xpub.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_)
xread_activated	.\src\xsub.cpp	/^void zmq::xsub_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
xread_activated	.\src\xsub.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_)
xrecv	.\src\dealer.cpp	/^int zmq::dealer_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::dealer_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\dealer.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\pair.cpp	/^int zmq::pair_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::pair_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\pair.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\pub.cpp	/^int zmq::pub_t::xrecv (class msg_t *, int)$/;"	f	class:zmq::pub_t	signature:(class msg_t *, int)
xrecv	.\src\pub.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pub_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\pull.cpp	/^int zmq::pull_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::pull_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\pull.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\rep.cpp	/^int zmq::rep_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::rep_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\rep.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::rep_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\req.cpp	/^int zmq::req_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::req_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\req.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::req_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\router.cpp	/^int zmq::router_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::router_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\router.hpp	/^        int xrecv (msg_t *msg_, int flags_);$/;"	p	class:zmq::router_t	access:public	signature:(msg_t *msg_, int flags_)
xrecv	.\src\socket_base.cpp	/^int zmq::socket_base_t::xrecv (msg_t *, int)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *, int)
xrecv	.\src\socket_base.hpp	/^        virtual int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\xpub.cpp	/^int zmq::xpub_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::xpub_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\xpub.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xrecv	.\src\xsub.cpp	/^int zmq::xsub_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::xsub_t	signature:(msg_t *msg_, int flags_)
xrecv	.\src\xsub.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\dealer.cpp	/^int zmq::dealer_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::dealer_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\dealer.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\pair.cpp	/^int zmq::pair_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::pair_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\pair.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\push.cpp	/^int zmq::push_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::push_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\push.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\rep.cpp	/^int zmq::rep_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::rep_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\rep.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::rep_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\req.cpp	/^int zmq::req_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::req_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\req.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::req_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\router.cpp	/^int zmq::router_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::router_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\router.hpp	/^        int xsend (msg_t *msg_, int flags_);$/;"	p	class:zmq::router_t	access:public	signature:(msg_t *msg_, int flags_)
xsend	.\src\socket_base.cpp	/^int zmq::socket_base_t::xsend (msg_t *, int)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *, int)
xsend	.\src\socket_base.hpp	/^        virtual int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\sub.cpp	/^int zmq::sub_t::xsend (msg_t *, int)$/;"	f	class:zmq::sub_t	signature:(msg_t *, int)
xsend	.\src\sub.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::sub_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\xpub.cpp	/^int zmq::xpub_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::xpub_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\xpub.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
xsend	.\src\xsub.cpp	/^int zmq::xsub_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::xsub_t	signature:(msg_t *msg_, int flags_)
xsend	.\src\xsub.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
xsetsockopt	.\src\router.cpp	/^int zmq::router_t::xsetsockopt (int option_, const void *optval_,$/;"	f	class:zmq::router_t	signature:(int option_, const void *optval_, size_t optvallen_)
xsetsockopt	.\src\router.hpp	/^        int xsetsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::router_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
xsetsockopt	.\src\socket_base.cpp	/^int zmq::socket_base_t::xsetsockopt (int, const void *, size_t)$/;"	f	class:zmq::socket_base_t	signature:(int, const void *, size_t)
xsetsockopt	.\src\socket_base.hpp	/^        virtual int xsetsockopt (int option_, const void *optval_,$/;"	p	class:zmq::socket_base_t	access:protected	signature:(int option_, const void *optval_, size_t optvallen_)
xsetsockopt	.\src\sub.cpp	/^int zmq::sub_t::xsetsockopt (int option_, const void *optval_,$/;"	f	class:zmq::sub_t	signature:(int option_, const void *optval_, size_t optvallen_)
xsetsockopt	.\src\sub.hpp	/^        int xsetsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::sub_t	access:protected	signature:(int option_, const void *optval_, size_t optvallen_)
xsetsockopt	.\src\xpub.cpp	/^int zmq::xpub_t::xsetsockopt (int option_, const void *optval_,$/;"	f	class:zmq::xpub_t	signature:(int option_, const void *optval_, size_t optvallen_)
xsetsockopt	.\src\xpub.hpp	/^        int xsetsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::xpub_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
xsub_session_t	.\src\xsub.cpp	/^zmq::xsub_session_t::xsub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::xsub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
xsub_session_t	.\src\xsub.hpp	/^        xsub_session_t (class io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::xsub_session_t	access:public	signature:(class io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
xsub_session_t	.\src\xsub.hpp	/^        xsub_session_t (const xsub_session_t&);$/;"	p	class:zmq::xsub_session_t	access:private	signature:(const xsub_session_t&)
xsub_session_t	.\src\xsub.hpp	/^    class xsub_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
xsub_t	.\src\xsub.cpp	/^zmq::xsub_t::xsub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::xsub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
xsub_t	.\src\xsub.hpp	/^        xsub_t (const xsub_t&);$/;"	p	class:zmq::xsub_t	access:private	signature:(const xsub_t&)
xsub_t	.\src\xsub.hpp	/^        xsub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::xsub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
xsub_t	.\src\xsub.hpp	/^    class xsub_t :$/;"	c	namespace:zmq	inherits:socket_base_t
xterminated	.\src\dealer.cpp	/^void zmq::dealer_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_)
xterminated	.\src\dealer.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_)
xterminated	.\src\pair.cpp	/^void zmq::pair_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::pair_t	signature:(pipe_t *pipe_)
xterminated	.\src\pair.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_)
xterminated	.\src\pull.cpp	/^void zmq::pull_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::pull_t	signature:(pipe_t *pipe_)
xterminated	.\src\pull.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::pipe_t *pipe_)
xterminated	.\src\push.cpp	/^void zmq::push_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::push_t	signature:(pipe_t *pipe_)
xterminated	.\src\push.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::pipe_t *pipe_)
xterminated	.\src\router.cpp	/^void zmq::router_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
xterminated	.\src\router.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_)
xterminated	.\src\socket_base.hpp	/^        virtual void xterminated (pipe_t *pipe_) = 0;$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
xterminated	.\src\xpub.cpp	/^void zmq::xpub_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_)
xterminated	.\src\xpub.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_)
xterminated	.\src\xsub.cpp	/^void zmq::xsub_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
xterminated	.\src\xsub.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_)
xwrite_activated	.\src\dealer.cpp	/^void zmq::dealer_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_)
xwrite_activated	.\src\dealer.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_)
xwrite_activated	.\src\pair.cpp	/^void zmq::pair_t::xwrite_activated (pipe_t *)$/;"	f	class:zmq::pair_t	signature:(pipe_t *)
xwrite_activated	.\src\pair.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_)
xwrite_activated	.\src\push.cpp	/^void zmq::push_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::push_t	signature:(pipe_t *pipe_)
xwrite_activated	.\src\push.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::pipe_t *pipe_)
xwrite_activated	.\src\router.cpp	/^void zmq::router_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
xwrite_activated	.\src\router.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_)
xwrite_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::xwrite_activated (pipe_t *)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *)
xwrite_activated	.\src\socket_base.hpp	/^        virtual void xwrite_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
xwrite_activated	.\src\xpub.cpp	/^void zmq::xpub_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_)
xwrite_activated	.\src\xpub.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_)
xwrite_activated	.\src\xsub.cpp	/^void zmq::xsub_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
xwrite_activated	.\src\xsub.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_)
ypipe_t	.\src\ypipe.hpp	/^        inline ypipe_t ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
ypipe_t	.\src\ypipe.hpp	/^        ypipe_t (const ypipe_t&);$/;"	p	class:zmq::ypipe_t	access:protected	signature:(const ypipe_t&)
ypipe_t	.\src\ypipe.hpp	/^    template <typename T, int N> class ypipe_t$/;"	c	namespace:zmq
yqueue_t	.\src\yqueue.hpp	/^        inline yqueue_t ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
yqueue_t	.\src\yqueue.hpp	/^        yqueue_t (const yqueue_t&);$/;"	p	class:zmq::yqueue_t	access:private	signature:(const yqueue_t&)
yqueue_t	.\src\yqueue.hpp	/^    template <typename T, int N> class yqueue_t$/;"	c	namespace:zmq
zmq	.\src\address.hpp	/^namespace zmq$/;"	n
zmq	.\src\array.hpp	/^namespace zmq$/;"	n
zmq	.\src\atomic_counter.hpp	/^namespace zmq$/;"	n
zmq	.\src\atomic_ptr.hpp	/^namespace zmq$/;"	n
zmq	.\src\blob.hpp	/^namespace zmq$/;"	n
zmq	.\src\clock.hpp	/^namespace zmq$/;"	n
zmq	.\src\command.hpp	/^namespace zmq$/;"	n
zmq	.\src\config.hpp	/^namespace zmq$/;"	n
zmq	.\src\ctx.hpp	/^namespace zmq$/;"	n
zmq	.\src\dealer.hpp	/^namespace zmq$/;"	n
zmq	.\src\decoder.hpp	/^namespace zmq$/;"	n
zmq	.\src\devpoll.hpp	/^namespace zmq$/;"	n
zmq	.\src\dist.hpp	/^namespace zmq$/;"	n
zmq	.\src\encoder.hpp	/^namespace zmq$/;"	n
zmq	.\src\epoll.hpp	/^namespace zmq$/;"	n
zmq	.\src\err.hpp	/^namespace zmq$/;"	n
zmq	.\src\fd.hpp	/^namespace zmq$/;"	n
zmq	.\src\fq.hpp	/^namespace zmq$/;"	n
zmq	.\src\i_decoder.hpp	/^namespace zmq$/;"	n
zmq	.\src\i_encoder.hpp	/^namespace zmq$/;"	n
zmq	.\src\i_engine.hpp	/^namespace zmq$/;"	n
zmq	.\src\i_msg_sink.hpp	/^namespace zmq$/;"	n
zmq	.\src\i_msg_source.hpp	/^namespace zmq$/;"	n
zmq	.\src\i_poll_events.hpp	/^namespace zmq$/;"	n
zmq	.\src\io_object.hpp	/^namespace zmq$/;"	n
zmq	.\src\io_thread.hpp	/^namespace zmq$/;"	n
zmq	.\src\ip.hpp	/^namespace zmq$/;"	n
zmq	.\src\ipc_address.hpp	/^namespace zmq$/;"	n
zmq	.\src\ipc_connecter.hpp	/^namespace zmq$/;"	n
zmq	.\src\ipc_listener.hpp	/^namespace zmq$/;"	n
zmq	.\src\kqueue.hpp	/^namespace zmq$/;"	n
zmq	.\src\lb.hpp	/^namespace zmq$/;"	n
zmq	.\src\mailbox.hpp	/^namespace zmq$/;"	n
zmq	.\src\msg.hpp	/^namespace zmq$/;"	n
zmq	.\src\mtrie.hpp	/^namespace zmq$/;"	n
zmq	.\src\mutex.hpp	/^namespace zmq$/;"	n
zmq	.\src\object.hpp	/^namespace zmq$/;"	n
zmq	.\src\options.hpp	/^namespace zmq$/;"	n
zmq	.\src\own.hpp	/^namespace zmq$/;"	n
zmq	.\src\pair.hpp	/^namespace zmq$/;"	n
zmq	.\src\pgm_receiver.hpp	/^namespace zmq$/;"	n
zmq	.\src\pgm_sender.hpp	/^namespace zmq$/;"	n
zmq	.\src\pgm_socket.hpp	/^namespace zmq$/;"	n
zmq	.\src\pipe.hpp	/^namespace zmq$/;"	n
zmq	.\src\poll.hpp	/^namespace zmq$/;"	n
zmq	.\src\poller_base.hpp	/^namespace zmq$/;"	n
zmq	.\src\proxy.hpp	/^namespace zmq$/;"	n
zmq	.\src\pub.hpp	/^namespace zmq$/;"	n
zmq	.\src\pull.hpp	/^namespace zmq$/;"	n
zmq	.\src\push.hpp	/^namespace zmq$/;"	n
zmq	.\src\random.hpp	/^namespace zmq$/;"	n
zmq	.\src\reaper.hpp	/^namespace zmq$/;"	n
zmq	.\src\rep.hpp	/^namespace zmq$/;"	n
zmq	.\src\req.hpp	/^namespace zmq$/;"	n
zmq	.\src\router.hpp	/^namespace zmq$/;"	n
zmq	.\src\select.hpp	/^namespace zmq$/;"	n
zmq	.\src\session_base.hpp	/^namespace zmq$/;"	n
zmq	.\src\signaler.hpp	/^namespace zmq$/;"	n
zmq	.\src\socket_base.hpp	/^namespace zmq$/;"	n
zmq	.\src\stream_engine.hpp	/^namespace zmq$/;"	n
zmq	.\src\sub.hpp	/^namespace zmq$/;"	n
zmq	.\src\tcp.hpp	/^namespace zmq$/;"	n
zmq	.\src\tcp_address.hpp	/^namespace zmq$/;"	n
zmq	.\src\tcp_connecter.hpp	/^namespace zmq$/;"	n
zmq	.\src\tcp_listener.hpp	/^namespace zmq$/;"	n
zmq	.\src\thread.hpp	/^namespace zmq$/;"	n
zmq	.\src\trie.hpp	/^namespace zmq$/;"	n
zmq	.\src\v1_decoder.hpp	/^namespace zmq$/;"	n
zmq	.\src\v1_encoder.hpp	/^namespace zmq$/;"	n
zmq	.\src\v1_protocol.hpp	/^namespace zmq$/;"	n
zmq	.\src\wire.hpp	/^namespace zmq$/;"	n
zmq	.\src\xpub.hpp	/^namespace zmq$/;"	n
zmq	.\src\xsub.hpp	/^namespace zmq$/;"	n
zmq	.\src\ypipe.hpp	/^namespace zmq$/;"	n
zmq	.\src\yqueue.hpp	/^namespace zmq$/;"	n
zmq::address_t	.\src\address.hpp	/^    struct address_t {$/;"	s	namespace:zmq
zmq::address_t::__anon14::ipc_addr	.\src\address.hpp	/^            ipc_address_t *ipc_addr;$/;"	m	union:zmq::address_t::__anon14	access:public
zmq::address_t::__anon14::tcp_addr	.\src\address.hpp	/^            tcp_address_t *tcp_addr;$/;"	m	union:zmq::address_t::__anon14	access:public
zmq::address_t::address	.\src\address.hpp	/^        const std::string address;$/;"	m	struct:zmq::address_t	access:public
zmq::address_t::address_t	.\src\address.cpp	/^zmq::address_t::address_t ($/;"	f	class:zmq::address_t	signature:( const std::string &protocol_, const std::string &address_)
zmq::address_t::address_t	.\src\address.hpp	/^        address_t (const std::string &protocol_, const std::string &address_);$/;"	p	struct:zmq::address_t	access:public	signature:(const std::string &protocol_, const std::string &address_)
zmq::address_t::protocol	.\src\address.hpp	/^        const std::string protocol;$/;"	m	struct:zmq::address_t	access:public
zmq::address_t::resolved	.\src\address.hpp	/^        } resolved;$/;"	m	struct:zmq::address_t	typeref:union:zmq::address_t::__anon14	access:public
zmq::address_t::to_string	.\src\address.cpp	/^int zmq::address_t::to_string (std::string &addr_) const$/;"	f	class:zmq::address_t	signature:(std::string &addr_) const
zmq::address_t::to_string	.\src\address.hpp	/^        int to_string (std::string &addr_) const;$/;"	p	struct:zmq::address_t	access:public	signature:(std::string &addr_) const
zmq::address_t::~address_t	.\src\address.cpp	/^zmq::address_t::~address_t ()$/;"	f	class:zmq::address_t	signature:()
zmq::address_t::~address_t	.\src\address.hpp	/^        ~address_t ();$/;"	p	struct:zmq::address_t	access:public	signature:()
zmq::array_item_t	.\src\array.hpp	/^    template <int ID = 0> class array_item_t$/;"	c	namespace:zmq
zmq::array_item_t::array_index	.\src\array.hpp	/^        int array_index;$/;"	m	class:zmq::array_item_t	access:private
zmq::array_item_t::array_item_t	.\src\array.hpp	/^        array_item_t (const array_item_t&);$/;"	p	class:zmq::array_item_t	access:private	signature:(const array_item_t&)
zmq::array_item_t::array_item_t	.\src\array.hpp	/^        inline array_item_t () :$/;"	f	class:zmq::array_item_t	access:public	signature:()
zmq::array_item_t::get_array_index	.\src\array.hpp	/^        inline int get_array_index ()$/;"	f	class:zmq::array_item_t	access:public	signature:()
zmq::array_item_t::operator =	.\src\array.hpp	/^        const array_item_t &operator = (const array_item_t&);$/;"	p	class:zmq::array_item_t	access:private	signature:(const array_item_t&)
zmq::array_item_t::set_array_index	.\src\array.hpp	/^        inline void set_array_index (int index_)$/;"	f	class:zmq::array_item_t	access:public	signature:(int index_)
zmq::array_item_t::~array_item_t	.\src\array.hpp	/^        inline virtual ~array_item_t ()$/;"	f	class:zmq::array_item_t	access:public	signature:()
zmq::array_t	.\src\array.hpp	/^    template <typename T, int ID = 0> class array_t$/;"	c	namespace:zmq
zmq::array_t::array_t	.\src\array.hpp	/^        array_t (const array_t&);$/;"	p	class:zmq::array_t	access:private	signature:(const array_t&)
zmq::array_t::array_t	.\src\array.hpp	/^        inline array_t ()$/;"	f	class:zmq::array_t	access:public	signature:()
zmq::array_t::clear	.\src\array.hpp	/^        inline void clear ()$/;"	f	class:zmq::array_t	access:public	signature:()
zmq::array_t::empty	.\src\array.hpp	/^        inline bool empty ()$/;"	f	class:zmq::array_t	access:public	signature:()
zmq::array_t::erase	.\src\array.hpp	/^        inline void erase (T *item_) {$/;"	f	class:zmq::array_t	access:public	signature:(T *item_)
zmq::array_t::erase	.\src\array.hpp	/^        inline void erase (size_type index_) {$/;"	f	class:zmq::array_t	access:public	signature:(size_type index_)
zmq::array_t::index	.\src\array.hpp	/^        inline size_type index (T *item_)$/;"	f	class:zmq::array_t	access:public	signature:(T *item_)
zmq::array_t::item_t	.\src\array.hpp	/^        typedef array_item_t <ID> item_t;$/;"	t	class:zmq::array_t	access:private
zmq::array_t::items	.\src\array.hpp	/^        items_t items;$/;"	m	class:zmq::array_t	access:private
zmq::array_t::items_t	.\src\array.hpp	/^        typedef std::vector <T*> items_t;$/;"	t	class:zmq::array_t	access:private
zmq::array_t::operator =	.\src\array.hpp	/^        const array_t &operator = (const array_t&);$/;"	p	class:zmq::array_t	access:private	signature:(const array_t&)
zmq::array_t::operator []	.\src\array.hpp	/^        inline T *&operator [] (size_type index_)$/;"	f	class:zmq::array_t	access:public	signature:(size_type index_)
zmq::array_t::push_back	.\src\array.hpp	/^        inline void push_back (T *item_)$/;"	f	class:zmq::array_t	access:public	signature:(T *item_)
zmq::array_t::size	.\src\array.hpp	/^        inline size_type size ()$/;"	f	class:zmq::array_t	access:public	signature:()
zmq::array_t::size_type	.\src\array.hpp	/^        typedef typename std::vector <T*>::size_type size_type;$/;"	t	class:zmq::array_t	access:public
zmq::array_t::swap	.\src\array.hpp	/^        inline void swap (size_type index1_, size_type index2_)$/;"	f	class:zmq::array_t	access:public	signature:(size_type index1_, size_type index2_)
zmq::array_t::~array_t	.\src\array.hpp	/^        inline ~array_t ()$/;"	f	class:zmq::array_t	access:public	signature:()
zmq::atomic_counter_t	.\src\atomic_counter.hpp	/^    class atomic_counter_t$/;"	c	namespace:zmq
zmq::atomic_counter_t::add	.\src\atomic_counter.hpp	/^        inline integer_t add (integer_t increment_)$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t increment_)
zmq::atomic_counter_t::atomic_counter_t	.\src\atomic_counter.hpp	/^        atomic_counter_t (const atomic_counter_t&);$/;"	p	class:zmq::atomic_counter_t	access:private	signature:(const atomic_counter_t&)
zmq::atomic_counter_t::atomic_counter_t	.\src\atomic_counter.hpp	/^        inline atomic_counter_t (integer_t value_ = 0) :$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t value_ = 0)
zmq::atomic_counter_t::get	.\src\atomic_counter.hpp	/^        inline integer_t get ()$/;"	f	class:zmq::atomic_counter_t	access:public	signature:()
zmq::atomic_counter_t::integer_t	.\src\atomic_counter.hpp	/^        typedef uint32_t integer_t;$/;"	t	class:zmq::atomic_counter_t	access:public
zmq::atomic_counter_t::operator =	.\src\atomic_counter.hpp	/^        const atomic_counter_t& operator = (const atomic_counter_t&);$/;"	p	class:zmq::atomic_counter_t	access:private	signature:(const atomic_counter_t&)
zmq::atomic_counter_t::set	.\src\atomic_counter.hpp	/^        inline void set (integer_t value_)$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t value_)
zmq::atomic_counter_t::sub	.\src\atomic_counter.hpp	/^        inline bool sub (integer_t decrement)$/;"	f	class:zmq::atomic_counter_t	access:public	signature:(integer_t decrement)
zmq::atomic_counter_t::sync	.\src\atomic_counter.hpp	/^        mutex_t sync;$/;"	m	class:zmq::atomic_counter_t	access:private
zmq::atomic_counter_t::value	.\src\atomic_counter.hpp	/^        volatile integer_t value;$/;"	m	class:zmq::atomic_counter_t	access:private
zmq::atomic_counter_t::~atomic_counter_t	.\src\atomic_counter.hpp	/^        inline ~atomic_counter_t ()$/;"	f	class:zmq::atomic_counter_t	access:public	signature:()
zmq::atomic_ptr_t	.\src\atomic_ptr.hpp	/^    template <typename T> class atomic_ptr_t$/;"	c	namespace:zmq
zmq::atomic_ptr_t::atomic_ptr_t	.\src\atomic_ptr.hpp	/^        atomic_ptr_t (const atomic_ptr_t&);$/;"	p	class:zmq::atomic_ptr_t	access:private	signature:(const atomic_ptr_t&)
zmq::atomic_ptr_t::atomic_ptr_t	.\src\atomic_ptr.hpp	/^        inline atomic_ptr_t ()$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:()
zmq::atomic_ptr_t::cas	.\src\atomic_ptr.hpp	/^        inline T *cas (T *cmp_, T *val_)$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:(T *cmp_, T *val_)
zmq::atomic_ptr_t::operator =	.\src\atomic_ptr.hpp	/^        const atomic_ptr_t &operator = (const atomic_ptr_t&);$/;"	p	class:zmq::atomic_ptr_t	access:private	signature:(const atomic_ptr_t&)
zmq::atomic_ptr_t::ptr	.\src\atomic_ptr.hpp	/^        volatile T *ptr;$/;"	m	class:zmq::atomic_ptr_t	access:private
zmq::atomic_ptr_t::set	.\src\atomic_ptr.hpp	/^        inline void set (T *ptr_)$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:(T *ptr_)
zmq::atomic_ptr_t::sync	.\src\atomic_ptr.hpp	/^        mutex_t sync;$/;"	m	class:zmq::atomic_ptr_t	access:private
zmq::atomic_ptr_t::xchg	.\src\atomic_ptr.hpp	/^        inline T *xchg (T *val_)$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:(T *val_)
zmq::atomic_ptr_t::~atomic_ptr_t	.\src\atomic_ptr.hpp	/^        inline ~atomic_ptr_t ()$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:()
zmq::blob_t	.\src\blob.hpp	/^    typedef std::basic_string <unsigned char> blob_t;$/;"	t	namespace:zmq
zmq::clock_precision	.\src\config.hpp	/^        clock_precision = 1000000,$/;"	e	enum:zmq::__anon32
zmq::clock_t	.\src\clock.hpp	/^    class clock_t$/;"	c	namespace:zmq
zmq::clock_t::clock_t	.\src\clock.cpp	/^zmq::clock_t::clock_t () :$/;"	f	class:zmq::clock_t	signature:()
zmq::clock_t::clock_t	.\src\clock.hpp	/^        clock_t ();$/;"	p	class:zmq::clock_t	access:public	signature:()
zmq::clock_t::clock_t	.\src\clock.hpp	/^        clock_t (const clock_t&);$/;"	p	class:zmq::clock_t	access:private	signature:(const clock_t&)
zmq::clock_t::last_time	.\src\clock.hpp	/^        uint64_t last_time;$/;"	m	class:zmq::clock_t	access:private
zmq::clock_t::last_tsc	.\src\clock.hpp	/^        uint64_t last_tsc;$/;"	m	class:zmq::clock_t	access:private
zmq::clock_t::now_ms	.\src\clock.cpp	/^uint64_t zmq::clock_t::now_ms ()$/;"	f	class:zmq::clock_t	signature:()
zmq::clock_t::now_ms	.\src\clock.hpp	/^        uint64_t now_ms ();$/;"	p	class:zmq::clock_t	access:public	signature:()
zmq::clock_t::now_us	.\src\clock.cpp	/^uint64_t zmq::clock_t::now_us ()$/;"	f	class:zmq::clock_t	signature:()
zmq::clock_t::now_us	.\src\clock.hpp	/^        static uint64_t now_us ();$/;"	p	class:zmq::clock_t	access:public	signature:()
zmq::clock_t::operator =	.\src\clock.hpp	/^        const clock_t &operator = (const clock_t&);$/;"	p	class:zmq::clock_t	access:private	signature:(const clock_t&)
zmq::clock_t::rdtsc	.\src\clock.cpp	/^uint64_t zmq::clock_t::rdtsc ()$/;"	f	class:zmq::clock_t	signature:()
zmq::clock_t::rdtsc	.\src\clock.hpp	/^        static uint64_t rdtsc ();$/;"	p	class:zmq::clock_t	access:public	signature:()
zmq::clock_t::~clock_t	.\src\clock.cpp	/^zmq::clock_t::~clock_t ()$/;"	f	class:zmq::clock_t	signature:()
zmq::clock_t::~clock_t	.\src\clock.hpp	/^        ~clock_t ();$/;"	p	class:zmq::clock_t	access:public	signature:()
zmq::command_pipe_granularity	.\src\config.hpp	/^        command_pipe_granularity = 16,$/;"	e	enum:zmq::__anon32
zmq::command_t	.\src\command.hpp	/^    struct command_t$/;"	s	namespace:zmq
zmq::command_t::__anon15::__anon18::object	.\src\command.hpp	/^                zmq::own_t *object;$/;"	m	struct:zmq::command_t::__anon15::__anon18	access:public
zmq::command_t::__anon15::__anon19::engine	.\src\command.hpp	/^                struct i_engine *engine;$/;"	m	struct:zmq::command_t::__anon15::__anon19	typeref:struct:zmq::command_t::__anon15::__anon19::i_engine	access:public
zmq::command_t::__anon15::__anon20::pipe	.\src\command.hpp	/^                zmq::pipe_t *pipe;$/;"	m	struct:zmq::command_t::__anon15::__anon20	access:public
zmq::command_t::__anon15::__anon22::msgs_read	.\src\command.hpp	/^                uint64_t msgs_read;$/;"	m	struct:zmq::command_t::__anon15::__anon22	access:public
zmq::command_t::__anon15::__anon23::pipe	.\src\command.hpp	/^                void *pipe;$/;"	m	struct:zmq::command_t::__anon15::__anon23	access:public
zmq::command_t::__anon15::__anon26::object	.\src\command.hpp	/^                zmq::own_t *object;$/;"	m	struct:zmq::command_t::__anon15::__anon26	access:public
zmq::command_t::__anon15::__anon27::linger	.\src\command.hpp	/^                int linger;$/;"	m	struct:zmq::command_t::__anon15::__anon27	access:public
zmq::command_t::__anon15::__anon29::socket	.\src\command.hpp	/^                zmq::socket_base_t *socket;$/;"	m	struct:zmq::command_t::__anon15::__anon29	access:public
zmq::command_t::__anon15::activate_read	.\src\command.hpp	/^            } activate_read;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon21	access:public
zmq::command_t::__anon15::activate_write	.\src\command.hpp	/^            } activate_write;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon22	access:public
zmq::command_t::__anon15::attach	.\src\command.hpp	/^            } attach;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon19	access:public
zmq::command_t::__anon15::bind	.\src\command.hpp	/^            } bind;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon20	access:public
zmq::command_t::__anon15::done	.\src\command.hpp	/^            } done;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon31	access:public
zmq::command_t::__anon15::hiccup	.\src\command.hpp	/^            } hiccup;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon23	access:public
zmq::command_t::__anon15::own	.\src\command.hpp	/^            } own;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon18	access:public
zmq::command_t::__anon15::pipe_term	.\src\command.hpp	/^            } pipe_term;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon24	access:public
zmq::command_t::__anon15::pipe_term_ack	.\src\command.hpp	/^            } pipe_term_ack;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon25	access:public
zmq::command_t::__anon15::plug	.\src\command.hpp	/^            } plug;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon17	access:public
zmq::command_t::__anon15::reap	.\src\command.hpp	/^            } reap;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon29	access:public
zmq::command_t::__anon15::reaped	.\src\command.hpp	/^            } reaped;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon30	access:public
zmq::command_t::__anon15::stop	.\src\command.hpp	/^            } stop;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon16	access:public
zmq::command_t::__anon15::term	.\src\command.hpp	/^            } term;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon27	access:public
zmq::command_t::__anon15::term_ack	.\src\command.hpp	/^            } term_ack;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon28	access:public
zmq::command_t::__anon15::term_req	.\src\command.hpp	/^            } term_req;$/;"	m	union:zmq::command_t::__anon15	typeref:struct:zmq::command_t::__anon15::__anon26	access:public
zmq::command_t::activate_read	.\src\command.hpp	/^            activate_read,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::activate_write	.\src\command.hpp	/^            activate_write,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::args	.\src\command.hpp	/^        } args;$/;"	m	struct:zmq::command_t	typeref:union:zmq::command_t::__anon15	access:public
zmq::command_t::attach	.\src\command.hpp	/^            attach,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::bind	.\src\command.hpp	/^            bind,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::destination	.\src\command.hpp	/^        zmq::object_t *destination;$/;"	m	struct:zmq::command_t	access:public
zmq::command_t::done	.\src\command.hpp	/^            done$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::hiccup	.\src\command.hpp	/^            hiccup,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::own	.\src\command.hpp	/^            own,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::pipe_term	.\src\command.hpp	/^            pipe_term,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::pipe_term_ack	.\src\command.hpp	/^            pipe_term_ack,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::plug	.\src\command.hpp	/^            plug,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::reap	.\src\command.hpp	/^            reap,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::reaped	.\src\command.hpp	/^            reaped,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::stop	.\src\command.hpp	/^            stop,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::term	.\src\command.hpp	/^            term,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::term_ack	.\src\command.hpp	/^            term_ack,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::term_req	.\src\command.hpp	/^            term_req,$/;"	e	enum:zmq::command_t::type_t
zmq::command_t::type	.\src\command.hpp	/^        } type;$/;"	m	struct:zmq::command_t	typeref:enum:zmq::command_t::type_t	access:public
zmq::command_t::type_t	.\src\command.hpp	/^        enum type_t$/;"	g	struct:zmq::command_t	access:public
zmq::ctx_t	.\src\ctx.hpp	/^    class ctx_t$/;"	c	namespace:zmq
zmq::ctx_t::check_tag	.\src\ctx.cpp	/^bool zmq::ctx_t::check_tag ()$/;"	f	class:zmq::ctx_t	signature:()
zmq::ctx_t::check_tag	.\src\ctx.hpp	/^        bool check_tag ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
zmq::ctx_t::choose_io_thread	.\src\ctx.cpp	/^zmq::io_thread_t *zmq::ctx_t::choose_io_thread (uint64_t affinity_)$/;"	f	class:zmq::ctx_t	signature:(uint64_t affinity_)
zmq::ctx_t::choose_io_thread	.\src\ctx.hpp	/^        zmq::io_thread_t *choose_io_thread (uint64_t affinity_);$/;"	p	class:zmq::ctx_t	access:public	signature:(uint64_t affinity_)
zmq::ctx_t::create_socket	.\src\ctx.cpp	/^zmq::socket_base_t *zmq::ctx_t::create_socket (int type_)$/;"	f	class:zmq::ctx_t	signature:(int type_)
zmq::ctx_t::create_socket	.\src\ctx.hpp	/^        zmq::socket_base_t *create_socket (int type_);$/;"	p	class:zmq::ctx_t	access:public	signature:(int type_)
zmq::ctx_t::ctx_t	.\src\ctx.cpp	/^zmq::ctx_t::ctx_t () :$/;"	f	class:zmq::ctx_t	signature:()
zmq::ctx_t::ctx_t	.\src\ctx.hpp	/^        ctx_t ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
zmq::ctx_t::ctx_t	.\src\ctx.hpp	/^        ctx_t (const ctx_t&);$/;"	p	class:zmq::ctx_t	access:private	signature:(const ctx_t&)
zmq::ctx_t::destroy_socket	.\src\ctx.cpp	/^void zmq::ctx_t::destroy_socket (class socket_base_t *socket_)$/;"	f	class:zmq::ctx_t	signature:(class socket_base_t *socket_)
zmq::ctx_t::destroy_socket	.\src\ctx.hpp	/^        void destroy_socket (zmq::socket_base_t *socket_);$/;"	p	class:zmq::ctx_t	access:public	signature:(zmq::socket_base_t *socket_)
zmq::ctx_t::empty_slots	.\src\ctx.hpp	/^        emtpy_slots_t empty_slots;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::emtpy_slots_t	.\src\ctx.hpp	/^        typedef std::vector <uint32_t> emtpy_slots_t;$/;"	t	class:zmq::ctx_t	access:private
zmq::ctx_t::endpoints	.\src\ctx.hpp	/^        endpoints_t endpoints;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::endpoints_sync	.\src\ctx.hpp	/^        mutex_t endpoints_sync;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::endpoints_t	.\src\ctx.hpp	/^        typedef std::map <std::string, endpoint_t> endpoints_t;$/;"	t	class:zmq::ctx_t	access:private
zmq::ctx_t::find_endpoint	.\src\ctx.cpp	/^zmq::endpoint_t zmq::ctx_t::find_endpoint (const char *addr_)$/;"	f	class:zmq::ctx_t	signature:(const char *addr_)
zmq::ctx_t::find_endpoint	.\src\ctx.hpp	/^        endpoint_t find_endpoint (const char *addr_);$/;"	p	class:zmq::ctx_t	access:public	signature:(const char *addr_)
zmq::ctx_t::get	.\src\ctx.cpp	/^int zmq::ctx_t::get (int option_)$/;"	f	class:zmq::ctx_t	signature:(int option_)
zmq::ctx_t::get	.\src\ctx.hpp	/^        int get (int option_);$/;"	p	class:zmq::ctx_t	access:public	signature:(int option_)
zmq::ctx_t::get_reaper	.\src\ctx.cpp	/^zmq::object_t *zmq::ctx_t::get_reaper ()$/;"	f	class:zmq::ctx_t	signature:()
zmq::ctx_t::get_reaper	.\src\ctx.hpp	/^        zmq::object_t *get_reaper ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
zmq::ctx_t::io_thread_count	.\src\ctx.hpp	/^        int io_thread_count;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::io_threads	.\src\ctx.hpp	/^        io_threads_t io_threads;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::io_threads_t	.\src\ctx.hpp	/^        typedef std::vector <zmq::io_thread_t*> io_threads_t;$/;"	t	class:zmq::ctx_t	access:private
zmq::ctx_t::max_socket_id	.\src\ctx.cpp	/^zmq::atomic_counter_t zmq::ctx_t::max_socket_id;$/;"	m	class:zmq::ctx_t	file:
zmq::ctx_t::max_socket_id	.\src\ctx.hpp	/^        static atomic_counter_t max_socket_id;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::max_sockets	.\src\ctx.hpp	/^        int max_sockets;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::operator =	.\src\ctx.hpp	/^        const ctx_t &operator = (const ctx_t&);$/;"	p	class:zmq::ctx_t	access:private	signature:(const ctx_t&)
zmq::ctx_t::opt_sync	.\src\ctx.hpp	/^        mutex_t opt_sync;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::reaper	.\src\ctx.hpp	/^        zmq::reaper_t *reaper;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::reaper_tid	.\src\ctx.hpp	/^            reaper_tid = 1$/;"	e	enum:zmq::ctx_t::__anon33
zmq::ctx_t::register_endpoint	.\src\ctx.cpp	/^int zmq::ctx_t::register_endpoint (const char *addr_, endpoint_t &endpoint_)$/;"	f	class:zmq::ctx_t	signature:(const char *addr_, endpoint_t &endpoint_)
zmq::ctx_t::register_endpoint	.\src\ctx.hpp	/^        int register_endpoint (const char *addr_, endpoint_t &endpoint_);$/;"	p	class:zmq::ctx_t	access:public	signature:(const char *addr_, endpoint_t &endpoint_)
zmq::ctx_t::send_command	.\src\ctx.cpp	/^void zmq::ctx_t::send_command (uint32_t tid_, const command_t &command_)$/;"	f	class:zmq::ctx_t	signature:(uint32_t tid_, const command_t &command_)
zmq::ctx_t::send_command	.\src\ctx.hpp	/^        void send_command (uint32_t tid_, const command_t &command_);$/;"	p	class:zmq::ctx_t	access:public	signature:(uint32_t tid_, const command_t &command_)
zmq::ctx_t::set	.\src\ctx.cpp	/^int zmq::ctx_t::set (int option_, int optval_)$/;"	f	class:zmq::ctx_t	signature:(int option_, int optval_)
zmq::ctx_t::set	.\src\ctx.hpp	/^        int set (int option_, int optval_);$/;"	p	class:zmq::ctx_t	access:public	signature:(int option_, int optval_)
zmq::ctx_t::slot_count	.\src\ctx.hpp	/^        uint32_t slot_count;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::slot_sync	.\src\ctx.hpp	/^        mutex_t slot_sync;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::slots	.\src\ctx.hpp	/^        mailbox_t **slots;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::sockets	.\src\ctx.hpp	/^        sockets_t sockets;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::sockets_t	.\src\ctx.hpp	/^        typedef array_t <socket_base_t> sockets_t;$/;"	t	class:zmq::ctx_t	access:private
zmq::ctx_t::starting	.\src\ctx.hpp	/^        bool starting;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::tag	.\src\ctx.hpp	/^        uint32_t tag;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::term_mailbox	.\src\ctx.hpp	/^        mailbox_t term_mailbox;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::term_tid	.\src\ctx.hpp	/^            term_tid = 0,$/;"	e	enum:zmq::ctx_t::__anon33
zmq::ctx_t::terminate	.\src\ctx.cpp	/^int zmq::ctx_t::terminate ()$/;"	f	class:zmq::ctx_t	signature:()
zmq::ctx_t::terminate	.\src\ctx.hpp	/^        int terminate ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
zmq::ctx_t::terminating	.\src\ctx.hpp	/^        bool terminating;$/;"	m	class:zmq::ctx_t	access:private
zmq::ctx_t::unregister_endpoints	.\src\ctx.cpp	/^void zmq::ctx_t::unregister_endpoints (socket_base_t *socket_)$/;"	f	class:zmq::ctx_t	signature:(socket_base_t *socket_)
zmq::ctx_t::unregister_endpoints	.\src\ctx.hpp	/^        void unregister_endpoints (zmq::socket_base_t *socket_);$/;"	p	class:zmq::ctx_t	access:public	signature:(zmq::socket_base_t *socket_)
zmq::ctx_t::~ctx_t	.\src\ctx.cpp	/^zmq::ctx_t::~ctx_t ()$/;"	f	class:zmq::ctx_t	signature:()
zmq::ctx_t::~ctx_t	.\src\ctx.hpp	/^        ~ctx_t ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
zmq::dealer_session_t	.\src\dealer.hpp	/^    class dealer_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
zmq::dealer_session_t::dealer_session_t	.\src\dealer.cpp	/^zmq::dealer_session_t::dealer_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::dealer_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::dealer_session_t::dealer_session_t	.\src\dealer.hpp	/^        dealer_session_t (const dealer_session_t&);$/;"	p	class:zmq::dealer_session_t	access:private	signature:(const dealer_session_t&)
zmq::dealer_session_t::dealer_session_t	.\src\dealer.hpp	/^        dealer_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::dealer_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::dealer_session_t::operator =	.\src\dealer.hpp	/^        const dealer_session_t &operator = (const dealer_session_t&);$/;"	p	class:zmq::dealer_session_t	access:private	signature:(const dealer_session_t&)
zmq::dealer_session_t::~dealer_session_t	.\src\dealer.cpp	/^zmq::dealer_session_t::~dealer_session_t ()$/;"	f	class:zmq::dealer_session_t	signature:()
zmq::dealer_session_t::~dealer_session_t	.\src\dealer.hpp	/^        ~dealer_session_t ();$/;"	p	class:zmq::dealer_session_t	access:public	signature:()
zmq::dealer_t	.\src\dealer.hpp	/^    class dealer_t :$/;"	c	namespace:zmq	inherits:socket_base_t
zmq::dealer_t::dealer_t	.\src\dealer.cpp	/^zmq::dealer_t::dealer_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::dealer_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::dealer_t::dealer_t	.\src\dealer.hpp	/^        dealer_t (const dealer_t&);$/;"	p	class:zmq::dealer_t	access:private	signature:(const dealer_t&)
zmq::dealer_t::dealer_t	.\src\dealer.hpp	/^        dealer_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::dealer_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
zmq::dealer_t::fq	.\src\dealer.hpp	/^        fq_t fq;$/;"	m	class:zmq::dealer_t	access:private
zmq::dealer_t::lb	.\src\dealer.hpp	/^        lb_t lb;$/;"	m	class:zmq::dealer_t	access:private
zmq::dealer_t::operator =	.\src\dealer.hpp	/^        const dealer_t &operator = (const dealer_t&);$/;"	p	class:zmq::dealer_t	access:private	signature:(const dealer_t&)
zmq::dealer_t::prefetched	.\src\dealer.hpp	/^        bool prefetched;$/;"	m	class:zmq::dealer_t	access:private
zmq::dealer_t::prefetched_msg	.\src\dealer.hpp	/^        msg_t prefetched_msg;$/;"	m	class:zmq::dealer_t	access:private
zmq::dealer_t::xattach_pipe	.\src\dealer.cpp	/^void zmq::dealer_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::dealer_t::xattach_pipe	.\src\dealer.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
zmq::dealer_t::xhas_in	.\src\dealer.cpp	/^bool zmq::dealer_t::xhas_in ()$/;"	f	class:zmq::dealer_t	signature:()
zmq::dealer_t::xhas_in	.\src\dealer.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::dealer_t	access:protected	signature:()
zmq::dealer_t::xhas_out	.\src\dealer.cpp	/^bool zmq::dealer_t::xhas_out ()$/;"	f	class:zmq::dealer_t	signature:()
zmq::dealer_t::xhas_out	.\src\dealer.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::dealer_t	access:protected	signature:()
zmq::dealer_t::xread_activated	.\src\dealer.cpp	/^void zmq::dealer_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_)
zmq::dealer_t::xread_activated	.\src\dealer.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::dealer_t::xrecv	.\src\dealer.cpp	/^int zmq::dealer_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::dealer_t	signature:(msg_t *msg_, int flags_)
zmq::dealer_t::xrecv	.\src\dealer.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::dealer_t::xsend	.\src\dealer.cpp	/^int zmq::dealer_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::dealer_t	signature:(msg_t *msg_, int flags_)
zmq::dealer_t::xsend	.\src\dealer.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::dealer_t::xterminated	.\src\dealer.cpp	/^void zmq::dealer_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_)
zmq::dealer_t::xterminated	.\src\dealer.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::dealer_t::xwrite_activated	.\src\dealer.cpp	/^void zmq::dealer_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::dealer_t	signature:(pipe_t *pipe_)
zmq::dealer_t::xwrite_activated	.\src\dealer.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dealer_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::dealer_t::~dealer_t	.\src\dealer.cpp	/^zmq::dealer_t::~dealer_t ()$/;"	f	class:zmq::dealer_t	signature:()
zmq::dealer_t::~dealer_t	.\src\dealer.hpp	/^        ~dealer_t ();$/;"	p	class:zmq::dealer_t	access:public	signature:()
zmq::decoder_base_t	.\src\decoder.hpp	/^    template <typename T> class decoder_base_t : public i_decoder$/;"	c	namespace:zmq	inherits:i_decoder
zmq::decoder_base_t::buf	.\src\decoder.hpp	/^        unsigned char *buf;$/;"	m	class:zmq::decoder_base_t	access:private
zmq::decoder_base_t::bufsize	.\src\decoder.hpp	/^        size_t bufsize;$/;"	m	class:zmq::decoder_base_t	access:private
zmq::decoder_base_t::decoder_base_t	.\src\decoder.hpp	/^        decoder_base_t (const decoder_base_t&);$/;"	p	class:zmq::decoder_base_t	access:private	signature:(const decoder_base_t&)
zmq::decoder_base_t::decoder_base_t	.\src\decoder.hpp	/^        inline decoder_base_t (size_t bufsize_) :$/;"	f	class:zmq::decoder_base_t	access:public	signature:(size_t bufsize_)
zmq::decoder_base_t::decoding_error	.\src\decoder.hpp	/^        inline void decoding_error ()$/;"	f	class:zmq::decoder_base_t	access:protected	signature:()
zmq::decoder_base_t::get_buffer	.\src\decoder.hpp	/^        inline void get_buffer (unsigned char **data_, size_t *size_)$/;"	f	class:zmq::decoder_base_t	access:public	signature:(unsigned char **data_, size_t *size_)
zmq::decoder_base_t::message_ready_size	.\src\decoder.hpp	/^        inline bool message_ready_size (size_t msg_sz)$/;"	f	class:zmq::decoder_base_t	access:public	signature:(size_t msg_sz)
zmq::decoder_base_t::next	.\src\decoder.hpp	/^        step_t next;$/;"	m	class:zmq::decoder_base_t	access:private
zmq::decoder_base_t::next_step	.\src\decoder.hpp	/^        inline void next_step (void *read_pos_, size_t to_read_,$/;"	f	class:zmq::decoder_base_t	access:protected	signature:(void *read_pos_, size_t to_read_, step_t next_)
zmq::decoder_base_t::operator =	.\src\decoder.hpp	/^        const decoder_base_t &operator = (const decoder_base_t&);$/;"	p	class:zmq::decoder_base_t	access:private	signature:(const decoder_base_t&)
zmq::decoder_base_t::process_buffer	.\src\decoder.hpp	/^        inline size_t process_buffer (unsigned char *data_, size_t size_)$/;"	f	class:zmq::decoder_base_t	access:public	signature:(unsigned char *data_, size_t size_)
zmq::decoder_base_t::read_pos	.\src\decoder.hpp	/^        unsigned char *read_pos;$/;"	m	class:zmq::decoder_base_t	access:private
zmq::decoder_base_t::stalled	.\src\decoder.hpp	/^        bool stalled ()$/;"	f	class:zmq::decoder_base_t	access:public	signature:()
zmq::decoder_base_t::step_t	.\src\decoder.hpp	/^        typedef bool (T::*step_t) ();$/;"	t	class:zmq::decoder_base_t	access:protected
zmq::decoder_base_t::to_read	.\src\decoder.hpp	/^        size_t to_read;$/;"	m	class:zmq::decoder_base_t	access:private
zmq::decoder_base_t::~decoder_base_t	.\src\decoder.hpp	/^        inline virtual ~decoder_base_t ()$/;"	f	class:zmq::decoder_base_t	access:public	signature:()
zmq::decoder_t	.\src\decoder.hpp	/^    class decoder_t : public decoder_base_t <decoder_t>$/;"	c	namespace:zmq	inherits:decoder_base_t
zmq::decoder_t::decoder_t	.\src\decoder.cpp	/^zmq::decoder_t::decoder_t (size_t bufsize_, int64_t maxmsgsize_) :$/;"	f	class:zmq::decoder_t	signature:(size_t bufsize_, int64_t maxmsgsize_)
zmq::decoder_t::decoder_t	.\src\decoder.hpp	/^        decoder_t (const decoder_t&);$/;"	p	class:zmq::decoder_t	access:private	signature:(const decoder_t&)
zmq::decoder_t::decoder_t	.\src\decoder.hpp	/^        decoder_t (size_t bufsize_, int64_t maxmsgsize_);$/;"	p	class:zmq::decoder_t	access:public	signature:(size_t bufsize_, int64_t maxmsgsize_)
zmq::decoder_t::eight_byte_size_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::eight_byte_size_ready ()$/;"	f	class:zmq::decoder_t	signature:()
zmq::decoder_t::eight_byte_size_ready	.\src\decoder.hpp	/^        bool eight_byte_size_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
zmq::decoder_t::flags_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::flags_ready ()$/;"	f	class:zmq::decoder_t	signature:()
zmq::decoder_t::flags_ready	.\src\decoder.hpp	/^        bool flags_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
zmq::decoder_t::in_progress	.\src\decoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::decoder_t	access:private
zmq::decoder_t::maxmsgsize	.\src\decoder.hpp	/^        int64_t maxmsgsize;$/;"	m	class:zmq::decoder_t	access:private
zmq::decoder_t::message_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::message_ready ()$/;"	f	class:zmq::decoder_t	signature:()
zmq::decoder_t::message_ready	.\src\decoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
zmq::decoder_t::msg_sink	.\src\decoder.hpp	/^        i_msg_sink *msg_sink;$/;"	m	class:zmq::decoder_t	access:private
zmq::decoder_t::one_byte_size_ready	.\src\decoder.cpp	/^bool zmq::decoder_t::one_byte_size_ready ()$/;"	f	class:zmq::decoder_t	signature:()
zmq::decoder_t::one_byte_size_ready	.\src\decoder.hpp	/^        bool one_byte_size_ready ();$/;"	p	class:zmq::decoder_t	access:private	signature:()
zmq::decoder_t::operator =	.\src\decoder.hpp	/^        void operator = (const decoder_t&);$/;"	p	class:zmq::decoder_t	access:private	signature:(const decoder_t&)
zmq::decoder_t::set_msg_sink	.\src\decoder.cpp	/^void zmq::decoder_t::set_msg_sink (i_msg_sink *msg_sink_)$/;"	f	class:zmq::decoder_t	signature:(i_msg_sink *msg_sink_)
zmq::decoder_t::set_msg_sink	.\src\decoder.hpp	/^        void set_msg_sink (i_msg_sink *msg_sink_);$/;"	p	class:zmq::decoder_t	access:public	signature:(i_msg_sink *msg_sink_)
zmq::decoder_t::tmpbuf	.\src\decoder.hpp	/^        unsigned char tmpbuf [8];$/;"	m	class:zmq::decoder_t	access:private
zmq::decoder_t::~decoder_t	.\src\decoder.cpp	/^zmq::decoder_t::~decoder_t ()$/;"	f	class:zmq::decoder_t	signature:()
zmq::decoder_t::~decoder_t	.\src\decoder.hpp	/^        ~decoder_t ();$/;"	p	class:zmq::decoder_t	access:public	signature:()
zmq::devpoll_t	.\src\devpoll.hpp	/^    class devpoll_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
zmq::devpoll_t::add_fd	.\src\devpoll.cpp	/^zmq::devpoll_t::handle_t zmq::devpoll_t::add_fd (fd_t fd_,$/;"	f	class:zmq::devpoll_t	signature:(fd_t fd_, i_poll_events *reactor_)
zmq::devpoll_t::add_fd	.\src\devpoll.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
zmq::devpoll_t::devpoll_ctl	.\src\devpoll.cpp	/^void zmq::devpoll_t::devpoll_ctl (fd_t fd_, short events_)$/;"	f	class:zmq::devpoll_t	signature:(fd_t fd_, short events_)
zmq::devpoll_t::devpoll_ctl	.\src\devpoll.hpp	/^        void devpoll_ctl (fd_t fd_, short events_);$/;"	p	class:zmq::devpoll_t	access:private	signature:(fd_t fd_, short events_)
zmq::devpoll_t::devpoll_fd	.\src\devpoll.hpp	/^        fd_t devpoll_fd;$/;"	m	class:zmq::devpoll_t	access:private
zmq::devpoll_t::devpoll_t	.\src\devpoll.cpp	/^zmq::devpoll_t::devpoll_t () :$/;"	f	class:zmq::devpoll_t	signature:()
zmq::devpoll_t::devpoll_t	.\src\devpoll.hpp	/^        devpoll_t ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
zmq::devpoll_t::devpoll_t	.\src\devpoll.hpp	/^        devpoll_t (const devpoll_t&);$/;"	p	class:zmq::devpoll_t	access:private	signature:(const devpoll_t&)
zmq::devpoll_t::fd_entry_t	.\src\devpoll.hpp	/^        struct fd_entry_t$/;"	s	class:zmq::devpoll_t	access:private
zmq::devpoll_t::fd_entry_t::accepted	.\src\devpoll.hpp	/^            bool accepted;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
zmq::devpoll_t::fd_entry_t::events	.\src\devpoll.hpp	/^            short events;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
zmq::devpoll_t::fd_entry_t::reactor	.\src\devpoll.hpp	/^            zmq::i_poll_events *reactor;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
zmq::devpoll_t::fd_entry_t::valid	.\src\devpoll.hpp	/^            bool valid;$/;"	m	struct:zmq::devpoll_t::fd_entry_t	access:public
zmq::devpoll_t::fd_table	.\src\devpoll.hpp	/^        fd_table_t fd_table;$/;"	m	class:zmq::devpoll_t	access:private
zmq::devpoll_t::fd_table_t	.\src\devpoll.hpp	/^        typedef std::vector <fd_entry_t> fd_table_t;$/;"	t	class:zmq::devpoll_t	access:private
zmq::devpoll_t::handle_t	.\src\devpoll.hpp	/^        typedef fd_t handle_t;$/;"	t	class:zmq::devpoll_t	access:public
zmq::devpoll_t::loop	.\src\devpoll.cpp	/^void zmq::devpoll_t::loop ()$/;"	f	class:zmq::devpoll_t	signature:()
zmq::devpoll_t::loop	.\src\devpoll.hpp	/^        void loop ();$/;"	p	class:zmq::devpoll_t	access:private	signature:()
zmq::devpoll_t::operator =	.\src\devpoll.hpp	/^        const devpoll_t &operator = (const devpoll_t&);$/;"	p	class:zmq::devpoll_t	access:private	signature:(const devpoll_t&)
zmq::devpoll_t::pending_list	.\src\devpoll.hpp	/^        pending_list_t pending_list;$/;"	m	class:zmq::devpoll_t	access:private
zmq::devpoll_t::pending_list_t	.\src\devpoll.hpp	/^        typedef std::vector <fd_t> pending_list_t;$/;"	t	class:zmq::devpoll_t	access:private
zmq::devpoll_t::reset_pollin	.\src\devpoll.cpp	/^void zmq::devpoll_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
zmq::devpoll_t::reset_pollin	.\src\devpoll.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
zmq::devpoll_t::reset_pollout	.\src\devpoll.cpp	/^void zmq::devpoll_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
zmq::devpoll_t::reset_pollout	.\src\devpoll.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
zmq::devpoll_t::rm_fd	.\src\devpoll.cpp	/^void zmq::devpoll_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
zmq::devpoll_t::rm_fd	.\src\devpoll.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
zmq::devpoll_t::set_pollin	.\src\devpoll.cpp	/^void zmq::devpoll_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
zmq::devpoll_t::set_pollin	.\src\devpoll.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
zmq::devpoll_t::set_pollout	.\src\devpoll.cpp	/^void zmq::devpoll_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::devpoll_t	signature:(handle_t handle_)
zmq::devpoll_t::set_pollout	.\src\devpoll.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::devpoll_t	access:public	signature:(handle_t handle_)
zmq::devpoll_t::start	.\src\devpoll.cpp	/^void zmq::devpoll_t::start ()$/;"	f	class:zmq::devpoll_t	signature:()
zmq::devpoll_t::start	.\src\devpoll.hpp	/^        void start ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
zmq::devpoll_t::stop	.\src\devpoll.cpp	/^void zmq::devpoll_t::stop ()$/;"	f	class:zmq::devpoll_t	signature:()
zmq::devpoll_t::stop	.\src\devpoll.hpp	/^        void stop ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
zmq::devpoll_t::stopping	.\src\devpoll.hpp	/^        bool stopping;$/;"	m	class:zmq::devpoll_t	access:private
zmq::devpoll_t::worker	.\src\devpoll.hpp	/^        thread_t worker;$/;"	m	class:zmq::devpoll_t	access:private
zmq::devpoll_t::worker_routine	.\src\devpoll.cpp	/^void zmq::devpoll_t::worker_routine (void *arg_)$/;"	f	class:zmq::devpoll_t	signature:(void *arg_)
zmq::devpoll_t::worker_routine	.\src\devpoll.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::devpoll_t	access:private	signature:(void *arg_)
zmq::devpoll_t::~devpoll_t	.\src\devpoll.cpp	/^zmq::devpoll_t::~devpoll_t ()$/;"	f	class:zmq::devpoll_t	signature:()
zmq::devpoll_t::~devpoll_t	.\src\devpoll.hpp	/^        ~devpoll_t ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
zmq::dist_t	.\src\dist.hpp	/^    class dist_t$/;"	c	namespace:zmq
zmq::dist_t::activated	.\src\dist.cpp	/^void zmq::dist_t::activated (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
zmq::dist_t::activated	.\src\dist.hpp	/^        void activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::dist_t::active	.\src\dist.hpp	/^        pipes_t::size_type active;$/;"	m	class:zmq::dist_t	access:private
zmq::dist_t::attach	.\src\dist.cpp	/^void zmq::dist_t::attach (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
zmq::dist_t::attach	.\src\dist.hpp	/^        void attach (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::dist_t::dist_t	.\src\dist.cpp	/^zmq::dist_t::dist_t () :$/;"	f	class:zmq::dist_t	signature:()
zmq::dist_t::dist_t	.\src\dist.hpp	/^        dist_t ();$/;"	p	class:zmq::dist_t	access:public	signature:()
zmq::dist_t::dist_t	.\src\dist.hpp	/^        dist_t (const dist_t&);$/;"	p	class:zmq::dist_t	access:private	signature:(const dist_t&)
zmq::dist_t::distribute	.\src\dist.cpp	/^void zmq::dist_t::distribute (msg_t *msg_, int flags_)$/;"	f	class:zmq::dist_t	signature:(msg_t *msg_, int flags_)
zmq::dist_t::distribute	.\src\dist.hpp	/^        void distribute (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dist_t	access:private	signature:(zmq::msg_t *msg_, int flags_)
zmq::dist_t::eligible	.\src\dist.hpp	/^        pipes_t::size_type eligible;$/;"	m	class:zmq::dist_t	access:private
zmq::dist_t::has_out	.\src\dist.cpp	/^bool zmq::dist_t::has_out ()$/;"	f	class:zmq::dist_t	signature:()
zmq::dist_t::has_out	.\src\dist.hpp	/^        bool has_out ();$/;"	p	class:zmq::dist_t	access:public	signature:()
zmq::dist_t::match	.\src\dist.cpp	/^void zmq::dist_t::match (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
zmq::dist_t::match	.\src\dist.hpp	/^        void match (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::dist_t::matching	.\src\dist.hpp	/^        pipes_t::size_type matching;$/;"	m	class:zmq::dist_t	access:private
zmq::dist_t::more	.\src\dist.hpp	/^        bool more;$/;"	m	class:zmq::dist_t	access:private
zmq::dist_t::operator =	.\src\dist.hpp	/^        const dist_t &operator = (const dist_t&);$/;"	p	class:zmq::dist_t	access:private	signature:(const dist_t&)
zmq::dist_t::pipes	.\src\dist.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::dist_t	access:private
zmq::dist_t::pipes_t	.\src\dist.hpp	/^        typedef array_t <zmq::pipe_t, 2> pipes_t;$/;"	t	class:zmq::dist_t	access:private
zmq::dist_t::send_to_all	.\src\dist.cpp	/^int zmq::dist_t::send_to_all (msg_t *msg_, int flags_)$/;"	f	class:zmq::dist_t	signature:(msg_t *msg_, int flags_)
zmq::dist_t::send_to_all	.\src\dist.hpp	/^        int send_to_all (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::dist_t::send_to_matching	.\src\dist.cpp	/^int zmq::dist_t::send_to_matching (msg_t *msg_, int flags_)$/;"	f	class:zmq::dist_t	signature:(msg_t *msg_, int flags_)
zmq::dist_t::send_to_matching	.\src\dist.hpp	/^        int send_to_matching (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::dist_t::terminated	.\src\dist.cpp	/^void zmq::dist_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_)
zmq::dist_t::terminated	.\src\dist.hpp	/^        void terminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::dist_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::dist_t::unmatch	.\src\dist.cpp	/^void zmq::dist_t::unmatch ()$/;"	f	class:zmq::dist_t	signature:()
zmq::dist_t::unmatch	.\src\dist.hpp	/^        void unmatch ();$/;"	p	class:zmq::dist_t	access:public	signature:()
zmq::dist_t::write	.\src\dist.cpp	/^bool zmq::dist_t::write (pipe_t *pipe_, msg_t *msg_)$/;"	f	class:zmq::dist_t	signature:(pipe_t *pipe_, msg_t *msg_)
zmq::dist_t::write	.\src\dist.hpp	/^        bool write (zmq::pipe_t *pipe_, zmq::msg_t *msg_);$/;"	p	class:zmq::dist_t	access:private	signature:(zmq::pipe_t *pipe_, zmq::msg_t *msg_)
zmq::dist_t::~dist_t	.\src\dist.cpp	/^zmq::dist_t::~dist_t ()$/;"	f	class:zmq::dist_t	signature:()
zmq::dist_t::~dist_t	.\src\dist.hpp	/^        ~dist_t ();$/;"	p	class:zmq::dist_t	access:public	signature:()
zmq::enable_ipv4_mapping	.\src\ip.cpp	/^void zmq::enable_ipv4_mapping (fd_t s_)$/;"	f	class:zmq	signature:(fd_t s_)
zmq::enable_ipv4_mapping	.\src\ip.hpp	/^    void enable_ipv4_mapping (fd_t s_);$/;"	p	namespace:zmq	signature:(fd_t s_)
zmq::encoder_base_t	.\src\encoder.hpp	/^    template <typename T> class encoder_base_t : public i_encoder$/;"	c	namespace:zmq	inherits:i_encoder
zmq::encoder_base_t::beginning	.\src\encoder.hpp	/^        bool beginning;$/;"	m	class:zmq::encoder_base_t	access:private
zmq::encoder_base_t::buf	.\src\encoder.hpp	/^        unsigned char *buf;$/;"	m	class:zmq::encoder_base_t	access:private
zmq::encoder_base_t::bufsize	.\src\encoder.hpp	/^        size_t bufsize;$/;"	m	class:zmq::encoder_base_t	access:private
zmq::encoder_base_t::encoder_base_t	.\src\encoder.hpp	/^        encoder_base_t (const encoder_base_t&);$/;"	p	class:zmq::encoder_base_t	access:private	signature:(const encoder_base_t&)
zmq::encoder_base_t::encoder_base_t	.\src\encoder.hpp	/^        inline encoder_base_t (size_t bufsize_) :$/;"	f	class:zmq::encoder_base_t	access:public	signature:(size_t bufsize_)
zmq::encoder_base_t::get_data	.\src\encoder.hpp	/^        inline void get_data (unsigned char **data_, size_t *size_,$/;"	f	class:zmq::encoder_base_t	access:public	signature:(unsigned char **data_, size_t *size_, int *offset_ = NULL)
zmq::encoder_base_t::next	.\src\encoder.hpp	/^        step_t next;$/;"	m	class:zmq::encoder_base_t	access:private
zmq::encoder_base_t::next_step	.\src\encoder.hpp	/^        inline void next_step (void *write_pos_, size_t to_write_,$/;"	f	class:zmq::encoder_base_t	access:protected	signature:(void *write_pos_, size_t to_write_, step_t next_, bool beginning_)
zmq::encoder_base_t::operator =	.\src\encoder.hpp	/^        void operator = (const encoder_base_t&);$/;"	p	class:zmq::encoder_base_t	access:private	signature:(const encoder_base_t&)
zmq::encoder_base_t::step_t	.\src\encoder.hpp	/^        typedef bool (T::*step_t) ();$/;"	t	class:zmq::encoder_base_t	access:protected
zmq::encoder_base_t::to_write	.\src\encoder.hpp	/^        size_t to_write;$/;"	m	class:zmq::encoder_base_t	access:private
zmq::encoder_base_t::write_pos	.\src\encoder.hpp	/^        unsigned char *write_pos;$/;"	m	class:zmq::encoder_base_t	access:private
zmq::encoder_base_t::~encoder_base_t	.\src\encoder.hpp	/^        inline virtual ~encoder_base_t ()$/;"	f	class:zmq::encoder_base_t	access:public	signature:()
zmq::encoder_t	.\src\encoder.hpp	/^    class encoder_t : public encoder_base_t <encoder_t>$/;"	c	namespace:zmq	inherits:encoder_base_t
zmq::encoder_t::encoder_t	.\src\encoder.cpp	/^zmq::encoder_t::encoder_t (size_t bufsize_) :$/;"	f	class:zmq::encoder_t	signature:(size_t bufsize_)
zmq::encoder_t::encoder_t	.\src\encoder.hpp	/^        encoder_t (const encoder_t&);$/;"	p	class:zmq::encoder_t	access:private	signature:(const encoder_t&)
zmq::encoder_t::encoder_t	.\src\encoder.hpp	/^        encoder_t (size_t bufsize_);$/;"	p	class:zmq::encoder_t	access:public	signature:(size_t bufsize_)
zmq::encoder_t::in_progress	.\src\encoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::encoder_t	access:private
zmq::encoder_t::message_ready	.\src\encoder.cpp	/^bool zmq::encoder_t::message_ready ()$/;"	f	class:zmq::encoder_t	signature:()
zmq::encoder_t::message_ready	.\src\encoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::encoder_t	access:private	signature:()
zmq::encoder_t::msg_source	.\src\encoder.hpp	/^        i_msg_source *msg_source;$/;"	m	class:zmq::encoder_t	access:private
zmq::encoder_t::operator =	.\src\encoder.hpp	/^        const encoder_t &operator = (const encoder_t&);$/;"	p	class:zmq::encoder_t	access:private	signature:(const encoder_t&)
zmq::encoder_t::set_msg_source	.\src\encoder.cpp	/^void zmq::encoder_t::set_msg_source (i_msg_source *msg_source_)$/;"	f	class:zmq::encoder_t	signature:(i_msg_source *msg_source_)
zmq::encoder_t::set_msg_source	.\src\encoder.hpp	/^        void set_msg_source (i_msg_source *msg_source_);$/;"	p	class:zmq::encoder_t	access:public	signature:(i_msg_source *msg_source_)
zmq::encoder_t::size_ready	.\src\encoder.cpp	/^bool zmq::encoder_t::size_ready ()$/;"	f	class:zmq::encoder_t	signature:()
zmq::encoder_t::size_ready	.\src\encoder.hpp	/^        bool size_ready ();$/;"	p	class:zmq::encoder_t	access:private	signature:()
zmq::encoder_t::tmpbuf	.\src\encoder.hpp	/^        unsigned char tmpbuf [10];$/;"	m	class:zmq::encoder_t	access:private
zmq::encoder_t::~encoder_t	.\src\encoder.cpp	/^zmq::encoder_t::~encoder_t ()$/;"	f	class:zmq::encoder_t	signature:()
zmq::encoder_t::~encoder_t	.\src\encoder.hpp	/^        ~encoder_t ();$/;"	p	class:zmq::encoder_t	access:public	signature:()
zmq::endpoint_t	.\src\ctx.hpp	/^    struct endpoint_t$/;"	s	namespace:zmq
zmq::endpoint_t::options	.\src\ctx.hpp	/^        options_t options;$/;"	m	struct:zmq::endpoint_t	access:public
zmq::endpoint_t::socket	.\src\ctx.hpp	/^        socket_base_t *socket;$/;"	m	struct:zmq::endpoint_t	access:public
zmq::epoll_t	.\src\epoll.hpp	/^    class epoll_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
zmq::epoll_t::add_fd	.\src\epoll.cpp	/^zmq::epoll_t::handle_t zmq::epoll_t::add_fd (fd_t fd_, i_poll_events *events_)$/;"	f	class:zmq::epoll_t	signature:(fd_t fd_, i_poll_events *events_)
zmq::epoll_t::add_fd	.\src\epoll.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::epoll_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
zmq::epoll_t::epoll_fd	.\src\epoll.hpp	/^        fd_t epoll_fd;$/;"	m	class:zmq::epoll_t	access:private
zmq::epoll_t::epoll_t	.\src\epoll.cpp	/^zmq::epoll_t::epoll_t () :$/;"	f	class:zmq::epoll_t	signature:()
zmq::epoll_t::epoll_t	.\src\epoll.hpp	/^        epoll_t ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
zmq::epoll_t::epoll_t	.\src\epoll.hpp	/^        epoll_t (const epoll_t&);$/;"	p	class:zmq::epoll_t	access:private	signature:(const epoll_t&)
zmq::epoll_t::handle_t	.\src\epoll.hpp	/^        typedef void* handle_t;$/;"	t	class:zmq::epoll_t	access:public
zmq::epoll_t::loop	.\src\epoll.cpp	/^void zmq::epoll_t::loop ()$/;"	f	class:zmq::epoll_t	signature:()
zmq::epoll_t::loop	.\src\epoll.hpp	/^        void loop ();$/;"	p	class:zmq::epoll_t	access:private	signature:()
zmq::epoll_t::operator =	.\src\epoll.hpp	/^        const epoll_t &operator = (const epoll_t&);$/;"	p	class:zmq::epoll_t	access:private	signature:(const epoll_t&)
zmq::epoll_t::poll_entry_t	.\src\epoll.hpp	/^        struct poll_entry_t$/;"	s	class:zmq::epoll_t	access:private
zmq::epoll_t::poll_entry_t::ev	.\src\epoll.hpp	/^            epoll_event ev;$/;"	m	struct:zmq::epoll_t::poll_entry_t	access:public
zmq::epoll_t::poll_entry_t::events	.\src\epoll.hpp	/^            zmq::i_poll_events *events;$/;"	m	struct:zmq::epoll_t::poll_entry_t	access:public
zmq::epoll_t::poll_entry_t::fd	.\src\epoll.hpp	/^            fd_t fd;$/;"	m	struct:zmq::epoll_t::poll_entry_t	access:public
zmq::epoll_t::reset_pollin	.\src\epoll.cpp	/^void zmq::epoll_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
zmq::epoll_t::reset_pollin	.\src\epoll.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
zmq::epoll_t::reset_pollout	.\src\epoll.cpp	/^void zmq::epoll_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
zmq::epoll_t::reset_pollout	.\src\epoll.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
zmq::epoll_t::retired	.\src\epoll.hpp	/^        retired_t retired;$/;"	m	class:zmq::epoll_t	access:private
zmq::epoll_t::retired_t	.\src\epoll.hpp	/^        typedef std::vector <poll_entry_t*> retired_t;$/;"	t	class:zmq::epoll_t	access:private
zmq::epoll_t::rm_fd	.\src\epoll.cpp	/^void zmq::epoll_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
zmq::epoll_t::rm_fd	.\src\epoll.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
zmq::epoll_t::set_pollin	.\src\epoll.cpp	/^void zmq::epoll_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
zmq::epoll_t::set_pollin	.\src\epoll.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
zmq::epoll_t::set_pollout	.\src\epoll.cpp	/^void zmq::epoll_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::epoll_t	signature:(handle_t handle_)
zmq::epoll_t::set_pollout	.\src\epoll.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::epoll_t	access:public	signature:(handle_t handle_)
zmq::epoll_t::start	.\src\epoll.cpp	/^void zmq::epoll_t::start ()$/;"	f	class:zmq::epoll_t	signature:()
zmq::epoll_t::start	.\src\epoll.hpp	/^        void start ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
zmq::epoll_t::stop	.\src\epoll.cpp	/^void zmq::epoll_t::stop ()$/;"	f	class:zmq::epoll_t	signature:()
zmq::epoll_t::stop	.\src\epoll.hpp	/^        void stop ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
zmq::epoll_t::stopping	.\src\epoll.hpp	/^        bool stopping;$/;"	m	class:zmq::epoll_t	access:private
zmq::epoll_t::worker	.\src\epoll.hpp	/^        thread_t worker;$/;"	m	class:zmq::epoll_t	access:private
zmq::epoll_t::worker_routine	.\src\epoll.cpp	/^void zmq::epoll_t::worker_routine (void *arg_)$/;"	f	class:zmq::epoll_t	signature:(void *arg_)
zmq::epoll_t::worker_routine	.\src\epoll.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::epoll_t	access:private	signature:(void *arg_)
zmq::epoll_t::~epoll_t	.\src\epoll.cpp	/^zmq::epoll_t::~epoll_t ()$/;"	f	class:zmq::epoll_t	signature:()
zmq::epoll_t::~epoll_t	.\src\epoll.hpp	/^        ~epoll_t ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
zmq::errno_to_string	.\src\err.cpp	/^const char *zmq::errno_to_string (int errno_)$/;"	f	class:zmq	signature:(int errno_)
zmq::errno_to_string	.\src\err.hpp	/^    const char *errno_to_string (int errno_);$/;"	p	namespace:zmq	signature:(int errno_)
zmq::fd_t	.\src\fd.hpp	/^    typedef UINT_PTR fd_t;$/;"	t	namespace:zmq
zmq::fq_t	.\src\fq.hpp	/^    class fq_t$/;"	c	namespace:zmq
zmq::fq_t::activated	.\src\fq.cpp	/^void zmq::fq_t::activated (pipe_t *pipe_)$/;"	f	class:zmq::fq_t	signature:(pipe_t *pipe_)
zmq::fq_t::activated	.\src\fq.hpp	/^        void activated (pipe_t *pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(pipe_t *pipe_)
zmq::fq_t::active	.\src\fq.hpp	/^        pipes_t::size_type active;$/;"	m	class:zmq::fq_t	access:private
zmq::fq_t::attach	.\src\fq.cpp	/^void zmq::fq_t::attach (pipe_t *pipe_)$/;"	f	class:zmq::fq_t	signature:(pipe_t *pipe_)
zmq::fq_t::attach	.\src\fq.hpp	/^        void attach (pipe_t *pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(pipe_t *pipe_)
zmq::fq_t::current	.\src\fq.hpp	/^        pipes_t::size_type current;$/;"	m	class:zmq::fq_t	access:private
zmq::fq_t::fq_t	.\src\fq.cpp	/^zmq::fq_t::fq_t () :$/;"	f	class:zmq::fq_t	signature:()
zmq::fq_t::fq_t	.\src\fq.hpp	/^        fq_t ();$/;"	p	class:zmq::fq_t	access:public	signature:()
zmq::fq_t::fq_t	.\src\fq.hpp	/^        fq_t (const fq_t&);$/;"	p	class:zmq::fq_t	access:private	signature:(const fq_t&)
zmq::fq_t::has_in	.\src\fq.cpp	/^bool zmq::fq_t::has_in ()$/;"	f	class:zmq::fq_t	signature:()
zmq::fq_t::has_in	.\src\fq.hpp	/^        bool has_in ();$/;"	p	class:zmq::fq_t	access:public	signature:()
zmq::fq_t::more	.\src\fq.hpp	/^        bool more;$/;"	m	class:zmq::fq_t	access:private
zmq::fq_t::operator =	.\src\fq.hpp	/^        const fq_t &operator = (const fq_t&);$/;"	p	class:zmq::fq_t	access:private	signature:(const fq_t&)
zmq::fq_t::pipes	.\src\fq.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::fq_t	access:private
zmq::fq_t::pipes_t	.\src\fq.hpp	/^        typedef array_t <pipe_t, 1> pipes_t;$/;"	t	class:zmq::fq_t	access:private
zmq::fq_t::recv	.\src\fq.cpp	/^int zmq::fq_t::recv (msg_t *msg_)$/;"	f	class:zmq::fq_t	signature:(msg_t *msg_)
zmq::fq_t::recv	.\src\fq.hpp	/^        int recv (msg_t *msg_);$/;"	p	class:zmq::fq_t	access:public	signature:(msg_t *msg_)
zmq::fq_t::recvpipe	.\src\fq.cpp	/^int zmq::fq_t::recvpipe (msg_t *msg_, pipe_t **pipe_)$/;"	f	class:zmq::fq_t	signature:(msg_t *msg_, pipe_t **pipe_)
zmq::fq_t::recvpipe	.\src\fq.hpp	/^        int recvpipe (msg_t *msg_, pipe_t **pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(msg_t *msg_, pipe_t **pipe_)
zmq::fq_t::terminated	.\src\fq.cpp	/^void zmq::fq_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::fq_t	signature:(pipe_t *pipe_)
zmq::fq_t::terminated	.\src\fq.hpp	/^        void terminated (pipe_t *pipe_);$/;"	p	class:zmq::fq_t	access:public	signature:(pipe_t *pipe_)
zmq::fq_t::~fq_t	.\src\fq.cpp	/^zmq::fq_t::~fq_t ()$/;"	f	class:zmq::fq_t	signature:()
zmq::fq_t::~fq_t	.\src\fq.hpp	/^        ~fq_t ();$/;"	p	class:zmq::fq_t	access:public	signature:()
zmq::generate_random	.\src\random.cpp	/^uint32_t zmq::generate_random ()$/;"	f	class:zmq	signature:()
zmq::generate_random	.\src\random.hpp	/^    uint32_t generate_random ();$/;"	p	namespace:zmq	signature:()
zmq::get_uint16	.\src\wire.hpp	/^    inline uint16_t get_uint16 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
zmq::get_uint32	.\src\wire.hpp	/^    inline uint32_t get_uint32 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
zmq::get_uint64	.\src\wire.hpp	/^    inline uint64_t get_uint64 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
zmq::get_uint8	.\src\wire.hpp	/^    inline uint8_t get_uint8 (unsigned char *buffer_)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_)
zmq::i_decoder	.\src\i_decoder.hpp	/^    struct i_decoder$/;"	s	namespace:zmq
zmq::i_decoder::get_buffer	.\src\i_decoder.hpp	/^        virtual void get_buffer (unsigned char **data_, size_t *size_) = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:(unsigned char **data_, size_t *size_)
zmq::i_decoder::process_buffer	.\src\i_decoder.hpp	/^        virtual size_t process_buffer (unsigned char *data_, size_t size_) = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:(unsigned char *data_, size_t size_)
zmq::i_decoder::set_msg_sink	.\src\i_decoder.hpp	/^        virtual void set_msg_sink (i_msg_sink *msg_sink_) = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:(i_msg_sink *msg_sink_)
zmq::i_decoder::stalled	.\src\i_decoder.hpp	/^        virtual bool stalled () = 0;$/;"	p	struct:zmq::i_decoder	access:public	signature:()
zmq::i_decoder::~i_decoder	.\src\i_decoder.hpp	/^        virtual ~i_decoder () {}$/;"	f	struct:zmq::i_decoder	access:public	signature:()
zmq::i_encoder	.\src\i_encoder.hpp	/^    struct i_encoder$/;"	s	namespace:zmq
zmq::i_encoder::get_data	.\src\i_encoder.hpp	/^        virtual void get_data (unsigned char **data_, size_t *size_,$/;"	p	struct:zmq::i_encoder	access:public	signature:(unsigned char **data_, size_t *size_, int *offset_ = NULL)
zmq::i_encoder::set_msg_source	.\src\i_encoder.hpp	/^        virtual void set_msg_source (i_msg_source *msg_source_) = 0;$/;"	p	struct:zmq::i_encoder	access:public	signature:(i_msg_source *msg_source_)
zmq::i_encoder::~i_encoder	.\src\i_encoder.hpp	/^        virtual ~i_encoder () {}$/;"	f	struct:zmq::i_encoder	access:public	signature:()
zmq::i_engine	.\src\i_engine.hpp	/^    struct i_engine$/;"	s	namespace:zmq
zmq::i_engine::activate_in	.\src\i_engine.hpp	/^        virtual void activate_in () = 0;$/;"	p	struct:zmq::i_engine	access:public	signature:()
zmq::i_engine::activate_out	.\src\i_engine.hpp	/^        virtual void activate_out () = 0;$/;"	p	struct:zmq::i_engine	access:public	signature:()
zmq::i_engine::plug	.\src\i_engine.hpp	/^        virtual void plug (zmq::io_thread_t *io_thread_,$/;"	p	struct:zmq::i_engine	access:public	signature:(zmq::io_thread_t *io_thread_, class session_base_t *session_)
zmq::i_engine::terminate	.\src\i_engine.hpp	/^        virtual void terminate () = 0;$/;"	p	struct:zmq::i_engine	access:public	signature:()
zmq::i_engine::~i_engine	.\src\i_engine.hpp	/^        virtual ~i_engine () {}$/;"	f	struct:zmq::i_engine	access:public	signature:()
zmq::i_msg_sink	.\src\i_msg_sink.hpp	/^    struct i_msg_sink$/;"	s	namespace:zmq
zmq::i_msg_sink::push_msg	.\src\i_msg_sink.hpp	/^        virtual int push_msg (msg_t *msg_) = 0;$/;"	p	struct:zmq::i_msg_sink	access:public	signature:(msg_t *msg_)
zmq::i_msg_sink::~i_msg_sink	.\src\i_msg_sink.hpp	/^        virtual ~i_msg_sink () {}$/;"	f	struct:zmq::i_msg_sink	access:public	signature:()
zmq::i_msg_source	.\src\i_msg_source.hpp	/^    struct i_msg_source$/;"	s	namespace:zmq
zmq::i_msg_source::pull_msg	.\src\i_msg_source.hpp	/^        virtual int pull_msg (msg_t *msg_) = 0;$/;"	p	struct:zmq::i_msg_source	access:public	signature:(msg_t *msg_)
zmq::i_msg_source::~i_msg_source	.\src\i_msg_source.hpp	/^        virtual ~i_msg_source () {}$/;"	f	struct:zmq::i_msg_source	access:public	signature:()
zmq::i_pipe_events	.\src\pipe.hpp	/^    struct i_pipe_events$/;"	s	namespace:zmq
zmq::i_pipe_events::hiccuped	.\src\pipe.hpp	/^        virtual void hiccuped (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
zmq::i_pipe_events::read_activated	.\src\pipe.hpp	/^        virtual void read_activated (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
zmq::i_pipe_events::terminated	.\src\pipe.hpp	/^        virtual void terminated (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
zmq::i_pipe_events::write_activated	.\src\pipe.hpp	/^        virtual void write_activated (zmq::pipe_t *pipe_) = 0;$/;"	p	struct:zmq::i_pipe_events	access:public	signature:(zmq::pipe_t *pipe_)
zmq::i_pipe_events::~i_pipe_events	.\src\pipe.hpp	/^        virtual ~i_pipe_events () {}$/;"	f	struct:zmq::i_pipe_events	access:public	signature:()
zmq::i_poll_events	.\src\i_poll_events.hpp	/^    struct i_poll_events$/;"	s	namespace:zmq
zmq::i_poll_events::in_event	.\src\i_poll_events.hpp	/^        virtual void in_event () = 0;$/;"	p	struct:zmq::i_poll_events	access:public	signature:()
zmq::i_poll_events::out_event	.\src\i_poll_events.hpp	/^        virtual void out_event () = 0;$/;"	p	struct:zmq::i_poll_events	access:public	signature:()
zmq::i_poll_events::timer_event	.\src\i_poll_events.hpp	/^        virtual void timer_event (int id_) = 0;$/;"	p	struct:zmq::i_poll_events	access:public	signature:(int id_)
zmq::i_poll_events::~i_poll_events	.\src\i_poll_events.hpp	/^        virtual ~i_poll_events () {}$/;"	f	struct:zmq::i_poll_events	access:public	signature:()
zmq::in_batch_size	.\src\config.hpp	/^        in_batch_size = 8192,$/;"	e	enum:zmq::__anon32
zmq::inbound_poll_rate	.\src\config.hpp	/^        inbound_poll_rate = 100,$/;"	e	enum:zmq::__anon32
zmq::io_object_t	.\src\io_object.hpp	/^    class io_object_t : public i_poll_events$/;"	c	namespace:zmq	inherits:i_poll_events
zmq::io_object_t::add_fd	.\src\io_object.cpp	/^zmq::io_object_t::handle_t zmq::io_object_t::add_fd (fd_t fd_)$/;"	f	class:zmq::io_object_t	signature:(fd_t fd_)
zmq::io_object_t::add_fd	.\src\io_object.hpp	/^        handle_t add_fd (fd_t fd_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(fd_t fd_)
zmq::io_object_t::add_timer	.\src\io_object.cpp	/^void zmq::io_object_t::add_timer (int timeout_, int id_)$/;"	f	class:zmq::io_object_t	signature:(int timeout_, int id_)
zmq::io_object_t::add_timer	.\src\io_object.hpp	/^        void add_timer (int timout_, int id_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(int timout_, int id_)
zmq::io_object_t::cancel_timer	.\src\io_object.cpp	/^void zmq::io_object_t::cancel_timer (int id_)$/;"	f	class:zmq::io_object_t	signature:(int id_)
zmq::io_object_t::cancel_timer	.\src\io_object.hpp	/^        void cancel_timer (int id_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(int id_)
zmq::io_object_t::handle_t	.\src\io_object.hpp	/^        typedef poller_t::handle_t handle_t;$/;"	t	class:zmq::io_object_t	access:protected
zmq::io_object_t::in_event	.\src\io_object.cpp	/^void zmq::io_object_t::in_event ()$/;"	f	class:zmq::io_object_t	signature:()
zmq::io_object_t::in_event	.\src\io_object.hpp	/^        void in_event ();$/;"	p	class:zmq::io_object_t	access:protected	signature:()
zmq::io_object_t::io_object_t	.\src\io_object.cpp	/^zmq::io_object_t::io_object_t (io_thread_t *io_thread_) :$/;"	f	class:zmq::io_object_t	signature:(io_thread_t *io_thread_)
zmq::io_object_t::io_object_t	.\src\io_object.hpp	/^        io_object_t (const io_object_t&);$/;"	p	class:zmq::io_object_t	access:private	signature:(const io_object_t&)
zmq::io_object_t::io_object_t	.\src\io_object.hpp	/^        io_object_t (zmq::io_thread_t *io_thread_ = NULL);$/;"	p	class:zmq::io_object_t	access:public	signature:(zmq::io_thread_t *io_thread_ = NULL)
zmq::io_object_t::operator =	.\src\io_object.hpp	/^        const io_object_t &operator = (const io_object_t&);$/;"	p	class:zmq::io_object_t	access:private	signature:(const io_object_t&)
zmq::io_object_t::out_event	.\src\io_object.cpp	/^void zmq::io_object_t::out_event ()$/;"	f	class:zmq::io_object_t	signature:()
zmq::io_object_t::out_event	.\src\io_object.hpp	/^        void out_event ();$/;"	p	class:zmq::io_object_t	access:protected	signature:()
zmq::io_object_t::plug	.\src\io_object.cpp	/^void zmq::io_object_t::plug (io_thread_t *io_thread_)$/;"	f	class:zmq::io_object_t	signature:(io_thread_t *io_thread_)
zmq::io_object_t::plug	.\src\io_object.hpp	/^        void plug (zmq::io_thread_t *io_thread_);$/;"	p	class:zmq::io_object_t	access:public	signature:(zmq::io_thread_t *io_thread_)
zmq::io_object_t::poller	.\src\io_object.hpp	/^        poller_t *poller;$/;"	m	class:zmq::io_object_t	access:private
zmq::io_object_t::reset_pollin	.\src\io_object.cpp	/^void zmq::io_object_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
zmq::io_object_t::reset_pollin	.\src\io_object.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
zmq::io_object_t::reset_pollout	.\src\io_object.cpp	/^void zmq::io_object_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
zmq::io_object_t::reset_pollout	.\src\io_object.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
zmq::io_object_t::rm_fd	.\src\io_object.cpp	/^void zmq::io_object_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
zmq::io_object_t::rm_fd	.\src\io_object.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
zmq::io_object_t::set_pollin	.\src\io_object.cpp	/^void zmq::io_object_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
zmq::io_object_t::set_pollin	.\src\io_object.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
zmq::io_object_t::set_pollout	.\src\io_object.cpp	/^void zmq::io_object_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::io_object_t	signature:(handle_t handle_)
zmq::io_object_t::set_pollout	.\src\io_object.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(handle_t handle_)
zmq::io_object_t::timer_event	.\src\io_object.cpp	/^void zmq::io_object_t::timer_event (int)$/;"	f	class:zmq::io_object_t	signature:(int)
zmq::io_object_t::timer_event	.\src\io_object.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::io_object_t	access:protected	signature:(int id_)
zmq::io_object_t::unplug	.\src\io_object.cpp	/^void zmq::io_object_t::unplug ()$/;"	f	class:zmq::io_object_t	signature:()
zmq::io_object_t::unplug	.\src\io_object.hpp	/^        void unplug ();$/;"	p	class:zmq::io_object_t	access:public	signature:()
zmq::io_object_t::~io_object_t	.\src\io_object.cpp	/^zmq::io_object_t::~io_object_t ()$/;"	f	class:zmq::io_object_t	signature:()
zmq::io_object_t::~io_object_t	.\src\io_object.hpp	/^        ~io_object_t ();$/;"	p	class:zmq::io_object_t	access:public	signature:()
zmq::io_thread_t	.\src\io_thread.hpp	/^    class io_thread_t : public object_t, public i_poll_events$/;"	c	namespace:zmq	inherits:object_t,i_poll_events
zmq::io_thread_t::get_load	.\src\io_thread.cpp	/^int zmq::io_thread_t::get_load ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::get_load	.\src\io_thread.hpp	/^        int get_load ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::get_mailbox	.\src\io_thread.cpp	/^zmq::mailbox_t *zmq::io_thread_t::get_mailbox ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::get_mailbox	.\src\io_thread.hpp	/^        mailbox_t *get_mailbox ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::get_poller	.\src\io_thread.cpp	/^zmq::poller_t *zmq::io_thread_t::get_poller ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::get_poller	.\src\io_thread.hpp	/^        poller_t *get_poller ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::in_event	.\src\io_thread.cpp	/^void zmq::io_thread_t::in_event ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::in_event	.\src\io_thread.hpp	/^        void in_event ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::io_thread_t	.\src\io_thread.cpp	/^zmq::io_thread_t::io_thread_t (ctx_t *ctx_, uint32_t tid_) :$/;"	f	class:zmq::io_thread_t	signature:(ctx_t *ctx_, uint32_t tid_)
zmq::io_thread_t::io_thread_t	.\src\io_thread.hpp	/^        io_thread_t (const io_thread_t&);$/;"	p	class:zmq::io_thread_t	access:private	signature:(const io_thread_t&)
zmq::io_thread_t::io_thread_t	.\src\io_thread.hpp	/^        io_thread_t (zmq::ctx_t *ctx_, uint32_t tid_);$/;"	p	class:zmq::io_thread_t	access:public	signature:(zmq::ctx_t *ctx_, uint32_t tid_)
zmq::io_thread_t::mailbox	.\src\io_thread.hpp	/^        mailbox_t mailbox;$/;"	m	class:zmq::io_thread_t	access:private
zmq::io_thread_t::mailbox_handle	.\src\io_thread.hpp	/^        poller_t::handle_t mailbox_handle;$/;"	m	class:zmq::io_thread_t	access:private
zmq::io_thread_t::operator =	.\src\io_thread.hpp	/^        const io_thread_t &operator = (const io_thread_t&);$/;"	p	class:zmq::io_thread_t	access:private	signature:(const io_thread_t&)
zmq::io_thread_t::out_event	.\src\io_thread.cpp	/^void zmq::io_thread_t::out_event ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::out_event	.\src\io_thread.hpp	/^        void out_event ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::poller	.\src\io_thread.hpp	/^        poller_t *poller;$/;"	m	class:zmq::io_thread_t	access:private
zmq::io_thread_t::process_stop	.\src\io_thread.cpp	/^void zmq::io_thread_t::process_stop ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::process_stop	.\src\io_thread.hpp	/^        void process_stop ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::start	.\src\io_thread.cpp	/^void zmq::io_thread_t::start ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::start	.\src\io_thread.hpp	/^        void start ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::stop	.\src\io_thread.cpp	/^void zmq::io_thread_t::stop ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::stop	.\src\io_thread.hpp	/^        void stop ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::io_thread_t::timer_event	.\src\io_thread.cpp	/^void zmq::io_thread_t::timer_event (int)$/;"	f	class:zmq::io_thread_t	signature:(int)
zmq::io_thread_t::timer_event	.\src\io_thread.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::io_thread_t	access:public	signature:(int id_)
zmq::io_thread_t::~io_thread_t	.\src\io_thread.cpp	/^zmq::io_thread_t::~io_thread_t ()$/;"	f	class:zmq::io_thread_t	signature:()
zmq::io_thread_t::~io_thread_t	.\src\io_thread.hpp	/^        ~io_thread_t ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
zmq::ipc_address_t	.\src\ipc_address.hpp	/^    class ipc_address_t$/;"	c	namespace:zmq
zmq::ipc_address_t::addr	.\src\ipc_address.cpp	/^const sockaddr *zmq::ipc_address_t::addr () const$/;"	f	class:zmq::ipc_address_t	signature:() const
zmq::ipc_address_t::addr	.\src\ipc_address.hpp	/^        const sockaddr *addr () const;$/;"	p	class:zmq::ipc_address_t	access:public	signature:() const
zmq::ipc_address_t::address	.\src\ipc_address.hpp	/^        struct sockaddr_un address;$/;"	m	class:zmq::ipc_address_t	typeref:struct:zmq::ipc_address_t::sockaddr_un	access:private
zmq::ipc_address_t::addrlen	.\src\ipc_address.cpp	/^socklen_t zmq::ipc_address_t::addrlen () const$/;"	f	class:zmq::ipc_address_t	signature:() const
zmq::ipc_address_t::addrlen	.\src\ipc_address.hpp	/^        socklen_t addrlen () const;$/;"	p	class:zmq::ipc_address_t	access:public	signature:() const
zmq::ipc_address_t::ipc_address_t	.\src\ipc_address.cpp	/^zmq::ipc_address_t::ipc_address_t ()$/;"	f	class:zmq::ipc_address_t	signature:()
zmq::ipc_address_t::ipc_address_t	.\src\ipc_address.cpp	/^zmq::ipc_address_t::ipc_address_t (const sockaddr *sa, socklen_t sa_len)$/;"	f	class:zmq::ipc_address_t	signature:(const sockaddr *sa, socklen_t sa_len)
zmq::ipc_address_t::ipc_address_t	.\src\ipc_address.hpp	/^        ipc_address_t ();$/;"	p	class:zmq::ipc_address_t	access:public	signature:()
zmq::ipc_address_t::ipc_address_t	.\src\ipc_address.hpp	/^        ipc_address_t (const ipc_address_t&);$/;"	p	class:zmq::ipc_address_t	access:private	signature:(const ipc_address_t&)
zmq::ipc_address_t::ipc_address_t	.\src\ipc_address.hpp	/^        ipc_address_t (const sockaddr *sa, socklen_t sa_len);$/;"	p	class:zmq::ipc_address_t	access:public	signature:(const sockaddr *sa, socklen_t sa_len)
zmq::ipc_address_t::operator =	.\src\ipc_address.hpp	/^        const ipc_address_t &operator = (const ipc_address_t&);$/;"	p	class:zmq::ipc_address_t	access:private	signature:(const ipc_address_t&)
zmq::ipc_address_t::resolve	.\src\ipc_address.cpp	/^int zmq::ipc_address_t::resolve (const char *path_)$/;"	f	class:zmq::ipc_address_t	signature:(const char *path_)
zmq::ipc_address_t::resolve	.\src\ipc_address.hpp	/^        int resolve (const char* path_);$/;"	p	class:zmq::ipc_address_t	access:public	signature:(const char* path_)
zmq::ipc_address_t::to_string	.\src\ipc_address.cpp	/^int zmq::ipc_address_t::to_string (std::string &addr_)$/;"	f	class:zmq::ipc_address_t	signature:(std::string &addr_)
zmq::ipc_address_t::to_string	.\src\ipc_address.hpp	/^        int to_string (std::string &addr_);$/;"	p	class:zmq::ipc_address_t	access:public	signature:(std::string &addr_)
zmq::ipc_address_t::~ipc_address_t	.\src\ipc_address.cpp	/^zmq::ipc_address_t::~ipc_address_t ()$/;"	f	class:zmq::ipc_address_t	signature:()
zmq::ipc_address_t::~ipc_address_t	.\src\ipc_address.hpp	/^        ~ipc_address_t ();$/;"	p	class:zmq::ipc_address_t	access:public	signature:()
zmq::ipc_connecter_t	.\src\ipc_connecter.hpp	/^    class ipc_connecter_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
zmq::ipc_connecter_t::add_reconnect_timer	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::add_reconnect_timer()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::add_reconnect_timer	.\src\ipc_connecter.hpp	/^        void add_reconnect_timer();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::addr	.\src\ipc_connecter.hpp	/^        const address_t *addr;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::close	.\src\ipc_connecter.cpp	/^int zmq::ipc_connecter_t::close ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::close	.\src\ipc_connecter.hpp	/^        int close ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::connect	.\src\ipc_connecter.cpp	/^zmq::fd_t zmq::ipc_connecter_t::connect ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::connect	.\src\ipc_connecter.hpp	/^        fd_t connect ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::current_reconnect_ivl	.\src\ipc_connecter.hpp	/^        int current_reconnect_ivl;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::delayed_start	.\src\ipc_connecter.hpp	/^        const bool delayed_start;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::endpoint	.\src\ipc_connecter.hpp	/^        std::string endpoint;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::get_new_reconnect_ivl	.\src\ipc_connecter.cpp	/^int zmq::ipc_connecter_t::get_new_reconnect_ivl ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::get_new_reconnect_ivl	.\src\ipc_connecter.hpp	/^        int get_new_reconnect_ivl ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::handle	.\src\ipc_connecter.hpp	/^        handle_t handle;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::handle_valid	.\src\ipc_connecter.hpp	/^        bool handle_valid;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::in_event	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::in_event ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::in_event	.\src\ipc_connecter.hpp	/^        void in_event ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::ipc_connecter_t	.\src\ipc_connecter.cpp	/^zmq::ipc_connecter_t::ipc_connecter_t (class io_thread_t *io_thread_,$/;"	f	class:zmq::ipc_connecter_t	signature:(class io_thread_t *io_thread_, class session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
zmq::ipc_connecter_t::ipc_connecter_t	.\src\ipc_connecter.hpp	/^        ipc_connecter_t (const ipc_connecter_t&);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(const ipc_connecter_t&)
zmq::ipc_connecter_t::ipc_connecter_t	.\src\ipc_connecter.hpp	/^        ipc_connecter_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::ipc_connecter_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
zmq::ipc_connecter_t::open	.\src\ipc_connecter.cpp	/^int zmq::ipc_connecter_t::open ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::open	.\src\ipc_connecter.hpp	/^        int open ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::operator =	.\src\ipc_connecter.hpp	/^        const ipc_connecter_t &operator = (const ipc_connecter_t&);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(const ipc_connecter_t&)
zmq::ipc_connecter_t::out_event	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::out_event ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::out_event	.\src\ipc_connecter.hpp	/^        void out_event ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::process_plug	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::process_plug ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::process_plug	.\src\ipc_connecter.hpp	/^        void process_plug ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::process_term	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::process_term (int linger_)$/;"	f	class:zmq::ipc_connecter_t	signature:(int linger_)
zmq::ipc_connecter_t::process_term	.\src\ipc_connecter.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(int linger_)
zmq::ipc_connecter_t::reconnect_timer_id	.\src\ipc_connecter.hpp	/^        enum {reconnect_timer_id = 1};$/;"	e	enum:zmq::ipc_connecter_t::__anon35
zmq::ipc_connecter_t::s	.\src\ipc_connecter.hpp	/^        fd_t s;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::session	.\src\ipc_connecter.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::socket	.\src\ipc_connecter.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::start_connecting	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::start_connecting ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::start_connecting	.\src\ipc_connecter.hpp	/^        void start_connecting ();$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:()
zmq::ipc_connecter_t::timer_event	.\src\ipc_connecter.cpp	/^void zmq::ipc_connecter_t::timer_event (int id_)$/;"	f	class:zmq::ipc_connecter_t	signature:(int id_)
zmq::ipc_connecter_t::timer_event	.\src\ipc_connecter.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::ipc_connecter_t	access:private	signature:(int id_)
zmq::ipc_connecter_t::timer_started	.\src\ipc_connecter.hpp	/^        bool timer_started;$/;"	m	class:zmq::ipc_connecter_t	access:private
zmq::ipc_connecter_t::~ipc_connecter_t	.\src\ipc_connecter.cpp	/^zmq::ipc_connecter_t::~ipc_connecter_t ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
zmq::ipc_connecter_t::~ipc_connecter_t	.\src\ipc_connecter.hpp	/^        ~ipc_connecter_t ();$/;"	p	class:zmq::ipc_connecter_t	access:public	signature:()
zmq::ipc_listener_t	.\src\ipc_listener.hpp	/^    class ipc_listener_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
zmq::ipc_listener_t::accept	.\src\ipc_listener.cpp	/^zmq::fd_t zmq::ipc_listener_t::accept ()$/;"	f	class:zmq::ipc_listener_t	signature:()
zmq::ipc_listener_t::accept	.\src\ipc_listener.hpp	/^        fd_t accept ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
zmq::ipc_listener_t::close	.\src\ipc_listener.cpp	/^int zmq::ipc_listener_t::close ()$/;"	f	class:zmq::ipc_listener_t	signature:()
zmq::ipc_listener_t::close	.\src\ipc_listener.hpp	/^        int close ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
zmq::ipc_listener_t::endpoint	.\src\ipc_listener.hpp	/^        std::string endpoint;$/;"	m	class:zmq::ipc_listener_t	access:private
zmq::ipc_listener_t::filename	.\src\ipc_listener.hpp	/^        std::string filename;$/;"	m	class:zmq::ipc_listener_t	access:private
zmq::ipc_listener_t::get_address	.\src\ipc_listener.cpp	/^int zmq::ipc_listener_t::get_address (std::string &addr_)$/;"	f	class:zmq::ipc_listener_t	signature:(std::string &addr_)
zmq::ipc_listener_t::get_address	.\src\ipc_listener.hpp	/^        int get_address (std::string &addr_);$/;"	p	class:zmq::ipc_listener_t	access:public	signature:(std::string &addr_)
zmq::ipc_listener_t::handle	.\src\ipc_listener.hpp	/^        handle_t handle;$/;"	m	class:zmq::ipc_listener_t	access:private
zmq::ipc_listener_t::has_file	.\src\ipc_listener.hpp	/^        bool has_file;$/;"	m	class:zmq::ipc_listener_t	access:private
zmq::ipc_listener_t::in_event	.\src\ipc_listener.cpp	/^void zmq::ipc_listener_t::in_event ()$/;"	f	class:zmq::ipc_listener_t	signature:()
zmq::ipc_listener_t::in_event	.\src\ipc_listener.hpp	/^        void in_event ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
zmq::ipc_listener_t::ipc_listener_t	.\src\ipc_listener.cpp	/^zmq::ipc_listener_t::ipc_listener_t (io_thread_t *io_thread_,$/;"	f	class:zmq::ipc_listener_t	signature:(io_thread_t *io_thread_, socket_base_t *socket_, const options_t &options_)
zmq::ipc_listener_t::ipc_listener_t	.\src\ipc_listener.hpp	/^        ipc_listener_t (const ipc_listener_t&);$/;"	p	class:zmq::ipc_listener_t	access:private	signature:(const ipc_listener_t&)
zmq::ipc_listener_t::ipc_listener_t	.\src\ipc_listener.hpp	/^        ipc_listener_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::ipc_listener_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::socket_base_t *socket_, const options_t &options_)
zmq::ipc_listener_t::operator =	.\src\ipc_listener.hpp	/^        const ipc_listener_t &operator = (const ipc_listener_t&);$/;"	p	class:zmq::ipc_listener_t	access:private	signature:(const ipc_listener_t&)
zmq::ipc_listener_t::process_plug	.\src\ipc_listener.cpp	/^void zmq::ipc_listener_t::process_plug ()$/;"	f	class:zmq::ipc_listener_t	signature:()
zmq::ipc_listener_t::process_plug	.\src\ipc_listener.hpp	/^        void process_plug ();$/;"	p	class:zmq::ipc_listener_t	access:private	signature:()
zmq::ipc_listener_t::process_term	.\src\ipc_listener.cpp	/^void zmq::ipc_listener_t::process_term (int linger_)$/;"	f	class:zmq::ipc_listener_t	signature:(int linger_)
zmq::ipc_listener_t::process_term	.\src\ipc_listener.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::ipc_listener_t	access:private	signature:(int linger_)
zmq::ipc_listener_t::s	.\src\ipc_listener.hpp	/^        fd_t s;$/;"	m	class:zmq::ipc_listener_t	access:private
zmq::ipc_listener_t::set_address	.\src\ipc_listener.cpp	/^int zmq::ipc_listener_t::set_address (const char *addr_)$/;"	f	class:zmq::ipc_listener_t	signature:(const char *addr_)
zmq::ipc_listener_t::set_address	.\src\ipc_listener.hpp	/^        int set_address (const char *addr_);$/;"	p	class:zmq::ipc_listener_t	access:public	signature:(const char *addr_)
zmq::ipc_listener_t::socket	.\src\ipc_listener.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::ipc_listener_t	access:private
zmq::ipc_listener_t::~ipc_listener_t	.\src\ipc_listener.cpp	/^zmq::ipc_listener_t::~ipc_listener_t ()$/;"	f	class:zmq::ipc_listener_t	signature:()
zmq::ipc_listener_t::~ipc_listener_t	.\src\ipc_listener.hpp	/^        ~ipc_listener_t ();$/;"	p	class:zmq::ipc_listener_t	access:public	signature:()
zmq::kqueue_t	.\src\kqueue.hpp	/^    class kqueue_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
zmq::kqueue_t::add_fd	.\src\kqueue.cpp	/^zmq::kqueue_t::handle_t zmq::kqueue_t::add_fd (fd_t fd_,$/;"	f	class:zmq::kqueue_t	signature:(fd_t fd_, i_poll_events *reactor_)
zmq::kqueue_t::add_fd	.\src\kqueue.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
zmq::kqueue_t::handle_t	.\src\kqueue.hpp	/^        typedef void* handle_t;$/;"	t	class:zmq::kqueue_t	access:public
zmq::kqueue_t::kevent_add	.\src\kqueue.cpp	/^void zmq::kqueue_t::kevent_add (fd_t fd_, short filter_, void *udata_)$/;"	f	class:zmq::kqueue_t	signature:(fd_t fd_, short filter_, void *udata_)
zmq::kqueue_t::kevent_add	.\src\kqueue.hpp	/^        void kevent_add (fd_t fd_, short filter_, void *udata_);$/;"	p	class:zmq::kqueue_t	access:private	signature:(fd_t fd_, short filter_, void *udata_)
zmq::kqueue_t::kevent_delete	.\src\kqueue.cpp	/^void zmq::kqueue_t::kevent_delete (fd_t fd_, short filter_)$/;"	f	class:zmq::kqueue_t	signature:(fd_t fd_, short filter_)
zmq::kqueue_t::kevent_delete	.\src\kqueue.hpp	/^        void kevent_delete (fd_t fd_, short filter_);$/;"	p	class:zmq::kqueue_t	access:private	signature:(fd_t fd_, short filter_)
zmq::kqueue_t::kqueue_fd	.\src\kqueue.hpp	/^        fd_t kqueue_fd;$/;"	m	class:zmq::kqueue_t	access:private
zmq::kqueue_t::kqueue_t	.\src\kqueue.cpp	/^zmq::kqueue_t::kqueue_t () :$/;"	f	class:zmq::kqueue_t	signature:()
zmq::kqueue_t::kqueue_t	.\src\kqueue.hpp	/^        kqueue_t ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
zmq::kqueue_t::kqueue_t	.\src\kqueue.hpp	/^        kqueue_t (const kqueue_t&);$/;"	p	class:zmq::kqueue_t	access:private	signature:(const kqueue_t&)
zmq::kqueue_t::loop	.\src\kqueue.cpp	/^void zmq::kqueue_t::loop ()$/;"	f	class:zmq::kqueue_t	signature:()
zmq::kqueue_t::loop	.\src\kqueue.hpp	/^        void loop ();$/;"	p	class:zmq::kqueue_t	access:private	signature:()
zmq::kqueue_t::operator =	.\src\kqueue.hpp	/^        const kqueue_t &operator = (const kqueue_t&);$/;"	p	class:zmq::kqueue_t	access:private	signature:(const kqueue_t&)
zmq::kqueue_t::poll_entry_t	.\src\kqueue.hpp	/^        struct poll_entry_t$/;"	s	class:zmq::kqueue_t	access:private
zmq::kqueue_t::poll_entry_t::fd	.\src\kqueue.hpp	/^            fd_t fd;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
zmq::kqueue_t::poll_entry_t::flag_pollin	.\src\kqueue.hpp	/^            bool flag_pollin;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
zmq::kqueue_t::poll_entry_t::flag_pollout	.\src\kqueue.hpp	/^            bool flag_pollout;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
zmq::kqueue_t::poll_entry_t::reactor	.\src\kqueue.hpp	/^            zmq::i_poll_events *reactor;$/;"	m	struct:zmq::kqueue_t::poll_entry_t	access:public
zmq::kqueue_t::reset_pollin	.\src\kqueue.cpp	/^void zmq::kqueue_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
zmq::kqueue_t::reset_pollin	.\src\kqueue.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
zmq::kqueue_t::reset_pollout	.\src\kqueue.cpp	/^void zmq::kqueue_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
zmq::kqueue_t::reset_pollout	.\src\kqueue.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
zmq::kqueue_t::retired	.\src\kqueue.hpp	/^        retired_t retired;$/;"	m	class:zmq::kqueue_t	access:private
zmq::kqueue_t::retired_t	.\src\kqueue.hpp	/^        typedef std::vector <poll_entry_t*> retired_t;$/;"	t	class:zmq::kqueue_t	access:private
zmq::kqueue_t::rm_fd	.\src\kqueue.cpp	/^void zmq::kqueue_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
zmq::kqueue_t::rm_fd	.\src\kqueue.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
zmq::kqueue_t::set_pollin	.\src\kqueue.cpp	/^void zmq::kqueue_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
zmq::kqueue_t::set_pollin	.\src\kqueue.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
zmq::kqueue_t::set_pollout	.\src\kqueue.cpp	/^void zmq::kqueue_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::kqueue_t	signature:(handle_t handle_)
zmq::kqueue_t::set_pollout	.\src\kqueue.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::kqueue_t	access:public	signature:(handle_t handle_)
zmq::kqueue_t::start	.\src\kqueue.cpp	/^void zmq::kqueue_t::start ()$/;"	f	class:zmq::kqueue_t	signature:()
zmq::kqueue_t::start	.\src\kqueue.hpp	/^        void start ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
zmq::kqueue_t::stop	.\src\kqueue.cpp	/^void zmq::kqueue_t::stop ()$/;"	f	class:zmq::kqueue_t	signature:()
zmq::kqueue_t::stop	.\src\kqueue.hpp	/^        void stop ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
zmq::kqueue_t::stopping	.\src\kqueue.hpp	/^        bool stopping;$/;"	m	class:zmq::kqueue_t	access:private
zmq::kqueue_t::worker	.\src\kqueue.hpp	/^        thread_t worker;$/;"	m	class:zmq::kqueue_t	access:private
zmq::kqueue_t::worker_routine	.\src\kqueue.cpp	/^void zmq::kqueue_t::worker_routine (void *arg_)$/;"	f	class:zmq::kqueue_t	signature:(void *arg_)
zmq::kqueue_t::worker_routine	.\src\kqueue.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::kqueue_t	access:private	signature:(void *arg_)
zmq::kqueue_t::~kqueue_t	.\src\kqueue.cpp	/^zmq::kqueue_t::~kqueue_t ()$/;"	f	class:zmq::kqueue_t	signature:()
zmq::kqueue_t::~kqueue_t	.\src\kqueue.hpp	/^        ~kqueue_t ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
zmq::lb_t	.\src\lb.hpp	/^    class lb_t$/;"	c	namespace:zmq
zmq::lb_t::activated	.\src\lb.cpp	/^void zmq::lb_t::activated (pipe_t *pipe_)$/;"	f	class:zmq::lb_t	signature:(pipe_t *pipe_)
zmq::lb_t::activated	.\src\lb.hpp	/^        void activated (pipe_t *pipe_);$/;"	p	class:zmq::lb_t	access:public	signature:(pipe_t *pipe_)
zmq::lb_t::active	.\src\lb.hpp	/^        pipes_t::size_type active;$/;"	m	class:zmq::lb_t	access:private
zmq::lb_t::attach	.\src\lb.cpp	/^void zmq::lb_t::attach (pipe_t *pipe_)$/;"	f	class:zmq::lb_t	signature:(pipe_t *pipe_)
zmq::lb_t::attach	.\src\lb.hpp	/^        void attach (pipe_t *pipe_);$/;"	p	class:zmq::lb_t	access:public	signature:(pipe_t *pipe_)
zmq::lb_t::current	.\src\lb.hpp	/^        pipes_t::size_type current;$/;"	m	class:zmq::lb_t	access:private
zmq::lb_t::dropping	.\src\lb.hpp	/^        bool dropping;$/;"	m	class:zmq::lb_t	access:private
zmq::lb_t::has_out	.\src\lb.cpp	/^bool zmq::lb_t::has_out ()$/;"	f	class:zmq::lb_t	signature:()
zmq::lb_t::has_out	.\src\lb.hpp	/^        bool has_out ();$/;"	p	class:zmq::lb_t	access:public	signature:()
zmq::lb_t::lb_t	.\src\lb.cpp	/^zmq::lb_t::lb_t () :$/;"	f	class:zmq::lb_t	signature:()
zmq::lb_t::lb_t	.\src\lb.hpp	/^        lb_t ();$/;"	p	class:zmq::lb_t	access:public	signature:()
zmq::lb_t::lb_t	.\src\lb.hpp	/^        lb_t (const lb_t&);$/;"	p	class:zmq::lb_t	access:private	signature:(const lb_t&)
zmq::lb_t::more	.\src\lb.hpp	/^        bool more;$/;"	m	class:zmq::lb_t	access:private
zmq::lb_t::operator =	.\src\lb.hpp	/^        const lb_t &operator = (const lb_t&);$/;"	p	class:zmq::lb_t	access:private	signature:(const lb_t&)
zmq::lb_t::pipes	.\src\lb.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::lb_t	access:private
zmq::lb_t::pipes_t	.\src\lb.hpp	/^        typedef array_t <pipe_t, 2> pipes_t;$/;"	t	class:zmq::lb_t	access:private
zmq::lb_t::send	.\src\lb.cpp	/^int zmq::lb_t::send (msg_t *msg_, int flags_)$/;"	f	class:zmq::lb_t	signature:(msg_t *msg_, int flags_)
zmq::lb_t::send	.\src\lb.hpp	/^        int send (msg_t *msg_, int flags_);$/;"	p	class:zmq::lb_t	access:public	signature:(msg_t *msg_, int flags_)
zmq::lb_t::terminated	.\src\lb.cpp	/^void zmq::lb_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::lb_t	signature:(pipe_t *pipe_)
zmq::lb_t::terminated	.\src\lb.hpp	/^        void terminated (pipe_t *pipe_);$/;"	p	class:zmq::lb_t	access:public	signature:(pipe_t *pipe_)
zmq::lb_t::~lb_t	.\src\lb.cpp	/^zmq::lb_t::~lb_t ()$/;"	f	class:zmq::lb_t	signature:()
zmq::lb_t::~lb_t	.\src\lb.hpp	/^        ~lb_t ();$/;"	p	class:zmq::lb_t	access:public	signature:()
zmq::mailbox_t	.\src\mailbox.hpp	/^    class mailbox_t$/;"	c	namespace:zmq
zmq::mailbox_t::active	.\src\mailbox.hpp	/^        bool active;$/;"	m	class:zmq::mailbox_t	access:private
zmq::mailbox_t::cpipe	.\src\mailbox.hpp	/^        cpipe_t cpipe;$/;"	m	class:zmq::mailbox_t	access:private
zmq::mailbox_t::cpipe_t	.\src\mailbox.hpp	/^        typedef ypipe_t <command_t, command_pipe_granularity> cpipe_t;$/;"	t	class:zmq::mailbox_t	access:private
zmq::mailbox_t::get_fd	.\src\mailbox.cpp	/^zmq::fd_t zmq::mailbox_t::get_fd ()$/;"	f	class:zmq::mailbox_t	signature:()
zmq::mailbox_t::get_fd	.\src\mailbox.hpp	/^        fd_t get_fd ();$/;"	p	class:zmq::mailbox_t	access:public	signature:()
zmq::mailbox_t::mailbox_t	.\src\mailbox.cpp	/^zmq::mailbox_t::mailbox_t ()$/;"	f	class:zmq::mailbox_t	signature:()
zmq::mailbox_t::mailbox_t	.\src\mailbox.hpp	/^        mailbox_t ();$/;"	p	class:zmq::mailbox_t	access:public	signature:()
zmq::mailbox_t::mailbox_t	.\src\mailbox.hpp	/^        mailbox_t (const mailbox_t&);$/;"	p	class:zmq::mailbox_t	access:private	signature:(const mailbox_t&)
zmq::mailbox_t::operator =	.\src\mailbox.hpp	/^        const mailbox_t &operator = (const mailbox_t&);$/;"	p	class:zmq::mailbox_t	access:private	signature:(const mailbox_t&)
zmq::mailbox_t::recv	.\src\mailbox.cpp	/^int zmq::mailbox_t::recv (command_t *cmd_, int timeout_)$/;"	f	class:zmq::mailbox_t	signature:(command_t *cmd_, int timeout_)
zmq::mailbox_t::recv	.\src\mailbox.hpp	/^        int recv (command_t *cmd_, int timeout_);$/;"	p	class:zmq::mailbox_t	access:public	signature:(command_t *cmd_, int timeout_)
zmq::mailbox_t::send	.\src\mailbox.cpp	/^void zmq::mailbox_t::send (const command_t &cmd_)$/;"	f	class:zmq::mailbox_t	signature:(const command_t &cmd_)
zmq::mailbox_t::send	.\src\mailbox.hpp	/^        void send (const command_t &cmd_);$/;"	p	class:zmq::mailbox_t	access:public	signature:(const command_t &cmd_)
zmq::mailbox_t::signaler	.\src\mailbox.hpp	/^        signaler_t signaler;$/;"	m	class:zmq::mailbox_t	access:private
zmq::mailbox_t::sync	.\src\mailbox.hpp	/^        mutex_t sync;$/;"	m	class:zmq::mailbox_t	access:private
zmq::mailbox_t::~mailbox_t	.\src\mailbox.cpp	/^zmq::mailbox_t::~mailbox_t ()$/;"	f	class:zmq::mailbox_t	signature:()
zmq::mailbox_t::~mailbox_t	.\src\mailbox.hpp	/^        ~mailbox_t ();$/;"	p	class:zmq::mailbox_t	access:public	signature:()
zmq::max_command_delay	.\src\config.hpp	/^        max_command_delay = 3000000,$/;"	e	enum:zmq::__anon32
zmq::max_io_events	.\src\config.hpp	/^        max_io_events = 256,$/;"	e	enum:zmq::__anon32
zmq::max_wm_delta	.\src\config.hpp	/^        max_wm_delta = 1024,$/;"	e	enum:zmq::__anon32
zmq::message_pipe_granularity	.\src\config.hpp	/^        message_pipe_granularity = 256,$/;"	e	enum:zmq::__anon32
zmq::msg_t	.\src\msg.hpp	/^    class msg_t$/;"	c	namespace:zmq
zmq::msg_t::__anon38::__anon39::flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon39	access:public
zmq::msg_t::__anon38::__anon39::type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon39	access:public
zmq::msg_t::__anon38::__anon39::unused	.\src\msg.hpp	/^                unsigned char unused [max_vsm_size + 1];$/;"	m	struct:zmq::msg_t::__anon38::__anon39	access:public
zmq::msg_t::__anon38::__anon40::data	.\src\msg.hpp	/^                unsigned char data [max_vsm_size];$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
zmq::msg_t::__anon38::__anon40::flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
zmq::msg_t::__anon38::__anon40::size	.\src\msg.hpp	/^                unsigned char size;$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
zmq::msg_t::__anon38::__anon40::type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon40	access:public
zmq::msg_t::__anon38::__anon41::content	.\src\msg.hpp	/^                content_t *content;$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
zmq::msg_t::__anon38::__anon41::flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
zmq::msg_t::__anon38::__anon41::type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
zmq::msg_t::__anon38::__anon41::unused	.\src\msg.hpp	/^                unsigned char unused [max_vsm_size + 1 - sizeof (content_t*)];$/;"	m	struct:zmq::msg_t::__anon38::__anon41	access:public
zmq::msg_t::__anon38::__anon42::flags	.\src\msg.hpp	/^                unsigned char flags;$/;"	m	struct:zmq::msg_t::__anon38::__anon42	access:public
zmq::msg_t::__anon38::__anon42::type	.\src\msg.hpp	/^                unsigned char type;$/;"	m	struct:zmq::msg_t::__anon38::__anon42	access:public
zmq::msg_t::__anon38::__anon42::unused	.\src\msg.hpp	/^                unsigned char unused [max_vsm_size + 1];$/;"	m	struct:zmq::msg_t::__anon38::__anon42	access:public
zmq::msg_t::__anon38::base	.\src\msg.hpp	/^            } base;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon39	access:public
zmq::msg_t::__anon38::delimiter	.\src\msg.hpp	/^            } delimiter;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon42	access:public
zmq::msg_t::__anon38::lmsg	.\src\msg.hpp	/^            } lmsg;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon41	access:public
zmq::msg_t::__anon38::vsm	.\src\msg.hpp	/^            } vsm;$/;"	m	union:zmq::msg_t::__anon38	typeref:struct:zmq::msg_t::__anon38::__anon40	access:public
zmq::msg_t::add_refs	.\src\msg.cpp	/^void zmq::msg_t::add_refs (int refs_)$/;"	f	class:zmq::msg_t	signature:(int refs_)
zmq::msg_t::add_refs	.\src\msg.hpp	/^        void add_refs (int refs_);$/;"	p	class:zmq::msg_t	access:public	signature:(int refs_)
zmq::msg_t::check	.\src\msg.cpp	/^bool zmq::msg_t::check ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::check	.\src\msg.hpp	/^        bool check ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::close	.\src\msg.cpp	/^int zmq::msg_t::close ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::close	.\src\msg.hpp	/^        int close ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::content_t	.\src\msg.hpp	/^        struct content_t$/;"	s	class:zmq::msg_t	access:private
zmq::msg_t::content_t::data	.\src\msg.hpp	/^            void *data;$/;"	m	struct:zmq::msg_t::content_t	access:public
zmq::msg_t::content_t::ffn	.\src\msg.hpp	/^            msg_free_fn *ffn;$/;"	m	struct:zmq::msg_t::content_t	access:public
zmq::msg_t::content_t::hint	.\src\msg.hpp	/^            void *hint;$/;"	m	struct:zmq::msg_t::content_t	access:public
zmq::msg_t::content_t::refcnt	.\src\msg.hpp	/^            zmq::atomic_counter_t refcnt;$/;"	m	struct:zmq::msg_t::content_t	access:public
zmq::msg_t::content_t::size	.\src\msg.hpp	/^            size_t size;$/;"	m	struct:zmq::msg_t::content_t	access:public
zmq::msg_t::copy	.\src\msg.cpp	/^int zmq::msg_t::copy (msg_t &src_)$/;"	f	class:zmq::msg_t	signature:(msg_t &src_)
zmq::msg_t::copy	.\src\msg.hpp	/^        int copy (msg_t &src_);$/;"	p	class:zmq::msg_t	access:public	signature:(msg_t &src_)
zmq::msg_t::data	.\src\msg.cpp	/^void *zmq::msg_t::data ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::data	.\src\msg.hpp	/^        void *data ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::flags	.\src\msg.cpp	/^unsigned char zmq::msg_t::flags ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::flags	.\src\msg.hpp	/^        unsigned char flags ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::identity	.\src\msg.hpp	/^            identity = 64,$/;"	e	enum:zmq::msg_t::__anon36
zmq::msg_t::init	.\src\msg.cpp	/^int zmq::msg_t::init ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::init	.\src\msg.hpp	/^        int init ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::init_data	.\src\msg.cpp	/^int zmq::msg_t::init_data (void *data_, size_t size_, msg_free_fn *ffn_,$/;"	f	class:zmq::msg_t	signature:(void *data_, size_t size_, msg_free_fn *ffn_, void *hint_)
zmq::msg_t::init_data	.\src\msg.hpp	/^        int init_data (void *data_, size_t size_, msg_free_fn *ffn_,$/;"	p	class:zmq::msg_t	access:public	signature:(void *data_, size_t size_, msg_free_fn *ffn_, void *hint_)
zmq::msg_t::init_delimiter	.\src\msg.cpp	/^int zmq::msg_t::init_delimiter ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::init_delimiter	.\src\msg.hpp	/^        int init_delimiter ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::init_size	.\src\msg.cpp	/^int zmq::msg_t::init_size (size_t size_)$/;"	f	class:zmq::msg_t	signature:(size_t size_)
zmq::msg_t::init_size	.\src\msg.hpp	/^        int init_size (size_t size_);$/;"	p	class:zmq::msg_t	access:public	signature:(size_t size_)
zmq::msg_t::is_delimiter	.\src\msg.cpp	/^bool zmq::msg_t::is_delimiter ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::is_delimiter	.\src\msg.hpp	/^        bool is_delimiter ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::is_identity	.\src\msg.cpp	/^bool zmq::msg_t::is_identity () const$/;"	f	class:zmq::msg_t	signature:() const
zmq::msg_t::is_identity	.\src\msg.hpp	/^        bool is_identity () const;$/;"	p	class:zmq::msg_t	access:public	signature:() const
zmq::msg_t::is_vsm	.\src\msg.cpp	/^bool zmq::msg_t::is_vsm ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::is_vsm	.\src\msg.hpp	/^        bool is_vsm ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::max_vsm_size	.\src\msg.hpp	/^        enum {max_vsm_size = 29};$/;"	e	enum:zmq::msg_t::__anon37
zmq::msg_t::more	.\src\msg.hpp	/^            more = 1,$/;"	e	enum:zmq::msg_t::__anon36
zmq::msg_t::move	.\src\msg.cpp	/^int zmq::msg_t::move (msg_t &src_)$/;"	f	class:zmq::msg_t	signature:(msg_t &src_)
zmq::msg_t::move	.\src\msg.hpp	/^        int move (msg_t &src_);$/;"	p	class:zmq::msg_t	access:public	signature:(msg_t &src_)
zmq::msg_t::reset_flags	.\src\msg.cpp	/^void zmq::msg_t::reset_flags (unsigned char flags_)$/;"	f	class:zmq::msg_t	signature:(unsigned char flags_)
zmq::msg_t::reset_flags	.\src\msg.hpp	/^        void reset_flags (unsigned char flags_);$/;"	p	class:zmq::msg_t	access:public	signature:(unsigned char flags_)
zmq::msg_t::rm_refs	.\src\msg.cpp	/^bool zmq::msg_t::rm_refs (int refs_)$/;"	f	class:zmq::msg_t	signature:(int refs_)
zmq::msg_t::rm_refs	.\src\msg.hpp	/^        bool rm_refs (int refs_);$/;"	p	class:zmq::msg_t	access:public	signature:(int refs_)
zmq::msg_t::set_flags	.\src\msg.cpp	/^void zmq::msg_t::set_flags (unsigned char flags_)$/;"	f	class:zmq::msg_t	signature:(unsigned char flags_)
zmq::msg_t::set_flags	.\src\msg.hpp	/^        void set_flags (unsigned char flags_);$/;"	p	class:zmq::msg_t	access:public	signature:(unsigned char flags_)
zmq::msg_t::shared	.\src\msg.hpp	/^            shared = 128$/;"	e	enum:zmq::msg_t::__anon36
zmq::msg_t::size	.\src\msg.cpp	/^size_t zmq::msg_t::size ()$/;"	f	class:zmq::msg_t	signature:()
zmq::msg_t::size	.\src\msg.hpp	/^        size_t size ();$/;"	p	class:zmq::msg_t	access:public	signature:()
zmq::msg_t::type_delimiter	.\src\msg.hpp	/^            type_delimiter = 103,$/;"	e	enum:zmq::msg_t::type_t
zmq::msg_t::type_lmsg	.\src\msg.hpp	/^            type_lmsg = 102,$/;"	e	enum:zmq::msg_t::type_t
zmq::msg_t::type_max	.\src\msg.hpp	/^            type_max = 103$/;"	e	enum:zmq::msg_t::type_t
zmq::msg_t::type_min	.\src\msg.hpp	/^            type_min = 101,$/;"	e	enum:zmq::msg_t::type_t
zmq::msg_t::type_t	.\src\msg.hpp	/^        enum type_t$/;"	g	class:zmq::msg_t	access:private
zmq::msg_t::type_vsm	.\src\msg.hpp	/^            type_vsm = 101,$/;"	e	enum:zmq::msg_t::type_t
zmq::msg_t::u	.\src\msg.hpp	/^        } u;$/;"	m	class:zmq::msg_t	typeref:union:zmq::msg_t::__anon38	access:private
zmq::mtrie_t	.\src\mtrie.hpp	/^    class mtrie_t$/;"	c	namespace:zmq
zmq::mtrie_t::__anon43::node	.\src\mtrie.hpp	/^            class mtrie_t *node;$/;"	m	union:zmq::mtrie_t::__anon43	typeref:class:zmq::mtrie_t::__anon43::mtrie_t	access:public
zmq::mtrie_t::__anon43::table	.\src\mtrie.hpp	/^            class mtrie_t **table;$/;"	m	union:zmq::mtrie_t::__anon43	typeref:class:zmq::mtrie_t::__anon43::mtrie_t	access:public
zmq::mtrie_t::add	.\src\mtrie.cpp	/^bool zmq::mtrie_t::add (unsigned char *prefix_, size_t size_, pipe_t *pipe_)$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
zmq::mtrie_t::add	.\src\mtrie.hpp	/^        bool add (unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_);$/;"	p	class:zmq::mtrie_t	access:public	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
zmq::mtrie_t::add_helper	.\src\mtrie.cpp	/^bool zmq::mtrie_t::add_helper (unsigned char *prefix_, size_t size_,$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
zmq::mtrie_t::add_helper	.\src\mtrie.hpp	/^        bool add_helper (unsigned char *prefix_, size_t size_,$/;"	p	class:zmq::mtrie_t	access:private	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
zmq::mtrie_t::count	.\src\mtrie.hpp	/^        unsigned short count;$/;"	m	class:zmq::mtrie_t	access:private
zmq::mtrie_t::is_redundant	.\src\mtrie.cpp	/^bool zmq::mtrie_t::is_redundant () const$/;"	f	class:zmq::mtrie_t	signature:() const
zmq::mtrie_t::is_redundant	.\src\mtrie.hpp	/^        bool is_redundant () const;$/;"	p	class:zmq::mtrie_t	access:private	signature:() const
zmq::mtrie_t::live_nodes	.\src\mtrie.hpp	/^        unsigned short live_nodes;$/;"	m	class:zmq::mtrie_t	access:private
zmq::mtrie_t::match	.\src\mtrie.cpp	/^void zmq::mtrie_t::match (unsigned char *data_, size_t size_,$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *data_, size_t size_, void (*func_) (pipe_t *pipe_, void *arg_), void *arg_)
zmq::mtrie_t::match	.\src\mtrie.hpp	/^        void match (unsigned char *data_, size_t size_,$/;"	p	class:zmq::mtrie_t	access:public	signature:(unsigned char *data_, size_t size_, void (*func_) (zmq::pipe_t *pipe_, void *arg_), void *arg_)
zmq::mtrie_t::min	.\src\mtrie.hpp	/^        unsigned char min;$/;"	m	class:zmq::mtrie_t	access:private
zmq::mtrie_t::mtrie_t	.\src\mtrie.cpp	/^zmq::mtrie_t::mtrie_t () :$/;"	f	class:zmq::mtrie_t	signature:()
zmq::mtrie_t::mtrie_t	.\src\mtrie.hpp	/^        mtrie_t ();$/;"	p	class:zmq::mtrie_t	access:public	signature:()
zmq::mtrie_t::mtrie_t	.\src\mtrie.hpp	/^        mtrie_t (const mtrie_t&);$/;"	p	class:zmq::mtrie_t	access:private	signature:(const mtrie_t&)
zmq::mtrie_t::next	.\src\mtrie.hpp	/^        } next;$/;"	m	class:zmq::mtrie_t	typeref:union:zmq::mtrie_t::__anon43	access:private
zmq::mtrie_t::operator =	.\src\mtrie.hpp	/^        const mtrie_t &operator = (const mtrie_t&);$/;"	p	class:zmq::mtrie_t	access:private	signature:(const mtrie_t&)
zmq::mtrie_t::pipes	.\src\mtrie.hpp	/^        pipes_t *pipes;$/;"	m	class:zmq::mtrie_t	access:private
zmq::mtrie_t::pipes_t	.\src\mtrie.hpp	/^        typedef std::set <zmq::pipe_t*> pipes_t;$/;"	t	class:zmq::mtrie_t	access:private
zmq::mtrie_t::rm	.\src\mtrie.cpp	/^bool zmq::mtrie_t::rm (unsigned char *prefix_, size_t size_, pipe_t *pipe_)$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
zmq::mtrie_t::rm	.\src\mtrie.cpp	/^void zmq::mtrie_t::rm (pipe_t *pipe_,$/;"	f	class:zmq::mtrie_t	signature:(pipe_t *pipe_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::mtrie_t::rm	.\src\mtrie.hpp	/^        bool rm (unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_);$/;"	p	class:zmq::mtrie_t	access:public	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
zmq::mtrie_t::rm	.\src\mtrie.hpp	/^        void rm (zmq::pipe_t *pipe_,$/;"	p	class:zmq::mtrie_t	access:public	signature:(zmq::pipe_t *pipe_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::mtrie_t::rm_helper	.\src\mtrie.cpp	/^bool zmq::mtrie_t::rm_helper (unsigned char *prefix_, size_t size_,$/;"	f	class:zmq::mtrie_t	signature:(unsigned char *prefix_, size_t size_, pipe_t *pipe_)
zmq::mtrie_t::rm_helper	.\src\mtrie.cpp	/^void zmq::mtrie_t::rm_helper (pipe_t *pipe_, unsigned char **buff_,$/;"	f	class:zmq::mtrie_t	signature:(pipe_t *pipe_, unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::mtrie_t::rm_helper	.\src\mtrie.hpp	/^        bool rm_helper (unsigned char *prefix_, size_t size_,$/;"	p	class:zmq::mtrie_t	access:private	signature:(unsigned char *prefix_, size_t size_, zmq::pipe_t *pipe_)
zmq::mtrie_t::rm_helper	.\src\mtrie.hpp	/^        void rm_helper (zmq::pipe_t *pipe_, unsigned char **buff_,$/;"	p	class:zmq::mtrie_t	access:private	signature:(zmq::pipe_t *pipe_, unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::mtrie_t::~mtrie_t	.\src\mtrie.cpp	/^zmq::mtrie_t::~mtrie_t ()$/;"	f	class:zmq::mtrie_t	signature:()
zmq::mtrie_t::~mtrie_t	.\src\mtrie.hpp	/^        ~mtrie_t ();$/;"	p	class:zmq::mtrie_t	access:public	signature:()
zmq::mutex_t	.\src\mutex.hpp	/^    class mutex_t$/;"	c	namespace:zmq
zmq::mutex_t::cs	.\src\mutex.hpp	/^        CRITICAL_SECTION cs;$/;"	m	class:zmq::mutex_t	access:private
zmq::mutex_t::lock	.\src\mutex.hpp	/^        inline void lock ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
zmq::mutex_t::mutex_t	.\src\mutex.hpp	/^        inline mutex_t ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
zmq::mutex_t::mutex_t	.\src\mutex.hpp	/^        mutex_t (const mutex_t&);$/;"	p	class:zmq::mutex_t	access:private	signature:(const mutex_t&)
zmq::mutex_t::operator =	.\src\mutex.hpp	/^        void operator = (const mutex_t&);$/;"	p	class:zmq::mutex_t	access:private	signature:(const mutex_t&)
zmq::mutex_t::unlock	.\src\mutex.hpp	/^        inline void unlock ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
zmq::mutex_t::~mutex_t	.\src\mutex.hpp	/^        inline ~mutex_t ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
zmq::object_t	.\src\object.hpp	/^    class object_t$/;"	c	namespace:zmq
zmq::object_t::choose_io_thread	.\src\object.cpp	/^zmq::io_thread_t *zmq::object_t::choose_io_thread (uint64_t affinity_)$/;"	f	class:zmq::object_t	signature:(uint64_t affinity_)
zmq::object_t::choose_io_thread	.\src\object.hpp	/^        zmq::io_thread_t *choose_io_thread (uint64_t affinity_);$/;"	p	class:zmq::object_t	access:protected	signature:(uint64_t affinity_)
zmq::object_t::ctx	.\src\object.hpp	/^        zmq::ctx_t *ctx;$/;"	m	class:zmq::object_t	access:private
zmq::object_t::destroy_socket	.\src\object.cpp	/^void zmq::object_t::destroy_socket (socket_base_t *socket_)$/;"	f	class:zmq::object_t	signature:(socket_base_t *socket_)
zmq::object_t::destroy_socket	.\src\object.hpp	/^        void destroy_socket (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
zmq::object_t::find_endpoint	.\src\object.cpp	/^zmq::endpoint_t zmq::object_t::find_endpoint (const char *addr_)$/;"	f	class:zmq::object_t	signature:(const char *addr_)
zmq::object_t::find_endpoint	.\src\object.hpp	/^        zmq::endpoint_t find_endpoint (const char *addr_);$/;"	p	class:zmq::object_t	access:protected	signature:(const char *addr_)
zmq::object_t::get_ctx	.\src\object.cpp	/^zmq::ctx_t *zmq::object_t::get_ctx ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::get_ctx	.\src\object.hpp	/^        ctx_t *get_ctx ();$/;"	p	class:zmq::object_t	access:public	signature:()
zmq::object_t::get_tid	.\src\object.cpp	/^uint32_t zmq::object_t::get_tid ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::get_tid	.\src\object.hpp	/^        uint32_t get_tid ();$/;"	p	class:zmq::object_t	access:public	signature:()
zmq::object_t::log	.\src\object.hpp	/^        void log (const char *format_, ...);$/;"	p	class:zmq::object_t	access:protected	signature:(const char *format_, ...)
zmq::object_t::object_t	.\src\object.cpp	/^zmq::object_t::object_t (ctx_t *ctx_, uint32_t tid_) :$/;"	f	class:zmq::object_t	signature:(ctx_t *ctx_, uint32_t tid_)
zmq::object_t::object_t	.\src\object.cpp	/^zmq::object_t::object_t (object_t *parent_) :$/;"	f	class:zmq::object_t	signature:(object_t *parent_)
zmq::object_t::object_t	.\src\object.hpp	/^        object_t (const object_t&);$/;"	p	class:zmq::object_t	access:private	signature:(const object_t&)
zmq::object_t::object_t	.\src\object.hpp	/^        object_t (object_t *parent_);$/;"	p	class:zmq::object_t	access:public	signature:(object_t *parent_)
zmq::object_t::object_t	.\src\object.hpp	/^        object_t (zmq::ctx_t *ctx_, uint32_t tid_);$/;"	p	class:zmq::object_t	access:public	signature:(zmq::ctx_t *ctx_, uint32_t tid_)
zmq::object_t::operator =	.\src\object.hpp	/^        const object_t &operator = (const object_t&);$/;"	p	class:zmq::object_t	access:private	signature:(const object_t&)
zmq::object_t::process_activate_read	.\src\object.cpp	/^void zmq::object_t::process_activate_read ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_activate_read	.\src\object.hpp	/^        virtual void process_activate_read ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_activate_write	.\src\object.cpp	/^void zmq::object_t::process_activate_write (uint64_t)$/;"	f	class:zmq::object_t	signature:(uint64_t)
zmq::object_t::process_activate_write	.\src\object.hpp	/^        virtual void process_activate_write (uint64_t msgs_read_);$/;"	p	class:zmq::object_t	access:protected	signature:(uint64_t msgs_read_)
zmq::object_t::process_attach	.\src\object.cpp	/^void zmq::object_t::process_attach (i_engine *)$/;"	f	class:zmq::object_t	signature:(i_engine *)
zmq::object_t::process_attach	.\src\object.hpp	/^        virtual void process_attach (zmq::i_engine *engine_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::i_engine *engine_)
zmq::object_t::process_bind	.\src\object.cpp	/^void zmq::object_t::process_bind (pipe_t *)$/;"	f	class:zmq::object_t	signature:(pipe_t *)
zmq::object_t::process_bind	.\src\object.hpp	/^        virtual void process_bind (zmq::pipe_t *pipe_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::object_t::process_command	.\src\object.cpp	/^void zmq::object_t::process_command (command_t &cmd_)$/;"	f	class:zmq::object_t	signature:(command_t &cmd_)
zmq::object_t::process_command	.\src\object.hpp	/^        void process_command (zmq::command_t &cmd_);$/;"	p	class:zmq::object_t	access:public	signature:(zmq::command_t &cmd_)
zmq::object_t::process_hiccup	.\src\object.cpp	/^void zmq::object_t::process_hiccup (void *)$/;"	f	class:zmq::object_t	signature:(void *)
zmq::object_t::process_hiccup	.\src\object.hpp	/^        virtual void process_hiccup (void *pipe_);$/;"	p	class:zmq::object_t	access:protected	signature:(void *pipe_)
zmq::object_t::process_own	.\src\object.cpp	/^void zmq::object_t::process_own (own_t *)$/;"	f	class:zmq::object_t	signature:(own_t *)
zmq::object_t::process_own	.\src\object.hpp	/^        virtual void process_own (zmq::own_t *object_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *object_)
zmq::object_t::process_pipe_term	.\src\object.cpp	/^void zmq::object_t::process_pipe_term ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_pipe_term	.\src\object.hpp	/^        virtual void process_pipe_term ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_pipe_term_ack	.\src\object.cpp	/^void zmq::object_t::process_pipe_term_ack ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_pipe_term_ack	.\src\object.hpp	/^        virtual void process_pipe_term_ack ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_plug	.\src\object.cpp	/^void zmq::object_t::process_plug ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_plug	.\src\object.hpp	/^        virtual void process_plug ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_reap	.\src\object.cpp	/^void zmq::object_t::process_reap (class socket_base_t *)$/;"	f	class:zmq::object_t	signature:(class socket_base_t *)
zmq::object_t::process_reap	.\src\object.hpp	/^        virtual void process_reap (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
zmq::object_t::process_reaped	.\src\object.cpp	/^void zmq::object_t::process_reaped ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_reaped	.\src\object.hpp	/^        virtual void process_reaped ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_seqnum	.\src\object.cpp	/^void zmq::object_t::process_seqnum ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_seqnum	.\src\object.hpp	/^        virtual void process_seqnum ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_stop	.\src\object.cpp	/^void zmq::object_t::process_stop ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_stop	.\src\object.hpp	/^        virtual void process_stop ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_term	.\src\object.cpp	/^void zmq::object_t::process_term (int)$/;"	f	class:zmq::object_t	signature:(int)
zmq::object_t::process_term	.\src\object.hpp	/^        virtual void process_term (int linger_);$/;"	p	class:zmq::object_t	access:protected	signature:(int linger_)
zmq::object_t::process_term_ack	.\src\object.cpp	/^void zmq::object_t::process_term_ack ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::process_term_ack	.\src\object.hpp	/^        virtual void process_term_ack ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::process_term_req	.\src\object.cpp	/^void zmq::object_t::process_term_req (own_t *)$/;"	f	class:zmq::object_t	signature:(own_t *)
zmq::object_t::process_term_req	.\src\object.hpp	/^        virtual void process_term_req (zmq::own_t *object_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *object_)
zmq::object_t::register_endpoint	.\src\object.cpp	/^int zmq::object_t::register_endpoint (const char *addr_, endpoint_t &endpoint_)$/;"	f	class:zmq::object_t	signature:(const char *addr_, endpoint_t &endpoint_)
zmq::object_t::register_endpoint	.\src\object.hpp	/^        int register_endpoint (const char *addr_, zmq::endpoint_t &endpoint_);$/;"	p	class:zmq::object_t	access:protected	signature:(const char *addr_, zmq::endpoint_t &endpoint_)
zmq::object_t::send_activate_read	.\src\object.cpp	/^void zmq::object_t::send_activate_read (pipe_t *destination_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_)
zmq::object_t::send_activate_read	.\src\object.hpp	/^        void send_activate_read (zmq::pipe_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_)
zmq::object_t::send_activate_write	.\src\object.cpp	/^void zmq::object_t::send_activate_write (pipe_t *destination_,$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_, uint64_t msgs_read_)
zmq::object_t::send_activate_write	.\src\object.hpp	/^        void send_activate_write (zmq::pipe_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_, uint64_t msgs_read_)
zmq::object_t::send_attach	.\src\object.cpp	/^void zmq::object_t::send_attach (session_base_t *destination_,$/;"	f	class:zmq::object_t	signature:(session_base_t *destination_, i_engine *engine_, bool inc_seqnum_)
zmq::object_t::send_attach	.\src\object.hpp	/^        void send_attach (zmq::session_base_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::session_base_t *destination_, zmq::i_engine *engine_, bool inc_seqnum_ = true)
zmq::object_t::send_bind	.\src\object.cpp	/^void zmq::object_t::send_bind (own_t *destination_, pipe_t *pipe_,$/;"	f	class:zmq::object_t	signature:(own_t *destination_, pipe_t *pipe_, bool inc_seqnum_)
zmq::object_t::send_bind	.\src\object.hpp	/^        void send_bind (zmq::own_t *destination_, zmq::pipe_t *pipe_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, zmq::pipe_t *pipe_, bool inc_seqnum_ = true)
zmq::object_t::send_command	.\src\object.cpp	/^void zmq::object_t::send_command (command_t &cmd_)$/;"	f	class:zmq::object_t	signature:(command_t &cmd_)
zmq::object_t::send_command	.\src\object.hpp	/^        void send_command (command_t &cmd_);$/;"	p	class:zmq::object_t	access:private	signature:(command_t &cmd_)
zmq::object_t::send_done	.\src\object.cpp	/^void zmq::object_t::send_done ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::send_done	.\src\object.hpp	/^        void send_done ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::send_hiccup	.\src\object.cpp	/^void zmq::object_t::send_hiccup (pipe_t *destination_, void *pipe_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_, void *pipe_)
zmq::object_t::send_hiccup	.\src\object.hpp	/^        void send_hiccup (zmq::pipe_t *destination_, void *pipe_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_, void *pipe_)
zmq::object_t::send_own	.\src\object.cpp	/^void zmq::object_t::send_own (own_t *destination_, own_t *object_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_, own_t *object_)
zmq::object_t::send_own	.\src\object.hpp	/^        void send_own (zmq::own_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, zmq::own_t *object_)
zmq::object_t::send_pipe_term	.\src\object.cpp	/^void zmq::object_t::send_pipe_term (pipe_t *destination_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_)
zmq::object_t::send_pipe_term	.\src\object.hpp	/^        void send_pipe_term (zmq::pipe_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_)
zmq::object_t::send_pipe_term_ack	.\src\object.cpp	/^void zmq::object_t::send_pipe_term_ack (pipe_t *destination_)$/;"	f	class:zmq::object_t	signature:(pipe_t *destination_)
zmq::object_t::send_pipe_term_ack	.\src\object.hpp	/^        void send_pipe_term_ack (zmq::pipe_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::pipe_t *destination_)
zmq::object_t::send_plug	.\src\object.cpp	/^void zmq::object_t::send_plug (own_t *destination_, bool inc_seqnum_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_, bool inc_seqnum_)
zmq::object_t::send_plug	.\src\object.hpp	/^        void send_plug (zmq::own_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, bool inc_seqnum_ = true)
zmq::object_t::send_reap	.\src\object.cpp	/^void zmq::object_t::send_reap (class socket_base_t *socket_)$/;"	f	class:zmq::object_t	signature:(class socket_base_t *socket_)
zmq::object_t::send_reap	.\src\object.hpp	/^        void send_reap (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
zmq::object_t::send_reaped	.\src\object.cpp	/^void zmq::object_t::send_reaped ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::send_reaped	.\src\object.hpp	/^        void send_reaped ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::send_stop	.\src\object.cpp	/^void zmq::object_t::send_stop ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::send_stop	.\src\object.hpp	/^        void send_stop ();$/;"	p	class:zmq::object_t	access:protected	signature:()
zmq::object_t::send_term	.\src\object.cpp	/^void zmq::object_t::send_term (own_t *destination_, int linger_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_, int linger_)
zmq::object_t::send_term	.\src\object.hpp	/^        void send_term (zmq::own_t *destination_, int linger_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, int linger_)
zmq::object_t::send_term_ack	.\src\object.cpp	/^void zmq::object_t::send_term_ack (own_t *destination_)$/;"	f	class:zmq::object_t	signature:(own_t *destination_)
zmq::object_t::send_term_ack	.\src\object.hpp	/^        void send_term_ack (zmq::own_t *destination_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_)
zmq::object_t::send_term_req	.\src\object.cpp	/^void zmq::object_t::send_term_req (own_t *destination_,$/;"	f	class:zmq::object_t	signature:(own_t *destination_, own_t *object_)
zmq::object_t::send_term_req	.\src\object.hpp	/^        void send_term_req (zmq::own_t *destination_,$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::own_t *destination_, zmq::own_t *object_)
zmq::object_t::tid	.\src\object.hpp	/^        uint32_t tid;$/;"	m	class:zmq::object_t	access:private
zmq::object_t::unregister_endpoints	.\src\object.cpp	/^void zmq::object_t::unregister_endpoints (socket_base_t *socket_)$/;"	f	class:zmq::object_t	signature:(socket_base_t *socket_)
zmq::object_t::unregister_endpoints	.\src\object.hpp	/^        void unregister_endpoints (zmq::socket_base_t *socket_);$/;"	p	class:zmq::object_t	access:protected	signature:(zmq::socket_base_t *socket_)
zmq::object_t::~object_t	.\src\object.cpp	/^zmq::object_t::~object_t ()$/;"	f	class:zmq::object_t	signature:()
zmq::object_t::~object_t	.\src\object.hpp	/^        virtual ~object_t ();$/;"	p	class:zmq::object_t	access:public	signature:()
zmq::open_socket	.\src\ip.cpp	/^zmq::fd_t zmq::open_socket (int domain_, int type_, int protocol_)$/;"	f	class:zmq	signature:(int domain_, int type_, int protocol_)
zmq::open_socket	.\src\ip.hpp	/^    fd_t open_socket (int domain_, int type_, int protocol_);$/;"	p	namespace:zmq	signature:(int domain_, int type_, int protocol_)
zmq::options_t	.\src\options.hpp	/^    struct options_t$/;"	s	namespace:zmq
zmq::options_t::affinity	.\src\options.hpp	/^        uint64_t affinity;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::backlog	.\src\options.hpp	/^        int backlog;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::delay_attach_on_connect	.\src\options.hpp	/^        int delay_attach_on_connect;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::delay_on_close	.\src\options.hpp	/^        bool delay_on_close;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::delay_on_disconnect	.\src\options.hpp	/^        bool delay_on_disconnect;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::filter	.\src\options.hpp	/^        bool filter;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::getsockopt	.\src\options.cpp	/^int zmq::options_t::getsockopt (int option_, void *optval_, size_t *optvallen_)$/;"	f	class:zmq::options_t	signature:(int option_, void *optval_, size_t *optvallen_)
zmq::options_t::getsockopt	.\src\options.hpp	/^        int getsockopt (int option_, void *optval_, size_t *optvallen_);$/;"	p	struct:zmq::options_t	access:public	signature:(int option_, void *optval_, size_t *optvallen_)
zmq::options_t::identity	.\src\options.hpp	/^        unsigned char identity [256];$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::identity_size	.\src\options.hpp	/^        unsigned char identity_size;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::ipv4only	.\src\options.hpp	/^        int ipv4only;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::last_endpoint	.\src\options.hpp	/^        std::string last_endpoint;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::linger	.\src\options.hpp	/^        int linger;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::maxmsgsize	.\src\options.hpp	/^        int64_t maxmsgsize;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::multicast_hops	.\src\options.hpp	/^        int multicast_hops;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::options_t	.\src\options.cpp	/^zmq::options_t::options_t () :$/;"	f	class:zmq::options_t	signature:()
zmq::options_t::options_t	.\src\options.hpp	/^        options_t ();$/;"	p	struct:zmq::options_t	access:public	signature:()
zmq::options_t::rate	.\src\options.hpp	/^        int rate;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::rcvbuf	.\src\options.hpp	/^        int rcvbuf;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::rcvhwm	.\src\options.hpp	/^        int rcvhwm;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::rcvtimeo	.\src\options.hpp	/^        int rcvtimeo;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::reconnect_ivl	.\src\options.hpp	/^        int reconnect_ivl;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::reconnect_ivl_max	.\src\options.hpp	/^        int reconnect_ivl_max;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::recovery_ivl	.\src\options.hpp	/^        int recovery_ivl;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::recv_identity	.\src\options.hpp	/^        bool recv_identity;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::setsockopt	.\src\options.cpp	/^int zmq::options_t::setsockopt (int option_, const void *optval_,$/;"	f	class:zmq::options_t	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::options_t::setsockopt	.\src\options.hpp	/^        int setsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	struct:zmq::options_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::options_t::sndbuf	.\src\options.hpp	/^        int sndbuf;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::sndhwm	.\src\options.hpp	/^        int sndhwm;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::sndtimeo	.\src\options.hpp	/^        int sndtimeo;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::socket_id	.\src\options.hpp	/^        int socket_id;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::tcp_accept_filters	.\src\options.hpp	/^        tcp_accept_filters_t tcp_accept_filters;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::tcp_accept_filters_t	.\src\options.hpp	/^        typedef std::vector <tcp_address_mask_t> tcp_accept_filters_t;$/;"	t	struct:zmq::options_t	access:public
zmq::options_t::tcp_keepalive	.\src\options.hpp	/^        int tcp_keepalive;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::tcp_keepalive_cnt	.\src\options.hpp	/^        int tcp_keepalive_cnt;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::tcp_keepalive_idle	.\src\options.hpp	/^        int tcp_keepalive_idle;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::tcp_keepalive_intvl	.\src\options.hpp	/^        int tcp_keepalive_intvl;$/;"	m	struct:zmq::options_t	access:public
zmq::options_t::type	.\src\options.hpp	/^        int type;$/;"	m	struct:zmq::options_t	access:public
zmq::out_batch_size	.\src\config.hpp	/^        out_batch_size = 8192,$/;"	e	enum:zmq::__anon32
zmq::own_t	.\src\own.hpp	/^    class own_t : public object_t$/;"	c	namespace:zmq	inherits:object_t
zmq::own_t::check_term_acks	.\src\own.cpp	/^void zmq::own_t::check_term_acks ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::check_term_acks	.\src\own.hpp	/^        void check_term_acks ();$/;"	p	class:zmq::own_t	access:private	signature:()
zmq::own_t::inc_seqnum	.\src\own.cpp	/^void zmq::own_t::inc_seqnum ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::inc_seqnum	.\src\own.hpp	/^        void inc_seqnum ();$/;"	p	class:zmq::own_t	access:public	signature:()
zmq::own_t::is_terminating	.\src\own.cpp	/^bool zmq::own_t::is_terminating ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::is_terminating	.\src\own.hpp	/^        bool is_terminating ();$/;"	p	class:zmq::own_t	access:protected	signature:()
zmq::own_t::launch_child	.\src\own.cpp	/^void zmq::own_t::launch_child (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
zmq::own_t::launch_child	.\src\own.hpp	/^        void launch_child (own_t *object_);$/;"	p	class:zmq::own_t	access:protected	signature:(own_t *object_)
zmq::own_t::operator =	.\src\own.hpp	/^        const own_t &operator = (const own_t&);$/;"	p	class:zmq::own_t	access:private	signature:(const own_t&)
zmq::own_t::options	.\src\own.hpp	/^        options_t options;$/;"	m	class:zmq::own_t	access:protected
zmq::own_t::own_t	.\src\own.cpp	/^zmq::own_t::own_t (class ctx_t *parent_, uint32_t tid_) :$/;"	f	class:zmq::own_t	signature:(class ctx_t *parent_, uint32_t tid_)
zmq::own_t::own_t	.\src\own.cpp	/^zmq::own_t::own_t (io_thread_t *io_thread_, const options_t &options_) :$/;"	f	class:zmq::own_t	signature:(io_thread_t *io_thread_, const options_t &options_)
zmq::own_t::own_t	.\src\own.hpp	/^        own_t (const own_t&);$/;"	p	class:zmq::own_t	access:private	signature:(const own_t&)
zmq::own_t::own_t	.\src\own.hpp	/^        own_t (zmq::ctx_t *parent_, uint32_t tid_);$/;"	p	class:zmq::own_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_)
zmq::own_t::own_t	.\src\own.hpp	/^        own_t (zmq::io_thread_t *io_thread_, const options_t &options_);$/;"	p	class:zmq::own_t	access:public	signature:(zmq::io_thread_t *io_thread_, const options_t &options_)
zmq::own_t::owned	.\src\own.hpp	/^        owned_t owned;$/;"	m	class:zmq::own_t	access:private
zmq::own_t::owned_t	.\src\own.hpp	/^        typedef std::set <own_t*> owned_t;$/;"	t	class:zmq::own_t	access:private
zmq::own_t::owner	.\src\own.hpp	/^        own_t *owner;$/;"	m	class:zmq::own_t	access:private
zmq::own_t::process_destroy	.\src\own.cpp	/^void zmq::own_t::process_destroy ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::process_destroy	.\src\own.hpp	/^        virtual void process_destroy ();$/;"	p	class:zmq::own_t	access:protected	signature:()
zmq::own_t::process_own	.\src\own.cpp	/^void zmq::own_t::process_own (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
zmq::own_t::process_own	.\src\own.hpp	/^        void process_own (own_t *object_);$/;"	p	class:zmq::own_t	access:private	signature:(own_t *object_)
zmq::own_t::process_seqnum	.\src\own.cpp	/^void zmq::own_t::process_seqnum ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::process_seqnum	.\src\own.hpp	/^        void process_seqnum ();$/;"	p	class:zmq::own_t	access:private	signature:()
zmq::own_t::process_term	.\src\own.cpp	/^void zmq::own_t::process_term (int linger_)$/;"	f	class:zmq::own_t	signature:(int linger_)
zmq::own_t::process_term	.\src\own.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::own_t	access:protected	signature:(int linger_)
zmq::own_t::process_term_ack	.\src\own.cpp	/^void zmq::own_t::process_term_ack ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::process_term_ack	.\src\own.hpp	/^        void process_term_ack ();$/;"	p	class:zmq::own_t	access:private	signature:()
zmq::own_t::process_term_req	.\src\own.cpp	/^void zmq::own_t::process_term_req (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
zmq::own_t::process_term_req	.\src\own.hpp	/^        void process_term_req (own_t *object_);$/;"	p	class:zmq::own_t	access:private	signature:(own_t *object_)
zmq::own_t::processed_seqnum	.\src\own.hpp	/^        uint64_t processed_seqnum;$/;"	m	class:zmq::own_t	access:private
zmq::own_t::register_term_acks	.\src\own.cpp	/^void zmq::own_t::register_term_acks (int count_)$/;"	f	class:zmq::own_t	signature:(int count_)
zmq::own_t::register_term_acks	.\src\own.hpp	/^        void register_term_acks (int count_);$/;"	p	class:zmq::own_t	access:public	signature:(int count_)
zmq::own_t::sent_seqnum	.\src\own.hpp	/^        atomic_counter_t sent_seqnum;$/;"	m	class:zmq::own_t	access:private
zmq::own_t::set_owner	.\src\own.cpp	/^void zmq::own_t::set_owner (own_t *owner_)$/;"	f	class:zmq::own_t	signature:(own_t *owner_)
zmq::own_t::set_owner	.\src\own.hpp	/^        void set_owner (own_t *owner_);$/;"	p	class:zmq::own_t	access:private	signature:(own_t *owner_)
zmq::own_t::term_acks	.\src\own.hpp	/^        int term_acks;$/;"	m	class:zmq::own_t	access:private
zmq::own_t::term_child	.\src\own.cpp	/^void zmq::own_t::term_child (own_t *object_)$/;"	f	class:zmq::own_t	signature:(own_t *object_)
zmq::own_t::term_child	.\src\own.hpp	/^        void term_child (own_t *object_);$/;"	p	class:zmq::own_t	access:protected	signature:(own_t *object_)
zmq::own_t::terminate	.\src\own.cpp	/^void zmq::own_t::terminate ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::terminate	.\src\own.hpp	/^        void terminate ();$/;"	p	class:zmq::own_t	access:protected	signature:()
zmq::own_t::terminating	.\src\own.hpp	/^        bool terminating;$/;"	m	class:zmq::own_t	access:private
zmq::own_t::unregister_term_ack	.\src\own.cpp	/^void zmq::own_t::unregister_term_ack ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::unregister_term_ack	.\src\own.hpp	/^        void unregister_term_ack ();$/;"	p	class:zmq::own_t	access:public	signature:()
zmq::own_t::~own_t	.\src\own.cpp	/^zmq::own_t::~own_t ()$/;"	f	class:zmq::own_t	signature:()
zmq::own_t::~own_t	.\src\own.hpp	/^        virtual ~own_t ();$/;"	p	class:zmq::own_t	access:protected	signature:()
zmq::pair_session_t	.\src\pair.hpp	/^    class pair_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
zmq::pair_session_t::operator =	.\src\pair.hpp	/^        const pair_session_t &operator = (const pair_session_t&);$/;"	p	class:zmq::pair_session_t	access:private	signature:(const pair_session_t&)
zmq::pair_session_t::pair_session_t	.\src\pair.cpp	/^zmq::pair_session_t::pair_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::pair_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::pair_session_t::pair_session_t	.\src\pair.hpp	/^        pair_session_t (const pair_session_t&);$/;"	p	class:zmq::pair_session_t	access:private	signature:(const pair_session_t&)
zmq::pair_session_t::pair_session_t	.\src\pair.hpp	/^        pair_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::pair_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::pair_session_t::~pair_session_t	.\src\pair.cpp	/^zmq::pair_session_t::~pair_session_t ()$/;"	f	class:zmq::pair_session_t	signature:()
zmq::pair_session_t::~pair_session_t	.\src\pair.hpp	/^        ~pair_session_t ();$/;"	p	class:zmq::pair_session_t	access:public	signature:()
zmq::pair_t	.\src\pair.hpp	/^    class pair_t :$/;"	c	namespace:zmq	inherits:socket_base_t
zmq::pair_t::operator =	.\src\pair.hpp	/^        const pair_t &operator = (const pair_t&);$/;"	p	class:zmq::pair_t	access:private	signature:(const pair_t&)
zmq::pair_t::pair_t	.\src\pair.cpp	/^zmq::pair_t::pair_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::pair_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::pair_t::pair_t	.\src\pair.hpp	/^        pair_t (const pair_t&);$/;"	p	class:zmq::pair_t	access:private	signature:(const pair_t&)
zmq::pair_t::pair_t	.\src\pair.hpp	/^        pair_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
zmq::pair_t::pipe	.\src\pair.hpp	/^        zmq::pipe_t *pipe;$/;"	m	class:zmq::pair_t	access:private
zmq::pair_t::xattach_pipe	.\src\pair.cpp	/^void zmq::pair_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::pair_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::pair_t::xattach_pipe	.\src\pair.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
zmq::pair_t::xhas_in	.\src\pair.cpp	/^bool zmq::pair_t::xhas_in ()$/;"	f	class:zmq::pair_t	signature:()
zmq::pair_t::xhas_in	.\src\pair.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::pair_t	access:public	signature:()
zmq::pair_t::xhas_out	.\src\pair.cpp	/^bool zmq::pair_t::xhas_out ()$/;"	f	class:zmq::pair_t	signature:()
zmq::pair_t::xhas_out	.\src\pair.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::pair_t	access:public	signature:()
zmq::pair_t::xread_activated	.\src\pair.cpp	/^void zmq::pair_t::xread_activated (pipe_t *)$/;"	f	class:zmq::pair_t	signature:(pipe_t *)
zmq::pair_t::xread_activated	.\src\pair.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::pair_t::xrecv	.\src\pair.cpp	/^int zmq::pair_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::pair_t	signature:(msg_t *msg_, int flags_)
zmq::pair_t::xrecv	.\src\pair.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::pair_t::xsend	.\src\pair.cpp	/^int zmq::pair_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::pair_t	signature:(msg_t *msg_, int flags_)
zmq::pair_t::xsend	.\src\pair.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::pair_t::xterminated	.\src\pair.cpp	/^void zmq::pair_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::pair_t	signature:(pipe_t *pipe_)
zmq::pair_t::xterminated	.\src\pair.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::pair_t::xwrite_activated	.\src\pair.cpp	/^void zmq::pair_t::xwrite_activated (pipe_t *)$/;"	f	class:zmq::pair_t	signature:(pipe_t *)
zmq::pair_t::xwrite_activated	.\src\pair.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pair_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::pair_t::~pair_t	.\src\pair.cpp	/^zmq::pair_t::~pair_t ()$/;"	f	class:zmq::pair_t	signature:()
zmq::pair_t::~pair_t	.\src\pair.hpp	/^        ~pair_t ();$/;"	p	class:zmq::pair_t	access:public	signature:()
zmq::pgm_max_tpdu	.\src\config.hpp	/^        pgm_max_tpdu = 1500,$/;"	e	enum:zmq::__anon32
zmq::pgm_receiver_t	.\src\pgm_receiver.hpp	/^    class pgm_receiver_t : public io_object_t, public i_engine$/;"	c	namespace:zmq	inherits:io_object_t,i_engine
zmq::pgm_receiver_t::activate_in	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::activate_in ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
zmq::pgm_receiver_t::activate_in	.\src\pgm_receiver.hpp	/^        void activate_in ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
zmq::pgm_receiver_t::activate_out	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::activate_out ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
zmq::pgm_receiver_t::activate_out	.\src\pgm_receiver.hpp	/^        void activate_out ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
zmq::pgm_receiver_t::drop_subscriptions	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::drop_subscriptions ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
zmq::pgm_receiver_t::drop_subscriptions	.\src\pgm_receiver.hpp	/^        void drop_subscriptions ();$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:()
zmq::pgm_receiver_t::has_rx_timer	.\src\pgm_receiver.hpp	/^        bool has_rx_timer;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::in_event	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::in_event ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
zmq::pgm_receiver_t::in_event	.\src\pgm_receiver.hpp	/^        void in_event ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
zmq::pgm_receiver_t::init	.\src\pgm_receiver.cpp	/^int zmq::pgm_receiver_t::init (bool udp_encapsulation_, const char *network_)$/;"	f	class:zmq::pgm_receiver_t	signature:(bool udp_encapsulation_, const char *network_)
zmq::pgm_receiver_t::init	.\src\pgm_receiver.hpp	/^        int init (bool udp_encapsulation_, const char *network_);$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(bool udp_encapsulation_, const char *network_)
zmq::pgm_receiver_t::mru_decoder	.\src\pgm_receiver.hpp	/^        decoder_t *mru_decoder;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::operator =	.\src\pgm_receiver.hpp	/^        const pgm_receiver_t &operator = (const pgm_receiver_t&);$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:(const pgm_receiver_t&)
zmq::pgm_receiver_t::options	.\src\pgm_receiver.hpp	/^        options_t options;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::peer_info_t	.\src\pgm_receiver.hpp	/^        struct peer_info_t$/;"	s	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::peer_info_t::decoder	.\src\pgm_receiver.hpp	/^            decoder_t *decoder;$/;"	m	struct:zmq::pgm_receiver_t::peer_info_t	access:public
zmq::pgm_receiver_t::peer_info_t::joined	.\src\pgm_receiver.hpp	/^            bool joined;$/;"	m	struct:zmq::pgm_receiver_t::peer_info_t	access:public
zmq::pgm_receiver_t::peers	.\src\pgm_receiver.hpp	/^        peers_t peers;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::peers_t	.\src\pgm_receiver.hpp	/^        typedef std::map <pgm_tsi_t, peer_info_t, tsi_comp> peers_t;$/;"	t	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::pending_bytes	.\src\pgm_receiver.hpp	/^        size_t pending_bytes;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::pending_ptr	.\src\pgm_receiver.hpp	/^        unsigned char *pending_ptr;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::pgm_receiver_t	.\src\pgm_receiver.cpp	/^zmq::pgm_receiver_t::pgm_receiver_t (class io_thread_t *parent_, $/;"	f	class:zmq::pgm_receiver_t	signature:(class io_thread_t *parent_, const options_t &options_)
zmq::pgm_receiver_t::pgm_receiver_t	.\src\pgm_receiver.hpp	/^        pgm_receiver_t (const pgm_receiver_t&);$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:(const pgm_receiver_t&)
zmq::pgm_receiver_t::pgm_receiver_t	.\src\pgm_receiver.hpp	/^        pgm_receiver_t (zmq::io_thread_t *parent_, const options_t &options_);$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(zmq::io_thread_t *parent_, const options_t &options_)
zmq::pgm_receiver_t::pgm_socket	.\src\pgm_receiver.hpp	/^        pgm_socket_t pgm_socket;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::pipe_handle	.\src\pgm_receiver.hpp	/^        handle_t pipe_handle;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::plug	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::plug (io_thread_t *io_thread_,$/;"	f	class:zmq::pgm_receiver_t	signature:(io_thread_t *io_thread_, session_base_t *session_)
zmq::pgm_receiver_t::plug	.\src\pgm_receiver.hpp	/^        void plug (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_)
zmq::pgm_receiver_t::rx_timer_id	.\src\pgm_receiver.hpp	/^        enum {rx_timer_id = 0xa1};$/;"	e	enum:zmq::pgm_receiver_t::__anon44
zmq::pgm_receiver_t::session	.\src\pgm_receiver.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::socket_handle	.\src\pgm_receiver.hpp	/^        handle_t socket_handle;$/;"	m	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::terminate	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::terminate ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
zmq::pgm_receiver_t::terminate	.\src\pgm_receiver.hpp	/^        void terminate ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
zmq::pgm_receiver_t::timer_event	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::timer_event (int token)$/;"	f	class:zmq::pgm_receiver_t	signature:(int token)
zmq::pgm_receiver_t::timer_event	.\src\pgm_receiver.hpp	/^        void timer_event (int token);$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:(int token)
zmq::pgm_receiver_t::tsi_comp	.\src\pgm_receiver.hpp	/^        struct tsi_comp$/;"	s	class:zmq::pgm_receiver_t	access:private
zmq::pgm_receiver_t::tsi_comp::operator ()	.\src\pgm_receiver.hpp	/^            bool operator () (const pgm_tsi_t &ltsi,$/;"	f	struct:zmq::pgm_receiver_t::tsi_comp	access:public	signature:(const pgm_tsi_t &ltsi, const pgm_tsi_t &rtsi) const
zmq::pgm_receiver_t::unplug	.\src\pgm_receiver.cpp	/^void zmq::pgm_receiver_t::unplug ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
zmq::pgm_receiver_t::unplug	.\src\pgm_receiver.hpp	/^        void unplug ();$/;"	p	class:zmq::pgm_receiver_t	access:private	signature:()
zmq::pgm_receiver_t::~pgm_receiver_t	.\src\pgm_receiver.cpp	/^zmq::pgm_receiver_t::~pgm_receiver_t ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
zmq::pgm_receiver_t::~pgm_receiver_t	.\src\pgm_receiver.hpp	/^        ~pgm_receiver_t ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
zmq::pgm_sender_t	.\src\pgm_sender.hpp	/^    class pgm_sender_t : public io_object_t, public i_engine$/;"	c	namespace:zmq	inherits:io_object_t,i_engine
zmq::pgm_sender_t::activate_in	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::activate_in ()$/;"	f	class:zmq::pgm_sender_t	signature:()
zmq::pgm_sender_t::activate_in	.\src\pgm_sender.hpp	/^        void activate_in ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
zmq::pgm_sender_t::activate_out	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::activate_out ()$/;"	f	class:zmq::pgm_sender_t	signature:()
zmq::pgm_sender_t::activate_out	.\src\pgm_sender.hpp	/^        void activate_out ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
zmq::pgm_sender_t::encoder	.\src\pgm_sender.hpp	/^        encoder_t encoder;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::handle	.\src\pgm_sender.hpp	/^        handle_t handle;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::has_rx_timer	.\src\pgm_sender.hpp	/^        bool has_rx_timer;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::has_tx_timer	.\src\pgm_sender.hpp	/^        bool has_tx_timer;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::in_event	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::in_event ()$/;"	f	class:zmq::pgm_sender_t	signature:()
zmq::pgm_sender_t::in_event	.\src\pgm_sender.hpp	/^        void in_event ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
zmq::pgm_sender_t::init	.\src\pgm_sender.cpp	/^int zmq::pgm_sender_t::init (bool udp_encapsulation_, const char *network_)$/;"	f	class:zmq::pgm_sender_t	signature:(bool udp_encapsulation_, const char *network_)
zmq::pgm_sender_t::init	.\src\pgm_sender.hpp	/^        int init (bool udp_encapsulation_, const char *network_);$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(bool udp_encapsulation_, const char *network_)
zmq::pgm_sender_t::operator =	.\src\pgm_sender.hpp	/^        const pgm_sender_t &operator = (const pgm_sender_t&);$/;"	p	class:zmq::pgm_sender_t	access:private	signature:(const pgm_sender_t&)
zmq::pgm_sender_t::options	.\src\pgm_sender.hpp	/^        options_t options;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::out_buffer	.\src\pgm_sender.hpp	/^        unsigned char *out_buffer;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::out_buffer_size	.\src\pgm_sender.hpp	/^        size_t out_buffer_size;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::out_event	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::out_event ()$/;"	f	class:zmq::pgm_sender_t	signature:()
zmq::pgm_sender_t::out_event	.\src\pgm_sender.hpp	/^        void out_event ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
zmq::pgm_sender_t::pending_notify_handle	.\src\pgm_sender.hpp	/^        handle_t pending_notify_handle;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::pgm_sender_t	.\src\pgm_sender.cpp	/^zmq::pgm_sender_t::pgm_sender_t (io_thread_t *parent_, $/;"	f	class:zmq::pgm_sender_t	signature:(io_thread_t *parent_, const options_t &options_)
zmq::pgm_sender_t::pgm_sender_t	.\src\pgm_sender.hpp	/^        pgm_sender_t (const pgm_sender_t&);$/;"	p	class:zmq::pgm_sender_t	access:private	signature:(const pgm_sender_t&)
zmq::pgm_sender_t::pgm_sender_t	.\src\pgm_sender.hpp	/^        pgm_sender_t (zmq::io_thread_t *parent_, const options_t &options_);$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(zmq::io_thread_t *parent_, const options_t &options_)
zmq::pgm_sender_t::pgm_socket	.\src\pgm_sender.hpp	/^        pgm_socket_t pgm_socket;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::plug	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::plug (io_thread_t *io_thread_, session_base_t *session_)$/;"	f	class:zmq::pgm_sender_t	signature:(io_thread_t *io_thread_, session_base_t *session_)
zmq::pgm_sender_t::plug	.\src\pgm_sender.hpp	/^        void plug (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_)
zmq::pgm_sender_t::rdata_notify_handle	.\src\pgm_sender.hpp	/^        handle_t rdata_notify_handle;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::rx_timer_id	.\src\pgm_sender.hpp	/^        enum {tx_timer_id = 0xa0, rx_timer_id = 0xa1};$/;"	e	enum:zmq::pgm_sender_t::__anon45
zmq::pgm_sender_t::terminate	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::terminate ()$/;"	f	class:zmq::pgm_sender_t	signature:()
zmq::pgm_sender_t::terminate	.\src\pgm_sender.hpp	/^        void terminate ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
zmq::pgm_sender_t::timer_event	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::timer_event (int token)$/;"	f	class:zmq::pgm_sender_t	signature:(int token)
zmq::pgm_sender_t::timer_event	.\src\pgm_sender.hpp	/^        void timer_event (int token);$/;"	p	class:zmq::pgm_sender_t	access:public	signature:(int token)
zmq::pgm_sender_t::tx_timer_id	.\src\pgm_sender.hpp	/^        enum {tx_timer_id = 0xa0, rx_timer_id = 0xa1};$/;"	e	enum:zmq::pgm_sender_t::__anon45
zmq::pgm_sender_t::unplug	.\src\pgm_sender.cpp	/^void zmq::pgm_sender_t::unplug ()$/;"	f	class:zmq::pgm_sender_t	signature:()
zmq::pgm_sender_t::unplug	.\src\pgm_sender.hpp	/^        void unplug ();$/;"	p	class:zmq::pgm_sender_t	access:private	signature:()
zmq::pgm_sender_t::uplink_handle	.\src\pgm_sender.hpp	/^        handle_t uplink_handle;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::write_size	.\src\pgm_sender.hpp	/^        size_t write_size;$/;"	m	class:zmq::pgm_sender_t	access:private
zmq::pgm_sender_t::~pgm_sender_t	.\src\pgm_sender.cpp	/^zmq::pgm_sender_t::~pgm_sender_t ()$/;"	f	class:zmq::pgm_sender_t	signature:()
zmq::pgm_sender_t::~pgm_sender_t	.\src\pgm_sender.hpp	/^        ~pgm_sender_t ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
zmq::pgm_socket_t	.\src\pgm_socket.hpp	/^    class pgm_socket_t$/;"	c	namespace:zmq
zmq::pgm_socket_t::compute_sqns	.\src\pgm_socket.cpp	/^int zmq::pgm_socket_t::compute_sqns (int tpdu_)$/;"	f	class:zmq::pgm_socket_t	signature:(int tpdu_)
zmq::pgm_socket_t::compute_sqns	.\src\pgm_socket.hpp	/^        int compute_sqns (int tpdu_);$/;"	p	class:zmq::pgm_socket_t	access:private	signature:(int tpdu_)
zmq::pgm_socket_t::get_max_tsdu_size	.\src\pgm_socket.cpp	/^size_t zmq::pgm_socket_t::get_max_tsdu_size ()$/;"	f	class:zmq::pgm_socket_t	signature:()
zmq::pgm_socket_t::get_max_tsdu_size	.\src\pgm_socket.hpp	/^        size_t get_max_tsdu_size ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
zmq::pgm_socket_t::get_receiver_fds	.\src\pgm_socket.cpp	/^void zmq::pgm_socket_t::get_receiver_fds (fd_t *receive_fd_, $/;"	f	class:zmq::pgm_socket_t	signature:(fd_t *receive_fd_, fd_t *waiting_pipe_fd_)
zmq::pgm_socket_t::get_receiver_fds	.\src\pgm_socket.hpp	/^        void get_receiver_fds (fd_t *receive_fd_, fd_t *waiting_pipe_fd_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(fd_t *receive_fd_, fd_t *waiting_pipe_fd_)
zmq::pgm_socket_t::get_rx_timeout	.\src\pgm_socket.cpp	/^long zmq::pgm_socket_t::get_rx_timeout ()$/;"	f	class:zmq::pgm_socket_t	signature:()
zmq::pgm_socket_t::get_rx_timeout	.\src\pgm_socket.hpp	/^        long get_rx_timeout ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
zmq::pgm_socket_t::get_sender_fds	.\src\pgm_socket.cpp	/^void zmq::pgm_socket_t::get_sender_fds (fd_t *send_fd_, fd_t *receive_fd_, $/;"	f	class:zmq::pgm_socket_t	signature:(fd_t *send_fd_, fd_t *receive_fd_, fd_t *rdata_notify_fd_, fd_t *pending_notify_fd_)
zmq::pgm_socket_t::get_sender_fds	.\src\pgm_socket.hpp	/^        void get_sender_fds (fd_t *send_fd_, fd_t *receive_fd_,$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(fd_t *send_fd_, fd_t *receive_fd_, fd_t *rdata_notify_fd_, fd_t *pending_notify_fd_)
zmq::pgm_socket_t::get_tx_timeout	.\src\pgm_socket.cpp	/^long zmq::pgm_socket_t::get_tx_timeout ()$/;"	f	class:zmq::pgm_socket_t	signature:()
zmq::pgm_socket_t::get_tx_timeout	.\src\pgm_socket.hpp	/^        long get_tx_timeout ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
zmq::pgm_socket_t::init	.\src\pgm_socket.cpp	/^int zmq::pgm_socket_t::init (bool udp_encapsulation_, const char *network_)$/;"	f	class:zmq::pgm_socket_t	signature:(bool udp_encapsulation_, const char *network_)
zmq::pgm_socket_t::init	.\src\pgm_socket.hpp	/^        int init (bool udp_encapsulation_, const char *network_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(bool udp_encapsulation_, const char *network_)
zmq::pgm_socket_t::init_address	.\src\pgm_socket.cpp	/^int zmq::pgm_socket_t::init_address (const char *network_,$/;"	f	class:zmq::pgm_socket_t	signature:(const char *network_, struct pgm_addrinfo_t **res, uint16_t *port_number)
zmq::pgm_socket_t::init_address	.\src\pgm_socket.hpp	/^        static int init_address(const char *network_, struct pgm_addrinfo_t **addr, uint16_t *port_number);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(const char *network_, struct pgm_addrinfo_t **addr, uint16_t *port_number)
zmq::pgm_socket_t::last_rx_status	.\src\pgm_socket.hpp	/^        int last_rx_status, last_tx_status;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::last_tx_status	.\src\pgm_socket.hpp	/^        int last_rx_status, last_tx_status;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::nbytes_processed	.\src\pgm_socket.hpp	/^        size_t nbytes_processed;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::nbytes_rec	.\src\pgm_socket.hpp	/^        size_t nbytes_rec;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::options	.\src\pgm_socket.hpp	/^        options_t options;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::pgm_msgv	.\src\pgm_socket.hpp	/^        pgm_msgv_t *pgm_msgv;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::pgm_msgv_len	.\src\pgm_socket.hpp	/^        size_t pgm_msgv_len;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::pgm_msgv_processed	.\src\pgm_socket.hpp	/^        size_t pgm_msgv_processed;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::pgm_socket_t	.\src\pgm_socket.cpp	/^zmq::pgm_socket_t::pgm_socket_t (bool receiver_, const options_t &options_) :$/;"	f	class:zmq::pgm_socket_t	signature:(bool receiver_, const options_t &options_)
zmq::pgm_socket_t::pgm_socket_t	.\src\pgm_socket.hpp	/^        pgm_socket_t (bool receiver_, const options_t &options_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(bool receiver_, const options_t &options_)
zmq::pgm_socket_t::process_upstream	.\src\pgm_socket.cpp	/^void zmq::pgm_socket_t::process_upstream ()$/;"	f	class:zmq::pgm_socket_t	signature:()
zmq::pgm_socket_t::process_upstream	.\src\pgm_socket.hpp	/^        void process_upstream ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
zmq::pgm_socket_t::receive	.\src\pgm_socket.cpp	/^ssize_t zmq::pgm_socket_t::receive (void **raw_data_, const pgm_tsi_t **tsi_)$/;"	f	class:zmq::pgm_socket_t	signature:(void **raw_data_, const pgm_tsi_t **tsi_)
zmq::pgm_socket_t::receive	.\src\pgm_socket.hpp	/^        ssize_t receive (void **data_, const pgm_tsi_t **tsi_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(void **data_, const pgm_tsi_t **tsi_)
zmq::pgm_socket_t::receiver	.\src\pgm_socket.hpp	/^        bool receiver;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::send	.\src\pgm_socket.cpp	/^size_t zmq::pgm_socket_t::send (unsigned char *data_, size_t data_len_)$/;"	f	class:zmq::pgm_socket_t	signature:(unsigned char *data_, size_t data_len_)
zmq::pgm_socket_t::send	.\src\pgm_socket.hpp	/^        size_t send (unsigned char *data_, size_t data_len_);$/;"	p	class:zmq::pgm_socket_t	access:public	signature:(unsigned char *data_, size_t data_len_)
zmq::pgm_socket_t::sock	.\src\pgm_socket.hpp	/^        pgm_sock_t* sock;$/;"	m	class:zmq::pgm_socket_t	access:private
zmq::pgm_socket_t::~pgm_socket_t	.\src\pgm_socket.cpp	/^zmq::pgm_socket_t::~pgm_socket_t ()$/;"	f	class:zmq::pgm_socket_t	signature:()
zmq::pgm_socket_t::~pgm_socket_t	.\src\pgm_socket.hpp	/^        ~pgm_socket_t ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
zmq::pipe_t	.\src\pipe.hpp	/^    class pipe_t :$/;"	c	namespace:zmq	inherits:object_t,array_item_t,array_item_t,array_item_t
zmq::pipe_t::active	.\src\pipe.hpp	/^            active,$/;"	e	enum:zmq::pipe_t::__anon46
zmq::pipe_t::check_read	.\src\pipe.cpp	/^bool zmq::pipe_t::check_read ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::check_read	.\src\pipe.hpp	/^        bool check_read ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
zmq::pipe_t::check_write	.\src\pipe.cpp	/^bool zmq::pipe_t::check_write ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::check_write	.\src\pipe.hpp	/^        bool check_write ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
zmq::pipe_t::compute_lwm	.\src\pipe.cpp	/^int zmq::pipe_t::compute_lwm (int hwm_)$/;"	f	class:zmq::pipe_t	signature:(int hwm_)
zmq::pipe_t::compute_lwm	.\src\pipe.hpp	/^        static int compute_lwm (int hwm_);$/;"	p	class:zmq::pipe_t	access:private	signature:(int hwm_)
zmq::pipe_t::delay	.\src\pipe.hpp	/^        bool delay;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::delimit	.\src\pipe.cpp	/^void zmq::pipe_t::delimit ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::delimit	.\src\pipe.hpp	/^        void delimit ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
zmq::pipe_t::delimited	.\src\pipe.hpp	/^            delimited,$/;"	e	enum:zmq::pipe_t::__anon46
zmq::pipe_t::double_terminated	.\src\pipe.hpp	/^            double_terminated$/;"	e	enum:zmq::pipe_t::__anon46
zmq::pipe_t::flush	.\src\pipe.cpp	/^void zmq::pipe_t::flush ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::flush	.\src\pipe.hpp	/^        void flush ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
zmq::pipe_t::get_identity	.\src\pipe.cpp	/^zmq::blob_t zmq::pipe_t::get_identity ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::get_identity	.\src\pipe.hpp	/^        blob_t get_identity ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
zmq::pipe_t::hiccup	.\src\pipe.cpp	/^void zmq::pipe_t::hiccup ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::hiccup	.\src\pipe.hpp	/^        void hiccup ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
zmq::pipe_t::hwm	.\src\pipe.hpp	/^        int hwm;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::identity	.\src\pipe.hpp	/^        blob_t identity;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::in_active	.\src\pipe.hpp	/^        bool in_active;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::inpipe	.\src\pipe.hpp	/^        upipe_t *inpipe;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::is_delimiter	.\src\pipe.cpp	/^bool zmq::pipe_t::is_delimiter (msg_t &msg_)$/;"	f	class:zmq::pipe_t	signature:(msg_t &msg_)
zmq::pipe_t::is_delimiter	.\src\pipe.hpp	/^        static bool is_delimiter (msg_t &msg_);$/;"	p	class:zmq::pipe_t	access:private	signature:(msg_t &msg_)
zmq::pipe_t::lwm	.\src\pipe.hpp	/^        int lwm;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::msgs_read	.\src\pipe.hpp	/^        uint64_t msgs_read;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::msgs_written	.\src\pipe.hpp	/^        uint64_t msgs_written;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::operator =	.\src\pipe.hpp	/^        const pipe_t &operator = (const pipe_t&);$/;"	p	class:zmq::pipe_t	access:private	signature:(const pipe_t&)
zmq::pipe_t::out_active	.\src\pipe.hpp	/^        bool out_active;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::outpipe	.\src\pipe.hpp	/^        upipe_t *outpipe;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::peer	.\src\pipe.hpp	/^        pipe_t *peer;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::peers_msgs_read	.\src\pipe.hpp	/^        uint64_t peers_msgs_read;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::pending	.\src\pipe.hpp	/^            pending,$/;"	e	enum:zmq::pipe_t::__anon46
zmq::pipe_t::pipe_t	.\src\pipe.cpp	/^zmq::pipe_t::pipe_t (object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_,$/;"	f	class:zmq::pipe_t	signature:(object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_, int inhwm_, int outhwm_, bool delay_)
zmq::pipe_t::pipe_t	.\src\pipe.hpp	/^        pipe_t (const pipe_t&);$/;"	p	class:zmq::pipe_t	access:private	signature:(const pipe_t&)
zmq::pipe_t::pipe_t	.\src\pipe.hpp	/^        pipe_t (object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_,$/;"	p	class:zmq::pipe_t	access:private	signature:(object_t *parent_, upipe_t *inpipe_, upipe_t *outpipe_, int inhwm_, int outhwm_, bool delay_)
zmq::pipe_t::pipepair	.\src\pipe.hpp	/^        friend int pipepair (zmq::object_t *parents_ [2],$/;"	p	class:zmq::pipe_t	access:friend	signature:(zmq::object_t *parents_ [2], zmq::pipe_t* pipes_ [2], int hwms_ [2], bool delays_ [2])
zmq::pipe_t::process_activate_read	.\src\pipe.cpp	/^void zmq::pipe_t::process_activate_read ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::process_activate_read	.\src\pipe.hpp	/^        void process_activate_read ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
zmq::pipe_t::process_activate_write	.\src\pipe.cpp	/^void zmq::pipe_t::process_activate_write (uint64_t msgs_read_)$/;"	f	class:zmq::pipe_t	signature:(uint64_t msgs_read_)
zmq::pipe_t::process_activate_write	.\src\pipe.hpp	/^        void process_activate_write (uint64_t msgs_read_);$/;"	p	class:zmq::pipe_t	access:private	signature:(uint64_t msgs_read_)
zmq::pipe_t::process_hiccup	.\src\pipe.cpp	/^void zmq::pipe_t::process_hiccup (void *pipe_)$/;"	f	class:zmq::pipe_t	signature:(void *pipe_)
zmq::pipe_t::process_hiccup	.\src\pipe.hpp	/^        void process_hiccup (void *pipe_);$/;"	p	class:zmq::pipe_t	access:private	signature:(void *pipe_)
zmq::pipe_t::process_pipe_term	.\src\pipe.cpp	/^void zmq::pipe_t::process_pipe_term ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::process_pipe_term	.\src\pipe.hpp	/^        void process_pipe_term ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
zmq::pipe_t::process_pipe_term_ack	.\src\pipe.cpp	/^void zmq::pipe_t::process_pipe_term_ack ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::process_pipe_term_ack	.\src\pipe.hpp	/^        void process_pipe_term_ack ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
zmq::pipe_t::read	.\src\pipe.cpp	/^bool zmq::pipe_t::read (msg_t *msg_)$/;"	f	class:zmq::pipe_t	signature:(msg_t *msg_)
zmq::pipe_t::read	.\src\pipe.hpp	/^        bool read (msg_t *msg_);$/;"	p	class:zmq::pipe_t	access:public	signature:(msg_t *msg_)
zmq::pipe_t::rollback	.\src\pipe.cpp	/^void zmq::pipe_t::rollback ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::rollback	.\src\pipe.hpp	/^        void rollback ();$/;"	p	class:zmq::pipe_t	access:public	signature:()
zmq::pipe_t::set_event_sink	.\src\pipe.cpp	/^void zmq::pipe_t::set_event_sink (i_pipe_events *sink_)$/;"	f	class:zmq::pipe_t	signature:(i_pipe_events *sink_)
zmq::pipe_t::set_event_sink	.\src\pipe.hpp	/^        void set_event_sink (i_pipe_events *sink_);$/;"	p	class:zmq::pipe_t	access:public	signature:(i_pipe_events *sink_)
zmq::pipe_t::set_identity	.\src\pipe.cpp	/^void zmq::pipe_t::set_identity (const blob_t &identity_)$/;"	f	class:zmq::pipe_t	signature:(const blob_t &identity_)
zmq::pipe_t::set_identity	.\src\pipe.hpp	/^        void set_identity (const blob_t &identity_);$/;"	p	class:zmq::pipe_t	access:public	signature:(const blob_t &identity_)
zmq::pipe_t::set_peer	.\src\pipe.cpp	/^void zmq::pipe_t::set_peer (pipe_t *peer_)$/;"	f	class:zmq::pipe_t	signature:(pipe_t *peer_)
zmq::pipe_t::set_peer	.\src\pipe.hpp	/^        void set_peer (pipe_t *pipe_);$/;"	p	class:zmq::pipe_t	access:private	signature:(pipe_t *pipe_)
zmq::pipe_t::sink	.\src\pipe.hpp	/^        i_pipe_events *sink;$/;"	m	class:zmq::pipe_t	access:private
zmq::pipe_t::state	.\src\pipe.hpp	/^        } state;$/;"	m	class:zmq::pipe_t	typeref:enum:zmq::pipe_t::__anon46	access:private
zmq::pipe_t::terminate	.\src\pipe.cpp	/^void zmq::pipe_t::terminate (bool delay_)$/;"	f	class:zmq::pipe_t	signature:(bool delay_)
zmq::pipe_t::terminate	.\src\pipe.hpp	/^        void terminate (bool delay_);$/;"	p	class:zmq::pipe_t	access:public	signature:(bool delay_)
zmq::pipe_t::terminated	.\src\pipe.hpp	/^            terminated,$/;"	e	enum:zmq::pipe_t::__anon46
zmq::pipe_t::terminating	.\src\pipe.hpp	/^            terminating,$/;"	e	enum:zmq::pipe_t::__anon46
zmq::pipe_t::upipe_t	.\src\pipe.hpp	/^        typedef ypipe_t <msg_t, message_pipe_granularity> upipe_t;$/;"	t	class:zmq::pipe_t	access:private
zmq::pipe_t::write	.\src\pipe.cpp	/^bool zmq::pipe_t::write (msg_t *msg_)$/;"	f	class:zmq::pipe_t	signature:(msg_t *msg_)
zmq::pipe_t::write	.\src\pipe.hpp	/^        bool write (msg_t *msg_);$/;"	p	class:zmq::pipe_t	access:public	signature:(msg_t *msg_)
zmq::pipe_t::~pipe_t	.\src\pipe.cpp	/^zmq::pipe_t::~pipe_t ()$/;"	f	class:zmq::pipe_t	signature:()
zmq::pipe_t::~pipe_t	.\src\pipe.hpp	/^        ~pipe_t ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
zmq::pipepair	.\src\pipe.cpp	/^int zmq::pipepair (class object_t *parents_ [2], class pipe_t* pipes_ [2],$/;"	f	class:zmq	signature:(class object_t *parents_ [2], class pipe_t* pipes_ [2], int hwms_ [2], bool delays_ [2])
zmq::pipepair	.\src\pipe.hpp	/^    int pipepair (zmq::object_t *parents_ [2], zmq::pipe_t* pipes_ [2],$/;"	p	namespace:zmq	signature:(zmq::object_t *parents_ [2], zmq::pipe_t* pipes_ [2], int hwms_ [2], bool delays_ [2])
zmq::poll_t	.\src\poll.hpp	/^    class poll_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
zmq::poll_t::add_fd	.\src\poll.cpp	/^zmq::poll_t::handle_t zmq::poll_t::add_fd (fd_t fd_, i_poll_events *events_)$/;"	f	class:zmq::poll_t	signature:(fd_t fd_, i_poll_events *events_)
zmq::poll_t::add_fd	.\src\poll.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::poll_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
zmq::poll_t::fd_entry_t	.\src\poll.hpp	/^        struct fd_entry_t$/;"	s	class:zmq::poll_t	access:private
zmq::poll_t::fd_entry_t::events	.\src\poll.hpp	/^            zmq::i_poll_events *events;$/;"	m	struct:zmq::poll_t::fd_entry_t	access:public
zmq::poll_t::fd_entry_t::index	.\src\poll.hpp	/^            fd_t index;$/;"	m	struct:zmq::poll_t::fd_entry_t	access:public
zmq::poll_t::fd_table	.\src\poll.hpp	/^        fd_table_t fd_table;$/;"	m	class:zmq::poll_t	access:private
zmq::poll_t::fd_table_t	.\src\poll.hpp	/^        typedef std::vector <fd_entry_t> fd_table_t;$/;"	t	class:zmq::poll_t	access:private
zmq::poll_t::handle_t	.\src\poll.hpp	/^        typedef fd_t handle_t;$/;"	t	class:zmq::poll_t	access:public
zmq::poll_t::loop	.\src\poll.cpp	/^void zmq::poll_t::loop ()$/;"	f	class:zmq::poll_t	signature:()
zmq::poll_t::loop	.\src\poll.hpp	/^        void loop ();$/;"	p	class:zmq::poll_t	access:private	signature:()
zmq::poll_t::operator =	.\src\poll.hpp	/^        const poll_t &operator = (const poll_t&);$/;"	p	class:zmq::poll_t	access:private	signature:(const poll_t&)
zmq::poll_t::poll_t	.\src\poll.cpp	/^zmq::poll_t::poll_t () :$/;"	f	class:zmq::poll_t	signature:()
zmq::poll_t::poll_t	.\src\poll.hpp	/^        poll_t ();$/;"	p	class:zmq::poll_t	access:public	signature:()
zmq::poll_t::poll_t	.\src\poll.hpp	/^        poll_t (const poll_t&);$/;"	p	class:zmq::poll_t	access:private	signature:(const poll_t&)
zmq::poll_t::pollset	.\src\poll.hpp	/^        pollset_t pollset;$/;"	m	class:zmq::poll_t	access:private
zmq::poll_t::pollset_t	.\src\poll.hpp	/^        typedef std::vector <pollfd> pollset_t;$/;"	t	class:zmq::poll_t	access:private
zmq::poll_t::reset_pollin	.\src\poll.cpp	/^void zmq::poll_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
zmq::poll_t::reset_pollin	.\src\poll.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
zmq::poll_t::reset_pollout	.\src\poll.cpp	/^void zmq::poll_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
zmq::poll_t::reset_pollout	.\src\poll.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
zmq::poll_t::retired	.\src\poll.hpp	/^        bool retired;$/;"	m	class:zmq::poll_t	access:private
zmq::poll_t::rm_fd	.\src\poll.cpp	/^void zmq::poll_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
zmq::poll_t::rm_fd	.\src\poll.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
zmq::poll_t::set_pollin	.\src\poll.cpp	/^void zmq::poll_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
zmq::poll_t::set_pollin	.\src\poll.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
zmq::poll_t::set_pollout	.\src\poll.cpp	/^void zmq::poll_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::poll_t	signature:(handle_t handle_)
zmq::poll_t::set_pollout	.\src\poll.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::poll_t	access:public	signature:(handle_t handle_)
zmq::poll_t::start	.\src\poll.cpp	/^void zmq::poll_t::start ()$/;"	f	class:zmq::poll_t	signature:()
zmq::poll_t::start	.\src\poll.hpp	/^        void start ();$/;"	p	class:zmq::poll_t	access:public	signature:()
zmq::poll_t::stop	.\src\poll.cpp	/^void zmq::poll_t::stop ()$/;"	f	class:zmq::poll_t	signature:()
zmq::poll_t::stop	.\src\poll.hpp	/^        void stop ();$/;"	p	class:zmq::poll_t	access:public	signature:()
zmq::poll_t::stopping	.\src\poll.hpp	/^        bool stopping;$/;"	m	class:zmq::poll_t	access:private
zmq::poll_t::worker	.\src\poll.hpp	/^        thread_t worker;$/;"	m	class:zmq::poll_t	access:private
zmq::poll_t::worker_routine	.\src\poll.cpp	/^void zmq::poll_t::worker_routine (void *arg_)$/;"	f	class:zmq::poll_t	signature:(void *arg_)
zmq::poll_t::worker_routine	.\src\poll.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::poll_t	access:private	signature:(void *arg_)
zmq::poll_t::~poll_t	.\src\poll.cpp	/^zmq::poll_t::~poll_t ()$/;"	f	class:zmq::poll_t	signature:()
zmq::poll_t::~poll_t	.\src\poll.hpp	/^        ~poll_t ();$/;"	p	class:zmq::poll_t	access:public	signature:()
zmq::poller_base_t	.\src\poller_base.hpp	/^    class poller_base_t$/;"	c	namespace:zmq
zmq::poller_base_t::add_timer	.\src\poller_base.cpp	/^void zmq::poller_base_t::add_timer (int timeout_, i_poll_events *sink_, int id_)$/;"	f	class:zmq::poller_base_t	signature:(int timeout_, i_poll_events *sink_, int id_)
zmq::poller_base_t::add_timer	.\src\poller_base.hpp	/^        void add_timer (int timeout_, zmq::i_poll_events *sink_, int id_);$/;"	p	class:zmq::poller_base_t	access:public	signature:(int timeout_, zmq::i_poll_events *sink_, int id_)
zmq::poller_base_t::adjust_load	.\src\poller_base.cpp	/^void zmq::poller_base_t::adjust_load (int amount_)$/;"	f	class:zmq::poller_base_t	signature:(int amount_)
zmq::poller_base_t::adjust_load	.\src\poller_base.hpp	/^        void adjust_load (int amount_);$/;"	p	class:zmq::poller_base_t	access:protected	signature:(int amount_)
zmq::poller_base_t::cancel_timer	.\src\poller_base.cpp	/^void zmq::poller_base_t::cancel_timer (i_poll_events *sink_, int id_)$/;"	f	class:zmq::poller_base_t	signature:(i_poll_events *sink_, int id_)
zmq::poller_base_t::cancel_timer	.\src\poller_base.hpp	/^        void cancel_timer (zmq::i_poll_events *sink_, int id_);$/;"	p	class:zmq::poller_base_t	access:public	signature:(zmq::i_poll_events *sink_, int id_)
zmq::poller_base_t::clock	.\src\poller_base.hpp	/^        clock_t clock;$/;"	m	class:zmq::poller_base_t	access:private
zmq::poller_base_t::execute_timers	.\src\poller_base.cpp	/^uint64_t zmq::poller_base_t::execute_timers ()$/;"	f	class:zmq::poller_base_t	signature:()
zmq::poller_base_t::execute_timers	.\src\poller_base.hpp	/^        uint64_t execute_timers ();$/;"	p	class:zmq::poller_base_t	access:protected	signature:()
zmq::poller_base_t::get_load	.\src\poller_base.cpp	/^int zmq::poller_base_t::get_load ()$/;"	f	class:zmq::poller_base_t	signature:()
zmq::poller_base_t::get_load	.\src\poller_base.hpp	/^        int get_load ();$/;"	p	class:zmq::poller_base_t	access:public	signature:()
zmq::poller_base_t::load	.\src\poller_base.hpp	/^        atomic_counter_t load;$/;"	m	class:zmq::poller_base_t	access:private
zmq::poller_base_t::operator =	.\src\poller_base.hpp	/^        const poller_base_t &operator = (const poller_base_t&);$/;"	p	class:zmq::poller_base_t	access:private	signature:(const poller_base_t&)
zmq::poller_base_t::poller_base_t	.\src\poller_base.cpp	/^zmq::poller_base_t::poller_base_t ()$/;"	f	class:zmq::poller_base_t	signature:()
zmq::poller_base_t::poller_base_t	.\src\poller_base.hpp	/^        poller_base_t ();$/;"	p	class:zmq::poller_base_t	access:public	signature:()
zmq::poller_base_t::poller_base_t	.\src\poller_base.hpp	/^        poller_base_t (const poller_base_t&);$/;"	p	class:zmq::poller_base_t	access:private	signature:(const poller_base_t&)
zmq::poller_base_t::timer_info_t	.\src\poller_base.hpp	/^        struct timer_info_t$/;"	s	class:zmq::poller_base_t	access:private
zmq::poller_base_t::timer_info_t::id	.\src\poller_base.hpp	/^            int id;$/;"	m	struct:zmq::poller_base_t::timer_info_t	access:public
zmq::poller_base_t::timer_info_t::sink	.\src\poller_base.hpp	/^            zmq::i_poll_events *sink;$/;"	m	struct:zmq::poller_base_t::timer_info_t	access:public
zmq::poller_base_t::timers	.\src\poller_base.hpp	/^        timers_t timers;$/;"	m	class:zmq::poller_base_t	access:private
zmq::poller_base_t::timers_t	.\src\poller_base.hpp	/^        typedef std::multimap <uint64_t, timer_info_t> timers_t;$/;"	t	class:zmq::poller_base_t	access:private
zmq::poller_base_t::~poller_base_t	.\src\poller_base.cpp	/^zmq::poller_base_t::~poller_base_t ()$/;"	f	class:zmq::poller_base_t	signature:()
zmq::poller_base_t::~poller_base_t	.\src\poller_base.hpp	/^        virtual ~poller_base_t ();$/;"	p	class:zmq::poller_base_t	access:public	signature:()
zmq::poller_t	.\src\devpoll.hpp	/^    typedef devpoll_t poller_t;$/;"	t	namespace:zmq
zmq::poller_t	.\src\epoll.hpp	/^    typedef epoll_t poller_t;$/;"	t	namespace:zmq
zmq::poller_t	.\src\kqueue.hpp	/^    typedef kqueue_t poller_t;$/;"	t	namespace:zmq
zmq::poller_t	.\src\poll.hpp	/^    typedef poll_t poller_t;$/;"	t	namespace:zmq
zmq::poller_t	.\src\select.hpp	/^    typedef select_t poller_t;$/;"	t	namespace:zmq
zmq::proxy	.\src\proxy.cpp	/^int zmq::proxy ($/;"	f	class:zmq	signature:( class socket_base_t *frontend_, class socket_base_t *backend_, class socket_base_t *capture_)
zmq::proxy	.\src\proxy.hpp	/^    int proxy ($/;"	p	namespace:zmq	signature:( class socket_base_t *frontend_, class socket_base_t *backend_, class socket_base_t *control_)
zmq::pub_session_t	.\src\pub.hpp	/^    class pub_session_t : public xpub_session_t$/;"	c	namespace:zmq	inherits:xpub_session_t
zmq::pub_session_t::operator =	.\src\pub.hpp	/^        const pub_session_t &operator = (const pub_session_t&);$/;"	p	class:zmq::pub_session_t	access:private	signature:(const pub_session_t&)
zmq::pub_session_t::pub_session_t	.\src\pub.cpp	/^zmq::pub_session_t::pub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::pub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::pub_session_t::pub_session_t	.\src\pub.hpp	/^        pub_session_t (const pub_session_t&);$/;"	p	class:zmq::pub_session_t	access:private	signature:(const pub_session_t&)
zmq::pub_session_t::pub_session_t	.\src\pub.hpp	/^        pub_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::pub_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::pub_session_t::~pub_session_t	.\src\pub.cpp	/^zmq::pub_session_t::~pub_session_t ()$/;"	f	class:zmq::pub_session_t	signature:()
zmq::pub_session_t::~pub_session_t	.\src\pub.hpp	/^        ~pub_session_t ();$/;"	p	class:zmq::pub_session_t	access:public	signature:()
zmq::pub_t	.\src\pub.hpp	/^    class pub_t : public xpub_t$/;"	c	namespace:zmq	inherits:xpub_t
zmq::pub_t::operator =	.\src\pub.hpp	/^        const pub_t &operator = (const pub_t&);$/;"	p	class:zmq::pub_t	access:private	signature:(const pub_t&)
zmq::pub_t::pub_t	.\src\pub.cpp	/^zmq::pub_t::pub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::pub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::pub_t::pub_t	.\src\pub.hpp	/^        pub_t (const pub_t&);$/;"	p	class:zmq::pub_t	access:private	signature:(const pub_t&)
zmq::pub_t::pub_t	.\src\pub.hpp	/^        pub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::pub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::pub_t::xhas_in	.\src\pub.cpp	/^bool zmq::pub_t::xhas_in ()$/;"	f	class:zmq::pub_t	signature:()
zmq::pub_t::xhas_in	.\src\pub.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::pub_t	access:public	signature:()
zmq::pub_t::xrecv	.\src\pub.cpp	/^int zmq::pub_t::xrecv (class msg_t *, int)$/;"	f	class:zmq::pub_t	signature:(class msg_t *, int)
zmq::pub_t::xrecv	.\src\pub.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pub_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::pub_t::~pub_t	.\src\pub.cpp	/^zmq::pub_t::~pub_t ()$/;"	f	class:zmq::pub_t	signature:()
zmq::pub_t::~pub_t	.\src\pub.hpp	/^        ~pub_t ();$/;"	p	class:zmq::pub_t	access:public	signature:()
zmq::pull_session_t	.\src\pull.hpp	/^    class pull_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
zmq::pull_session_t::operator =	.\src\pull.hpp	/^        const pull_session_t &operator = (const pull_session_t&);$/;"	p	class:zmq::pull_session_t	access:private	signature:(const pull_session_t&)
zmq::pull_session_t::pull_session_t	.\src\pull.cpp	/^zmq::pull_session_t::pull_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::pull_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::pull_session_t::pull_session_t	.\src\pull.hpp	/^        pull_session_t (const pull_session_t&);$/;"	p	class:zmq::pull_session_t	access:private	signature:(const pull_session_t&)
zmq::pull_session_t::pull_session_t	.\src\pull.hpp	/^        pull_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::pull_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::pull_session_t::~pull_session_t	.\src\pull.cpp	/^zmq::pull_session_t::~pull_session_t ()$/;"	f	class:zmq::pull_session_t	signature:()
zmq::pull_session_t::~pull_session_t	.\src\pull.hpp	/^        ~pull_session_t ();$/;"	p	class:zmq::pull_session_t	access:public	signature:()
zmq::pull_t	.\src\pull.hpp	/^    class pull_t :$/;"	c	namespace:zmq	inherits:socket_base_t
zmq::pull_t::fq	.\src\pull.hpp	/^        fq_t fq;$/;"	m	class:zmq::pull_t	access:private
zmq::pull_t::operator =	.\src\pull.hpp	/^        const pull_t &operator = (const pull_t&);$/;"	p	class:zmq::pull_t	access:private	signature:(const pull_t&)
zmq::pull_t::pull_t	.\src\pull.cpp	/^zmq::pull_t::pull_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::pull_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::pull_t::pull_t	.\src\pull.hpp	/^        pull_t (const pull_t&);$/;"	p	class:zmq::pull_t	access:private	signature:(const pull_t&)
zmq::pull_t::pull_t	.\src\pull.hpp	/^        pull_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::pull_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::pull_t::xattach_pipe	.\src\pull.cpp	/^void zmq::pull_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::pull_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::pull_t::xattach_pipe	.\src\pull.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
zmq::pull_t::xhas_in	.\src\pull.cpp	/^bool zmq::pull_t::xhas_in ()$/;"	f	class:zmq::pull_t	signature:()
zmq::pull_t::xhas_in	.\src\pull.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::pull_t	access:protected	signature:()
zmq::pull_t::xread_activated	.\src\pull.cpp	/^void zmq::pull_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::pull_t	signature:(pipe_t *pipe_)
zmq::pull_t::xread_activated	.\src\pull.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::pull_t::xrecv	.\src\pull.cpp	/^int zmq::pull_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::pull_t	signature:(msg_t *msg_, int flags_)
zmq::pull_t::xrecv	.\src\pull.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::pull_t::xterminated	.\src\pull.cpp	/^void zmq::pull_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::pull_t	signature:(pipe_t *pipe_)
zmq::pull_t::xterminated	.\src\pull.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::pull_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::pull_t::~pull_t	.\src\pull.cpp	/^zmq::pull_t::~pull_t ()$/;"	f	class:zmq::pull_t	signature:()
zmq::pull_t::~pull_t	.\src\pull.hpp	/^        ~pull_t ();$/;"	p	class:zmq::pull_t	access:public	signature:()
zmq::push_session_t	.\src\push.hpp	/^    class push_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
zmq::push_session_t::operator =	.\src\push.hpp	/^        const push_session_t &operator = (const push_session_t&);$/;"	p	class:zmq::push_session_t	access:private	signature:(const push_session_t&)
zmq::push_session_t::push_session_t	.\src\push.cpp	/^zmq::push_session_t::push_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::push_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::push_session_t::push_session_t	.\src\push.hpp	/^        push_session_t (const push_session_t&);$/;"	p	class:zmq::push_session_t	access:private	signature:(const push_session_t&)
zmq::push_session_t::push_session_t	.\src\push.hpp	/^        push_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::push_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::push_session_t::~push_session_t	.\src\push.cpp	/^zmq::push_session_t::~push_session_t ()$/;"	f	class:zmq::push_session_t	signature:()
zmq::push_session_t::~push_session_t	.\src\push.hpp	/^        ~push_session_t ();$/;"	p	class:zmq::push_session_t	access:public	signature:()
zmq::push_t	.\src\push.hpp	/^    class push_t :$/;"	c	namespace:zmq	inherits:socket_base_t
zmq::push_t::lb	.\src\push.hpp	/^        lb_t lb;$/;"	m	class:zmq::push_t	access:private
zmq::push_t::operator =	.\src\push.hpp	/^        const push_t &operator = (const push_t&);$/;"	p	class:zmq::push_t	access:private	signature:(const push_t&)
zmq::push_t::push_t	.\src\push.cpp	/^zmq::push_t::push_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::push_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::push_t::push_t	.\src\push.hpp	/^        push_t (const push_t&);$/;"	p	class:zmq::push_t	access:private	signature:(const push_t&)
zmq::push_t::push_t	.\src\push.hpp	/^        push_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::push_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::push_t::xattach_pipe	.\src\push.cpp	/^void zmq::push_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::push_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::push_t::xattach_pipe	.\src\push.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
zmq::push_t::xhas_out	.\src\push.cpp	/^bool zmq::push_t::xhas_out ()$/;"	f	class:zmq::push_t	signature:()
zmq::push_t::xhas_out	.\src\push.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::push_t	access:protected	signature:()
zmq::push_t::xsend	.\src\push.cpp	/^int zmq::push_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::push_t	signature:(msg_t *msg_, int flags_)
zmq::push_t::xsend	.\src\push.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::push_t::xterminated	.\src\push.cpp	/^void zmq::push_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::push_t	signature:(pipe_t *pipe_)
zmq::push_t::xterminated	.\src\push.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::push_t::xwrite_activated	.\src\push.cpp	/^void zmq::push_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::push_t	signature:(pipe_t *pipe_)
zmq::push_t::xwrite_activated	.\src\push.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::push_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::push_t::~push_t	.\src\push.cpp	/^zmq::push_t::~push_t ()$/;"	f	class:zmq::push_t	signature:()
zmq::push_t::~push_t	.\src\push.hpp	/^        ~push_t ();$/;"	p	class:zmq::push_t	access:public	signature:()
zmq::put_uint16	.\src\wire.hpp	/^    inline void put_uint16 (unsigned char *buffer_, uint16_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint16_t value)
zmq::put_uint32	.\src\wire.hpp	/^    inline void put_uint32 (unsigned char *buffer_, uint32_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint32_t value)
zmq::put_uint64	.\src\wire.hpp	/^    inline void put_uint64 (unsigned char *buffer_, uint64_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint64_t value)
zmq::put_uint8	.\src\wire.hpp	/^    inline void put_uint8 (unsigned char *buffer_, uint8_t value)$/;"	f	namespace:zmq	signature:(unsigned char *buffer_, uint8_t value)
zmq::reaper_t	.\src\reaper.hpp	/^    class reaper_t : public object_t, public i_poll_events$/;"	c	namespace:zmq	inherits:object_t,i_poll_events
zmq::reaper_t::get_mailbox	.\src\reaper.cpp	/^zmq::mailbox_t *zmq::reaper_t::get_mailbox ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::get_mailbox	.\src\reaper.hpp	/^        mailbox_t *get_mailbox ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
zmq::reaper_t::in_event	.\src\reaper.cpp	/^void zmq::reaper_t::in_event ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::in_event	.\src\reaper.hpp	/^        void in_event ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
zmq::reaper_t::mailbox	.\src\reaper.hpp	/^        mailbox_t mailbox;$/;"	m	class:zmq::reaper_t	access:private
zmq::reaper_t::mailbox_handle	.\src\reaper.hpp	/^        poller_t::handle_t mailbox_handle;$/;"	m	class:zmq::reaper_t	access:private
zmq::reaper_t::operator =	.\src\reaper.hpp	/^        const reaper_t &operator = (const reaper_t&);$/;"	p	class:zmq::reaper_t	access:private	signature:(const reaper_t&)
zmq::reaper_t::out_event	.\src\reaper.cpp	/^void zmq::reaper_t::out_event ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::out_event	.\src\reaper.hpp	/^        void out_event ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
zmq::reaper_t::poller	.\src\reaper.hpp	/^        poller_t *poller;$/;"	m	class:zmq::reaper_t	access:private
zmq::reaper_t::process_reap	.\src\reaper.cpp	/^void zmq::reaper_t::process_reap (socket_base_t *socket_)$/;"	f	class:zmq::reaper_t	signature:(socket_base_t *socket_)
zmq::reaper_t::process_reap	.\src\reaper.hpp	/^        void process_reap (zmq::socket_base_t *socket_);$/;"	p	class:zmq::reaper_t	access:private	signature:(zmq::socket_base_t *socket_)
zmq::reaper_t::process_reaped	.\src\reaper.cpp	/^void zmq::reaper_t::process_reaped ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::process_reaped	.\src\reaper.hpp	/^        void process_reaped ();$/;"	p	class:zmq::reaper_t	access:private	signature:()
zmq::reaper_t::process_stop	.\src\reaper.cpp	/^void zmq::reaper_t::process_stop ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::process_stop	.\src\reaper.hpp	/^        void process_stop ();$/;"	p	class:zmq::reaper_t	access:private	signature:()
zmq::reaper_t::reaper_t	.\src\reaper.cpp	/^zmq::reaper_t::reaper_t (class ctx_t *ctx_, uint32_t tid_) :$/;"	f	class:zmq::reaper_t	signature:(class ctx_t *ctx_, uint32_t tid_)
zmq::reaper_t::reaper_t	.\src\reaper.hpp	/^        reaper_t (const reaper_t&);$/;"	p	class:zmq::reaper_t	access:private	signature:(const reaper_t&)
zmq::reaper_t::reaper_t	.\src\reaper.hpp	/^        reaper_t (zmq::ctx_t *ctx_, uint32_t tid_);$/;"	p	class:zmq::reaper_t	access:public	signature:(zmq::ctx_t *ctx_, uint32_t tid_)
zmq::reaper_t::sockets	.\src\reaper.hpp	/^        int sockets;$/;"	m	class:zmq::reaper_t	access:private
zmq::reaper_t::start	.\src\reaper.cpp	/^void zmq::reaper_t::start ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::start	.\src\reaper.hpp	/^        void start ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
zmq::reaper_t::stop	.\src\reaper.cpp	/^void zmq::reaper_t::stop ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::stop	.\src\reaper.hpp	/^        void stop ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
zmq::reaper_t::terminating	.\src\reaper.hpp	/^        bool terminating;$/;"	m	class:zmq::reaper_t	access:private
zmq::reaper_t::timer_event	.\src\reaper.cpp	/^void zmq::reaper_t::timer_event (int)$/;"	f	class:zmq::reaper_t	signature:(int)
zmq::reaper_t::timer_event	.\src\reaper.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::reaper_t	access:public	signature:(int id_)
zmq::reaper_t::~reaper_t	.\src\reaper.cpp	/^zmq::reaper_t::~reaper_t ()$/;"	f	class:zmq::reaper_t	signature:()
zmq::reaper_t::~reaper_t	.\src\reaper.hpp	/^        ~reaper_t ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
zmq::rep_session_t	.\src\rep.hpp	/^    class rep_session_t : public router_session_t$/;"	c	namespace:zmq	inherits:router_session_t
zmq::rep_session_t::operator =	.\src\rep.hpp	/^        const rep_session_t &operator = (const rep_session_t&);$/;"	p	class:zmq::rep_session_t	access:private	signature:(const rep_session_t&)
zmq::rep_session_t::rep_session_t	.\src\rep.cpp	/^zmq::rep_session_t::rep_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::rep_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::rep_session_t::rep_session_t	.\src\rep.hpp	/^        rep_session_t (const rep_session_t&);$/;"	p	class:zmq::rep_session_t	access:private	signature:(const rep_session_t&)
zmq::rep_session_t::rep_session_t	.\src\rep.hpp	/^        rep_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::rep_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::rep_session_t::~rep_session_t	.\src\rep.cpp	/^zmq::rep_session_t::~rep_session_t ()$/;"	f	class:zmq::rep_session_t	signature:()
zmq::rep_session_t::~rep_session_t	.\src\rep.hpp	/^        ~rep_session_t ();$/;"	p	class:zmq::rep_session_t	access:public	signature:()
zmq::rep_t	.\src\rep.hpp	/^    class rep_t : public router_t$/;"	c	namespace:zmq	inherits:router_t
zmq::rep_t::operator =	.\src\rep.hpp	/^        const rep_t &operator = (const rep_t&);$/;"	p	class:zmq::rep_t	access:private	signature:(const rep_t&)
zmq::rep_t::rep_t	.\src\rep.cpp	/^zmq::rep_t::rep_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::rep_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::rep_t::rep_t	.\src\rep.hpp	/^        rep_t (const rep_t&);$/;"	p	class:zmq::rep_t	access:private	signature:(const rep_t&)
zmq::rep_t::rep_t	.\src\rep.hpp	/^        rep_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::rep_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
zmq::rep_t::request_begins	.\src\rep.hpp	/^        bool request_begins;$/;"	m	class:zmq::rep_t	access:private
zmq::rep_t::sending_reply	.\src\rep.hpp	/^        bool sending_reply;$/;"	m	class:zmq::rep_t	access:private
zmq::rep_t::xhas_in	.\src\rep.cpp	/^bool zmq::rep_t::xhas_in ()$/;"	f	class:zmq::rep_t	signature:()
zmq::rep_t::xhas_in	.\src\rep.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::rep_t	access:public	signature:()
zmq::rep_t::xhas_out	.\src\rep.cpp	/^bool zmq::rep_t::xhas_out ()$/;"	f	class:zmq::rep_t	signature:()
zmq::rep_t::xhas_out	.\src\rep.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::rep_t	access:public	signature:()
zmq::rep_t::xrecv	.\src\rep.cpp	/^int zmq::rep_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::rep_t	signature:(msg_t *msg_, int flags_)
zmq::rep_t::xrecv	.\src\rep.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::rep_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::rep_t::xsend	.\src\rep.cpp	/^int zmq::rep_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::rep_t	signature:(msg_t *msg_, int flags_)
zmq::rep_t::xsend	.\src\rep.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::rep_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::rep_t::~rep_t	.\src\rep.cpp	/^zmq::rep_t::~rep_t ()$/;"	f	class:zmq::rep_t	signature:()
zmq::rep_t::~rep_t	.\src\rep.hpp	/^        ~rep_t ();$/;"	p	class:zmq::rep_t	access:public	signature:()
zmq::req_session_t	.\src\req.hpp	/^    class req_session_t : public dealer_session_t$/;"	c	namespace:zmq	inherits:dealer_session_t
zmq::req_session_t::body	.\src\req.hpp	/^            body$/;"	e	enum:zmq::req_session_t::__anon47
zmq::req_session_t::bottom	.\src\req.hpp	/^            bottom,$/;"	e	enum:zmq::req_session_t::__anon47
zmq::req_session_t::identity	.\src\req.hpp	/^            identity,$/;"	e	enum:zmq::req_session_t::__anon47
zmq::req_session_t::operator =	.\src\req.hpp	/^        const req_session_t &operator = (const req_session_t&);$/;"	p	class:zmq::req_session_t	access:private	signature:(const req_session_t&)
zmq::req_session_t::push_msg	.\src\req.cpp	/^int zmq::req_session_t::push_msg (msg_t *msg_)$/;"	f	class:zmq::req_session_t	signature:(msg_t *msg_)
zmq::req_session_t::push_msg	.\src\req.hpp	/^        int push_msg (msg_t *msg_);$/;"	p	class:zmq::req_session_t	access:public	signature:(msg_t *msg_)
zmq::req_session_t::req_session_t	.\src\req.cpp	/^zmq::req_session_t::req_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::req_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::req_session_t::req_session_t	.\src\req.hpp	/^        req_session_t (const req_session_t&);$/;"	p	class:zmq::req_session_t	access:private	signature:(const req_session_t&)
zmq::req_session_t::req_session_t	.\src\req.hpp	/^        req_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::req_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::req_session_t::reset	.\src\req.cpp	/^void zmq::req_session_t::reset ()$/;"	f	class:zmq::req_session_t	signature:()
zmq::req_session_t::reset	.\src\req.hpp	/^        void reset ();$/;"	p	class:zmq::req_session_t	access:public	signature:()
zmq::req_session_t::state	.\src\req.hpp	/^        } state;$/;"	m	class:zmq::req_session_t	typeref:enum:zmq::req_session_t::__anon47	access:private
zmq::req_session_t::~req_session_t	.\src\req.cpp	/^zmq::req_session_t::~req_session_t ()$/;"	f	class:zmq::req_session_t	signature:()
zmq::req_session_t::~req_session_t	.\src\req.hpp	/^        ~req_session_t ();$/;"	p	class:zmq::req_session_t	access:public	signature:()
zmq::req_t	.\src\req.hpp	/^    class req_t : public dealer_t$/;"	c	namespace:zmq	inherits:dealer_t
zmq::req_t::message_begins	.\src\req.hpp	/^        bool message_begins;$/;"	m	class:zmq::req_t	access:private
zmq::req_t::operator =	.\src\req.hpp	/^        const req_t &operator = (const req_t&);$/;"	p	class:zmq::req_t	access:private	signature:(const req_t&)
zmq::req_t::receiving_reply	.\src\req.hpp	/^        bool receiving_reply;$/;"	m	class:zmq::req_t	access:private
zmq::req_t::req_t	.\src\req.cpp	/^zmq::req_t::req_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::req_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::req_t::req_t	.\src\req.hpp	/^        req_t (const req_t&);$/;"	p	class:zmq::req_t	access:private	signature:(const req_t&)
zmq::req_t::req_t	.\src\req.hpp	/^        req_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::req_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::req_t::xhas_in	.\src\req.cpp	/^bool zmq::req_t::xhas_in ()$/;"	f	class:zmq::req_t	signature:()
zmq::req_t::xhas_in	.\src\req.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::req_t	access:public	signature:()
zmq::req_t::xhas_out	.\src\req.cpp	/^bool zmq::req_t::xhas_out ()$/;"	f	class:zmq::req_t	signature:()
zmq::req_t::xhas_out	.\src\req.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::req_t	access:public	signature:()
zmq::req_t::xrecv	.\src\req.cpp	/^int zmq::req_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::req_t	signature:(msg_t *msg_, int flags_)
zmq::req_t::xrecv	.\src\req.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::req_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::req_t::xsend	.\src\req.cpp	/^int zmq::req_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::req_t	signature:(msg_t *msg_, int flags_)
zmq::req_t::xsend	.\src\req.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::req_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::req_t::~req_t	.\src\req.cpp	/^zmq::req_t::~req_t ()$/;"	f	class:zmq::req_t	signature:()
zmq::req_t::~req_t	.\src\req.hpp	/^        ~req_t ();$/;"	p	class:zmq::req_t	access:public	signature:()
zmq::retired_fd	.\src\fd.hpp	/^    enum {retired_fd = (fd_t)(~0)};$/;"	e	enum:zmq::__anon34
zmq::router_session_t	.\src\router.hpp	/^    class router_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
zmq::router_session_t::operator =	.\src\router.hpp	/^        const router_session_t &operator = (const router_session_t&);$/;"	p	class:zmq::router_session_t	access:private	signature:(const router_session_t&)
zmq::router_session_t::router_session_t	.\src\router.cpp	/^zmq::router_session_t::router_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::router_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::router_session_t::router_session_t	.\src\router.hpp	/^        router_session_t (const router_session_t&);$/;"	p	class:zmq::router_session_t	access:private	signature:(const router_session_t&)
zmq::router_session_t::router_session_t	.\src\router.hpp	/^        router_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::router_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::router_session_t::~router_session_t	.\src\router.cpp	/^zmq::router_session_t::~router_session_t ()$/;"	f	class:zmq::router_session_t	signature:()
zmq::router_session_t::~router_session_t	.\src\router.hpp	/^        ~router_session_t ();$/;"	p	class:zmq::router_session_t	access:public	signature:()
zmq::router_t	.\src\router.hpp	/^    class router_t :$/;"	c	namespace:zmq	inherits:socket_base_t
zmq::router_t::anonymous_pipes	.\src\router.hpp	/^        std::set <pipe_t*> anonymous_pipes;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::current_out	.\src\router.hpp	/^        zmq::pipe_t *current_out;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::fq	.\src\router.hpp	/^        fq_t fq;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::identify_peer	.\src\router.cpp	/^bool zmq::router_t::identify_peer (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
zmq::router_t::identify_peer	.\src\router.hpp	/^        bool identify_peer (pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:private	signature:(pipe_t *pipe_)
zmq::router_t::identity_sent	.\src\router.hpp	/^        bool identity_sent;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::mandatory	.\src\router.hpp	/^        bool mandatory;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::more_in	.\src\router.hpp	/^        bool more_in;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::more_out	.\src\router.hpp	/^        bool more_out;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::next_peer_id	.\src\router.hpp	/^        uint32_t next_peer_id;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::operator =	.\src\router.hpp	/^        const router_t &operator = (const router_t&);$/;"	p	class:zmq::router_t	access:private	signature:(const router_t&)
zmq::router_t::outpipe_t	.\src\router.hpp	/^        struct outpipe_t$/;"	s	class:zmq::router_t	access:private
zmq::router_t::outpipe_t::active	.\src\router.hpp	/^            bool active;$/;"	m	struct:zmq::router_t::outpipe_t	access:public
zmq::router_t::outpipe_t::pipe	.\src\router.hpp	/^            zmq::pipe_t *pipe;$/;"	m	struct:zmq::router_t::outpipe_t	access:public
zmq::router_t::outpipes	.\src\router.hpp	/^        outpipes_t outpipes;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::outpipes_t	.\src\router.hpp	/^        typedef std::map <blob_t, outpipe_t> outpipes_t;$/;"	t	class:zmq::router_t	access:private
zmq::router_t::prefetched	.\src\router.hpp	/^        bool prefetched;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::prefetched_id	.\src\router.hpp	/^        msg_t prefetched_id;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::prefetched_msg	.\src\router.hpp	/^        msg_t prefetched_msg;$/;"	m	class:zmq::router_t	access:private
zmq::router_t::rollback	.\src\router.cpp	/^int zmq::router_t::rollback (void)$/;"	f	class:zmq::router_t	signature:(void)
zmq::router_t::rollback	.\src\router.hpp	/^        int rollback ();$/;"	p	class:zmq::router_t	access:protected	signature:()
zmq::router_t::router_t	.\src\router.cpp	/^zmq::router_t::router_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::router_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::router_t::router_t	.\src\router.hpp	/^        router_t (const router_t&);$/;"	p	class:zmq::router_t	access:private	signature:(const router_t&)
zmq::router_t::router_t	.\src\router.hpp	/^        router_t (zmq::ctx_t *parent_, uint32_t tid_, int sid);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid)
zmq::router_t::xattach_pipe	.\src\router.cpp	/^void zmq::router_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::router_t::xattach_pipe	.\src\router.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
zmq::router_t::xhas_in	.\src\router.cpp	/^bool zmq::router_t::xhas_in ()$/;"	f	class:zmq::router_t	signature:()
zmq::router_t::xhas_in	.\src\router.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::router_t	access:public	signature:()
zmq::router_t::xhas_out	.\src\router.cpp	/^bool zmq::router_t::xhas_out ()$/;"	f	class:zmq::router_t	signature:()
zmq::router_t::xhas_out	.\src\router.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::router_t	access:public	signature:()
zmq::router_t::xread_activated	.\src\router.cpp	/^void zmq::router_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
zmq::router_t::xread_activated	.\src\router.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::router_t::xrecv	.\src\router.cpp	/^int zmq::router_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::router_t	signature:(msg_t *msg_, int flags_)
zmq::router_t::xrecv	.\src\router.hpp	/^        int xrecv (msg_t *msg_, int flags_);$/;"	p	class:zmq::router_t	access:public	signature:(msg_t *msg_, int flags_)
zmq::router_t::xsend	.\src\router.cpp	/^int zmq::router_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::router_t	signature:(msg_t *msg_, int flags_)
zmq::router_t::xsend	.\src\router.hpp	/^        int xsend (msg_t *msg_, int flags_);$/;"	p	class:zmq::router_t	access:public	signature:(msg_t *msg_, int flags_)
zmq::router_t::xsetsockopt	.\src\router.cpp	/^int zmq::router_t::xsetsockopt (int option_, const void *optval_,$/;"	f	class:zmq::router_t	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::router_t::xsetsockopt	.\src\router.hpp	/^        int xsetsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::router_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::router_t::xterminated	.\src\router.cpp	/^void zmq::router_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
zmq::router_t::xterminated	.\src\router.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::router_t::xwrite_activated	.\src\router.cpp	/^void zmq::router_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::router_t	signature:(pipe_t *pipe_)
zmq::router_t::xwrite_activated	.\src\router.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::router_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::router_t::~router_t	.\src\router.cpp	/^zmq::router_t::~router_t ()$/;"	f	class:zmq::router_t	signature:()
zmq::router_t::~router_t	.\src\router.hpp	/^        ~router_t ();$/;"	p	class:zmq::router_t	access:public	signature:()
zmq::seed_random	.\src\random.cpp	/^void zmq::seed_random ()$/;"	f	class:zmq	signature:()
zmq::seed_random	.\src\random.hpp	/^    void seed_random ();$/;"	p	namespace:zmq	signature:()
zmq::select_t	.\src\select.hpp	/^    class select_t : public poller_base_t$/;"	c	namespace:zmq	inherits:poller_base_t
zmq::select_t::add_fd	.\src\select.cpp	/^zmq::select_t::handle_t zmq::select_t::add_fd (fd_t fd_, i_poll_events *events_)$/;"	f	class:zmq::select_t	signature:(fd_t fd_, i_poll_events *events_)
zmq::select_t::add_fd	.\src\select.hpp	/^        handle_t add_fd (fd_t fd_, zmq::i_poll_events *events_);$/;"	p	class:zmq::select_t	access:public	signature:(fd_t fd_, zmq::i_poll_events *events_)
zmq::select_t::exceptfds	.\src\select.hpp	/^        fd_set exceptfds;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::fd_entry_t	.\src\select.hpp	/^        struct fd_entry_t$/;"	s	class:zmq::select_t	access:private
zmq::select_t::fd_entry_t::events	.\src\select.hpp	/^            zmq::i_poll_events *events;$/;"	m	struct:zmq::select_t::fd_entry_t	access:public
zmq::select_t::fd_entry_t::fd	.\src\select.hpp	/^            fd_t fd;$/;"	m	struct:zmq::select_t::fd_entry_t	access:public
zmq::select_t::fd_set_t	.\src\select.hpp	/^        typedef std::vector <fd_entry_t> fd_set_t;$/;"	t	class:zmq::select_t	access:private
zmq::select_t::fds	.\src\select.hpp	/^        fd_set_t fds;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::handle_t	.\src\select.hpp	/^        typedef fd_t handle_t;$/;"	t	class:zmq::select_t	access:public
zmq::select_t::is_retired_fd	.\src\select.cpp	/^bool zmq::select_t::is_retired_fd (const fd_entry_t &entry)$/;"	f	class:zmq::select_t	signature:(const fd_entry_t &entry)
zmq::select_t::is_retired_fd	.\src\select.hpp	/^        static bool is_retired_fd (const fd_entry_t &entry);$/;"	p	class:zmq::select_t	access:private	signature:(const fd_entry_t &entry)
zmq::select_t::loop	.\src\select.cpp	/^void zmq::select_t::loop ()$/;"	f	class:zmq::select_t	signature:()
zmq::select_t::loop	.\src\select.hpp	/^        void loop ();$/;"	p	class:zmq::select_t	access:private	signature:()
zmq::select_t::maxfd	.\src\select.hpp	/^        fd_t maxfd;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::operator =	.\src\select.hpp	/^        const select_t &operator = (const select_t&);$/;"	p	class:zmq::select_t	access:private	signature:(const select_t&)
zmq::select_t::readfds	.\src\select.hpp	/^        fd_set readfds;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::reset_pollin	.\src\select.cpp	/^void zmq::select_t::reset_pollin (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
zmq::select_t::reset_pollin	.\src\select.hpp	/^        void reset_pollin (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
zmq::select_t::reset_pollout	.\src\select.cpp	/^void zmq::select_t::reset_pollout (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
zmq::select_t::reset_pollout	.\src\select.hpp	/^        void reset_pollout (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
zmq::select_t::retired	.\src\select.hpp	/^        bool retired;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::rm_fd	.\src\select.cpp	/^void zmq::select_t::rm_fd (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
zmq::select_t::rm_fd	.\src\select.hpp	/^        void rm_fd (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
zmq::select_t::select_t	.\src\select.cpp	/^zmq::select_t::select_t () :$/;"	f	class:zmq::select_t	signature:()
zmq::select_t::select_t	.\src\select.hpp	/^        select_t ();$/;"	p	class:zmq::select_t	access:public	signature:()
zmq::select_t::select_t	.\src\select.hpp	/^        select_t (const select_t&);$/;"	p	class:zmq::select_t	access:private	signature:(const select_t&)
zmq::select_t::set_pollin	.\src\select.cpp	/^void zmq::select_t::set_pollin (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
zmq::select_t::set_pollin	.\src\select.hpp	/^        void set_pollin (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
zmq::select_t::set_pollout	.\src\select.cpp	/^void zmq::select_t::set_pollout (handle_t handle_)$/;"	f	class:zmq::select_t	signature:(handle_t handle_)
zmq::select_t::set_pollout	.\src\select.hpp	/^        void set_pollout (handle_t handle_);$/;"	p	class:zmq::select_t	access:public	signature:(handle_t handle_)
zmq::select_t::source_set_err	.\src\select.hpp	/^        fd_set source_set_err;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::source_set_in	.\src\select.hpp	/^        fd_set source_set_in;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::source_set_out	.\src\select.hpp	/^        fd_set source_set_out;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::start	.\src\select.cpp	/^void zmq::select_t::start ()$/;"	f	class:zmq::select_t	signature:()
zmq::select_t::start	.\src\select.hpp	/^        void start ();$/;"	p	class:zmq::select_t	access:public	signature:()
zmq::select_t::stop	.\src\select.cpp	/^void zmq::select_t::stop ()$/;"	f	class:zmq::select_t	signature:()
zmq::select_t::stop	.\src\select.hpp	/^        void stop ();$/;"	p	class:zmq::select_t	access:public	signature:()
zmq::select_t::stopping	.\src\select.hpp	/^        bool stopping;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::worker	.\src\select.hpp	/^        thread_t worker;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::worker_routine	.\src\select.cpp	/^void zmq::select_t::worker_routine (void *arg_)$/;"	f	class:zmq::select_t	signature:(void *arg_)
zmq::select_t::worker_routine	.\src\select.hpp	/^        static void worker_routine (void *arg_);$/;"	p	class:zmq::select_t	access:private	signature:(void *arg_)
zmq::select_t::writefds	.\src\select.hpp	/^        fd_set writefds;$/;"	m	class:zmq::select_t	access:private
zmq::select_t::~select_t	.\src\select.cpp	/^zmq::select_t::~select_t ()$/;"	f	class:zmq::select_t	signature:()
zmq::select_t::~select_t	.\src\select.hpp	/^        ~select_t ();$/;"	p	class:zmq::select_t	access:public	signature:()
zmq::session_base_t	.\src\session_base.hpp	/^    class session_base_t :$/;"	c	namespace:zmq	inherits:own_t,io_object_t,i_pipe_events,i_msg_source,i_msg_sink
zmq::session_base_t::addr	.\src\session_base.hpp	/^        const address_t *addr;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::attach_pipe	.\src\session_base.cpp	/^void zmq::session_base_t::attach_pipe (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
zmq::session_base_t::attach_pipe	.\src\session_base.hpp	/^        void attach_pipe (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::session_base_t::clean_pipes	.\src\session_base.cpp	/^void zmq::session_base_t::clean_pipes ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::clean_pipes	.\src\session_base.hpp	/^        void clean_pipes ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
zmq::session_base_t::connect	.\src\session_base.hpp	/^        bool connect;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::create	.\src\session_base.cpp	/^zmq::session_base_t *zmq::session_base_t::create (class io_thread_t *io_thread_,$/;"	f	class:zmq::session_base_t	signature:(class io_thread_t *io_thread_, bool connect_, class socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::session_base_t::create	.\src\session_base.hpp	/^        static session_base_t *create (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::session_base_t::detach	.\src\session_base.cpp	/^void zmq::session_base_t::detach ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::detach	.\src\session_base.hpp	/^        void detach ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
zmq::session_base_t::detached	.\src\session_base.cpp	/^void zmq::session_base_t::detached ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::detached	.\src\session_base.hpp	/^        void detached ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
zmq::session_base_t::engine	.\src\session_base.hpp	/^        zmq::i_engine *engine;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::flush	.\src\session_base.cpp	/^void zmq::session_base_t::flush ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::flush	.\src\session_base.hpp	/^        void flush ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
zmq::session_base_t::get_socket	.\src\session_base.cpp	/^zmq::socket_base_t *zmq::session_base_t::get_socket ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::get_socket	.\src\session_base.hpp	/^        socket_base_t *get_socket ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
zmq::session_base_t::has_linger_timer	.\src\session_base.hpp	/^        bool has_linger_timer;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::hiccuped	.\src\session_base.cpp	/^void zmq::session_base_t::hiccuped (pipe_t *)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *)
zmq::session_base_t::hiccuped	.\src\session_base.hpp	/^        void hiccuped (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::session_base_t::identity_received	.\src\session_base.hpp	/^        bool identity_received;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::identity_sent	.\src\session_base.hpp	/^        bool identity_sent;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::incomplete_in	.\src\session_base.hpp	/^        bool incomplete_in;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::io_thread	.\src\session_base.hpp	/^        zmq::io_thread_t *io_thread;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::linger_timer_id	.\src\session_base.hpp	/^        enum {linger_timer_id = 0x20};$/;"	e	enum:zmq::session_base_t::__anon48
zmq::session_base_t::operator =	.\src\session_base.hpp	/^        const session_base_t &operator = (const session_base_t&);$/;"	p	class:zmq::session_base_t	access:private	signature:(const session_base_t&)
zmq::session_base_t::pending	.\src\session_base.hpp	/^        bool pending;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::pipe	.\src\session_base.hpp	/^        zmq::pipe_t *pipe;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::proceed_with_term	.\src\session_base.cpp	/^void zmq::session_base_t::proceed_with_term ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::proceed_with_term	.\src\session_base.hpp	/^        void proceed_with_term ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
zmq::session_base_t::process_attach	.\src\session_base.cpp	/^void zmq::session_base_t::process_attach (i_engine *engine_)$/;"	f	class:zmq::session_base_t	signature:(i_engine *engine_)
zmq::session_base_t::process_attach	.\src\session_base.hpp	/^        void process_attach (zmq::i_engine *engine_);$/;"	p	class:zmq::session_base_t	access:private	signature:(zmq::i_engine *engine_)
zmq::session_base_t::process_plug	.\src\session_base.cpp	/^void zmq::session_base_t::process_plug ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::process_plug	.\src\session_base.hpp	/^        void process_plug ();$/;"	p	class:zmq::session_base_t	access:private	signature:()
zmq::session_base_t::process_term	.\src\session_base.cpp	/^void zmq::session_base_t::process_term (int linger_)$/;"	f	class:zmq::session_base_t	signature:(int linger_)
zmq::session_base_t::process_term	.\src\session_base.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::session_base_t	access:private	signature:(int linger_)
zmq::session_base_t::pull_msg	.\src\session_base.cpp	/^int zmq::session_base_t::pull_msg (msg_t *msg_)$/;"	f	class:zmq::session_base_t	signature:(msg_t *msg_)
zmq::session_base_t::pull_msg	.\src\session_base.hpp	/^        virtual int pull_msg (msg_t *msg_);$/;"	p	class:zmq::session_base_t	access:public	signature:(msg_t *msg_)
zmq::session_base_t::push_msg	.\src\session_base.cpp	/^int zmq::session_base_t::push_msg (msg_t *msg_)$/;"	f	class:zmq::session_base_t	signature:(msg_t *msg_)
zmq::session_base_t::push_msg	.\src\session_base.hpp	/^        virtual int push_msg (msg_t *msg_);$/;"	p	class:zmq::session_base_t	access:public	signature:(msg_t *msg_)
zmq::session_base_t::read_activated	.\src\session_base.cpp	/^void zmq::session_base_t::read_activated (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
zmq::session_base_t::read_activated	.\src\session_base.hpp	/^        void read_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::session_base_t::reset	.\src\session_base.cpp	/^void zmq::session_base_t::reset ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::reset	.\src\session_base.hpp	/^        virtual void reset ();$/;"	p	class:zmq::session_base_t	access:public	signature:()
zmq::session_base_t::session_base_t	.\src\session_base.cpp	/^zmq::session_base_t::session_base_t (class io_thread_t *io_thread_,$/;"	f	class:zmq::session_base_t	signature:(class io_thread_t *io_thread_, bool connect_, class socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::session_base_t::session_base_t	.\src\session_base.hpp	/^        session_base_t (const session_base_t&);$/;"	p	class:zmq::session_base_t	access:private	signature:(const session_base_t&)
zmq::session_base_t::session_base_t	.\src\session_base.hpp	/^        session_base_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::session_base_t	access:protected	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::session_base_t::socket	.\src\session_base.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::start_connecting	.\src\session_base.cpp	/^void zmq::session_base_t::start_connecting (bool wait_)$/;"	f	class:zmq::session_base_t	signature:(bool wait_)
zmq::session_base_t::start_connecting	.\src\session_base.hpp	/^        void start_connecting (bool wait_);$/;"	p	class:zmq::session_base_t	access:private	signature:(bool wait_)
zmq::session_base_t::terminated	.\src\session_base.cpp	/^void zmq::session_base_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
zmq::session_base_t::terminated	.\src\session_base.hpp	/^        void terminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::session_base_t::terminating_pipes	.\src\session_base.hpp	/^        std::set<pipe_t *> terminating_pipes;$/;"	m	class:zmq::session_base_t	access:private
zmq::session_base_t::timer_event	.\src\session_base.cpp	/^void zmq::session_base_t::timer_event (int id_)$/;"	f	class:zmq::session_base_t	signature:(int id_)
zmq::session_base_t::timer_event	.\src\session_base.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::session_base_t	access:private	signature:(int id_)
zmq::session_base_t::write_activated	.\src\session_base.cpp	/^void zmq::session_base_t::write_activated (pipe_t *pipe_)$/;"	f	class:zmq::session_base_t	signature:(pipe_t *pipe_)
zmq::session_base_t::write_activated	.\src\session_base.hpp	/^        void write_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::session_base_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::session_base_t::~session_base_t	.\src\session_base.cpp	/^zmq::session_base_t::~session_base_t ()$/;"	f	class:zmq::session_base_t	signature:()
zmq::session_base_t::~session_base_t	.\src\session_base.hpp	/^        virtual ~session_base_t ();$/;"	p	class:zmq::session_base_t	access:protected	signature:()
zmq::signaler_port	.\src\config.hpp	/^        signaler_port = 5905$/;"	e	enum:zmq::__anon32
zmq::signaler_t	.\src\signaler.hpp	/^    class signaler_t$/;"	c	namespace:zmq
zmq::signaler_t::get_fd	.\src\signaler.cpp	/^zmq::fd_t zmq::signaler_t::get_fd ()$/;"	f	class:zmq::signaler_t	signature:()
zmq::signaler_t::get_fd	.\src\signaler.hpp	/^        fd_t get_fd ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
zmq::signaler_t::make_fdpair	.\src\signaler.cpp	/^int zmq::signaler_t::make_fdpair (fd_t *r_, fd_t *w_)$/;"	f	class:zmq::signaler_t	signature:(fd_t *r_, fd_t *w_)
zmq::signaler_t::make_fdpair	.\src\signaler.hpp	/^        static int make_fdpair (fd_t *r_, fd_t *w_);$/;"	p	class:zmq::signaler_t	access:private	signature:(fd_t *r_, fd_t *w_)
zmq::signaler_t::operator =	.\src\signaler.hpp	/^        const signaler_t &operator = (const signaler_t&);$/;"	p	class:zmq::signaler_t	access:private	signature:(const signaler_t&)
zmq::signaler_t::r	.\src\signaler.hpp	/^        fd_t r;$/;"	m	class:zmq::signaler_t	access:private
zmq::signaler_t::recv	.\src\signaler.cpp	/^void zmq::signaler_t::recv ()$/;"	f	class:zmq::signaler_t	signature:()
zmq::signaler_t::recv	.\src\signaler.hpp	/^        void recv ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
zmq::signaler_t::send	.\src\signaler.cpp	/^void zmq::signaler_t::send ()$/;"	f	class:zmq::signaler_t	signature:()
zmq::signaler_t::send	.\src\signaler.hpp	/^        void send ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
zmq::signaler_t::signaler_t	.\src\signaler.cpp	/^zmq::signaler_t::signaler_t ()$/;"	f	class:zmq::signaler_t	signature:()
zmq::signaler_t::signaler_t	.\src\signaler.hpp	/^        signaler_t ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
zmq::signaler_t::signaler_t	.\src\signaler.hpp	/^        signaler_t (const signaler_t&);$/;"	p	class:zmq::signaler_t	access:private	signature:(const signaler_t&)
zmq::signaler_t::w	.\src\signaler.hpp	/^        fd_t w;$/;"	m	class:zmq::signaler_t	access:private
zmq::signaler_t::wait	.\src\signaler.cpp	/^int zmq::signaler_t::wait (int timeout_)$/;"	f	class:zmq::signaler_t	signature:(int timeout_)
zmq::signaler_t::wait	.\src\signaler.hpp	/^        int wait (int timeout_);$/;"	p	class:zmq::signaler_t	access:public	signature:(int timeout_)
zmq::signaler_t::~signaler_t	.\src\signaler.cpp	/^zmq::signaler_t::~signaler_t ()$/;"	f	class:zmq::signaler_t	signature:()
zmq::signaler_t::~signaler_t	.\src\signaler.hpp	/^        ~signaler_t ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
zmq::socket_base_t	.\src\socket_base.hpp	/^    class socket_base_t :$/;"	c	namespace:zmq	inherits:own_t,array_item_t,i_poll_events,i_pipe_events
zmq::socket_base_t::add_endpoint	.\src\socket_base.cpp	/^void zmq::socket_base_t::add_endpoint (const char *addr_, own_t *endpoint_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_, own_t *endpoint_)
zmq::socket_base_t::add_endpoint	.\src\socket_base.hpp	/^        void add_endpoint (const char *addr_, own_t *endpoint_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const char *addr_, own_t *endpoint_)
zmq::socket_base_t::attach_pipe	.\src\socket_base.cpp	/^void zmq::socket_base_t::attach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::socket_base_t::attach_pipe	.\src\socket_base.hpp	/^        void attach_pipe (zmq::pipe_t *pipe_, bool icanhasall_ = false);$/;"	p	class:zmq::socket_base_t	access:private	signature:(zmq::pipe_t *pipe_, bool icanhasall_ = false)
zmq::socket_base_t::bind	.\src\socket_base.cpp	/^int zmq::socket_base_t::bind (const char *addr_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_)
zmq::socket_base_t::bind	.\src\socket_base.hpp	/^        int bind (const char *addr_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *addr_)
zmq::socket_base_t::check_destroy	.\src\socket_base.cpp	/^void zmq::socket_base_t::check_destroy ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::check_destroy	.\src\socket_base.hpp	/^        void check_destroy ();$/;"	p	class:zmq::socket_base_t	access:private	signature:()
zmq::socket_base_t::check_protocol	.\src\socket_base.cpp	/^int zmq::socket_base_t::check_protocol (const std::string &protocol_)$/;"	f	class:zmq::socket_base_t	signature:(const std::string &protocol_)
zmq::socket_base_t::check_protocol	.\src\socket_base.hpp	/^        int check_protocol (const std::string &protocol_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const std::string &protocol_)
zmq::socket_base_t::check_tag	.\src\socket_base.cpp	/^bool zmq::socket_base_t::check_tag ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::check_tag	.\src\socket_base.hpp	/^        bool check_tag ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::clock	.\src\socket_base.hpp	/^        clock_t clock;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::close	.\src\socket_base.cpp	/^int zmq::socket_base_t::close ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::close	.\src\socket_base.hpp	/^        int close ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::connect	.\src\socket_base.cpp	/^int zmq::socket_base_t::connect (const char *addr_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_)
zmq::socket_base_t::connect	.\src\socket_base.hpp	/^        int connect (const char *addr_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *addr_)
zmq::socket_base_t::copy_monitor_address	.\src\socket_base.cpp	/^void zmq::socket_base_t::copy_monitor_address (char *dest_, std::string &src_)$/;"	f	class:zmq::socket_base_t	signature:(char *dest_, std::string &src_)
zmq::socket_base_t::copy_monitor_address	.\src\socket_base.hpp	/^        void copy_monitor_address (char *dest_, std::string &src_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(char *dest_, std::string &src_)
zmq::socket_base_t::create	.\src\socket_base.cpp	/^zmq::socket_base_t *zmq::socket_base_t::create (int type_, class ctx_t *parent_,$/;"	f	class:zmq::socket_base_t	signature:(int type_, class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::socket_base_t::create	.\src\socket_base.hpp	/^        static socket_base_t *create (int type_, zmq::ctx_t *parent_,$/;"	p	class:zmq::socket_base_t	access:public	signature:(int type_, zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::socket_base_t::ctx_terminated	.\src\socket_base.hpp	/^        bool ctx_terminated;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::destroyed	.\src\socket_base.hpp	/^        bool destroyed;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::endpoints	.\src\socket_base.hpp	/^        endpoints_t endpoints;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::endpoints_t	.\src\socket_base.hpp	/^        typedef std::multimap <std::string, own_t *> endpoints_t;$/;"	t	class:zmq::socket_base_t	access:private
zmq::socket_base_t::event_accept_failed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_accept_failed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
zmq::socket_base_t::event_accept_failed	.\src\socket_base.hpp	/^        void event_accept_failed (std::string &addr_, int err_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int err_)
zmq::socket_base_t::event_accepted	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_accepted (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_accepted	.\src\socket_base.hpp	/^        void event_accepted (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_bind_failed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_bind_failed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
zmq::socket_base_t::event_bind_failed	.\src\socket_base.hpp	/^        void event_bind_failed (std::string &addr_, int err_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int err_)
zmq::socket_base_t::event_close_failed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_close_failed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
zmq::socket_base_t::event_close_failed	.\src\socket_base.hpp	/^        void event_close_failed (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_closed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_closed (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_closed	.\src\socket_base.hpp	/^        void event_closed (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_connect_delayed	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_connect_delayed (std::string &addr_, int err_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int err_)
zmq::socket_base_t::event_connect_delayed	.\src\socket_base.hpp	/^        void event_connect_delayed (std::string &addr_, int err_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int err_)
zmq::socket_base_t::event_connect_retried	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_connect_retried (std::string &addr_, int interval_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int interval_)
zmq::socket_base_t::event_connect_retried	.\src\socket_base.hpp	/^        void event_connect_retried (std::string &addr_, int interval_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int interval_)
zmq::socket_base_t::event_connected	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_connected (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_connected	.\src\socket_base.hpp	/^        void event_connected (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_disconnected	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_disconnected (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_disconnected	.\src\socket_base.hpp	/^        void event_disconnected (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_listening	.\src\socket_base.cpp	/^void zmq::socket_base_t::event_listening (std::string &addr_, int fd_)$/;"	f	class:zmq::socket_base_t	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::event_listening	.\src\socket_base.hpp	/^        void event_listening (std::string &addr_, int fd_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(std::string &addr_, int fd_)
zmq::socket_base_t::extract_flags	.\src\socket_base.cpp	/^void zmq::socket_base_t::extract_flags (msg_t *msg_)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *msg_)
zmq::socket_base_t::extract_flags	.\src\socket_base.hpp	/^        void extract_flags (msg_t *msg_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(msg_t *msg_)
zmq::socket_base_t::get_mailbox	.\src\socket_base.cpp	/^zmq::mailbox_t *zmq::socket_base_t::get_mailbox ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::get_mailbox	.\src\socket_base.hpp	/^        mailbox_t *get_mailbox ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::getsockopt	.\src\socket_base.cpp	/^int zmq::socket_base_t::getsockopt (int option_, void *optval_,$/;"	f	class:zmq::socket_base_t	signature:(int option_, void *optval_, size_t *optvallen_)
zmq::socket_base_t::getsockopt	.\src\socket_base.hpp	/^        int getsockopt (int option_, void *optval_, size_t *optvallen_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(int option_, void *optval_, size_t *optvallen_)
zmq::socket_base_t::handle	.\src\socket_base.hpp	/^        poller_t::handle_t handle;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::has_in	.\src\socket_base.cpp	/^bool zmq::socket_base_t::has_in ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::has_in	.\src\socket_base.hpp	/^        bool has_in ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::has_out	.\src\socket_base.cpp	/^bool zmq::socket_base_t::has_out ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::has_out	.\src\socket_base.hpp	/^        bool has_out ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::hiccuped	.\src\socket_base.cpp	/^void zmq::socket_base_t::hiccuped (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
zmq::socket_base_t::hiccuped	.\src\socket_base.hpp	/^        void hiccuped (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
zmq::socket_base_t::in_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::in_event ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::in_event	.\src\socket_base.hpp	/^        void in_event ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::inprocs	.\src\socket_base.hpp	/^        inprocs_t inprocs;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::inprocs_t	.\src\socket_base.hpp	/^        typedef std::multimap <std::string, pipe_t *> inprocs_t;$/;"	t	class:zmq::socket_base_t	access:private
zmq::socket_base_t::last_tsc	.\src\socket_base.hpp	/^        uint64_t last_tsc;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::lock	.\src\socket_base.hpp	/^        void lock();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::mailbox	.\src\socket_base.hpp	/^        mailbox_t mailbox;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::monitor	.\src\socket_base.cpp	/^int zmq::socket_base_t::monitor (const char *addr_, int events_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_, int events_)
zmq::socket_base_t::monitor	.\src\socket_base.hpp	/^        int monitor(const char *endpoint_, int events_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *endpoint_, int events_)
zmq::socket_base_t::monitor_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::monitor_event (zmq_event_t event_)$/;"	f	class:zmq::socket_base_t	signature:(zmq_event_t event_)
zmq::socket_base_t::monitor_event	.\src\socket_base.hpp	/^        void monitor_event (zmq_event_t data_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq_event_t data_)
zmq::socket_base_t::monitor_events	.\src\socket_base.hpp	/^        int monitor_events;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::monitor_socket	.\src\socket_base.hpp	/^        void *monitor_socket;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::operator =	.\src\socket_base.hpp	/^        const socket_base_t &operator = (const socket_base_t&);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const socket_base_t&)
zmq::socket_base_t::out_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::out_event ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::out_event	.\src\socket_base.hpp	/^        void out_event ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::parse_uri	.\src\socket_base.cpp	/^int zmq::socket_base_t::parse_uri (const char *uri_,$/;"	f	class:zmq::socket_base_t	signature:(const char *uri_, std::string &protocol_, std::string &address_)
zmq::socket_base_t::parse_uri	.\src\socket_base.hpp	/^        int parse_uri (const char *uri_, std::string &protocol_,$/;"	p	class:zmq::socket_base_t	access:private	signature:(const char *uri_, std::string &protocol_, std::string &address_)
zmq::socket_base_t::pipes	.\src\socket_base.hpp	/^        pipes_t pipes;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::pipes_t	.\src\socket_base.hpp	/^        typedef array_t <pipe_t, 3> pipes_t;$/;"	t	class:zmq::socket_base_t	access:private
zmq::socket_base_t::poller	.\src\socket_base.hpp	/^        poller_t *poller;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::process_bind	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_bind (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
zmq::socket_base_t::process_bind	.\src\socket_base.hpp	/^        void process_bind (zmq::pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(zmq::pipe_t *pipe_)
zmq::socket_base_t::process_commands	.\src\socket_base.cpp	/^int zmq::socket_base_t::process_commands (int timeout_, bool throttle_)$/;"	f	class:zmq::socket_base_t	signature:(int timeout_, bool throttle_)
zmq::socket_base_t::process_commands	.\src\socket_base.hpp	/^        int process_commands (int timeout_, bool throttle_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(int timeout_, bool throttle_)
zmq::socket_base_t::process_destroy	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_destroy ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::process_destroy	.\src\socket_base.hpp	/^        void process_destroy ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
zmq::socket_base_t::process_stop	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_stop ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::process_stop	.\src\socket_base.hpp	/^        void process_stop ();$/;"	p	class:zmq::socket_base_t	access:private	signature:()
zmq::socket_base_t::process_term	.\src\socket_base.cpp	/^void zmq::socket_base_t::process_term (int linger_)$/;"	f	class:zmq::socket_base_t	signature:(int linger_)
zmq::socket_base_t::process_term	.\src\socket_base.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::socket_base_t	access:private	signature:(int linger_)
zmq::socket_base_t::rcvmore	.\src\socket_base.hpp	/^        bool rcvmore;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::read_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::read_activated (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
zmq::socket_base_t::read_activated	.\src\socket_base.hpp	/^        void read_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
zmq::socket_base_t::recv	.\src\socket_base.cpp	/^int zmq::socket_base_t::recv (msg_t *msg_, int flags_)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *msg_, int flags_)
zmq::socket_base_t::recv	.\src\socket_base.hpp	/^        int recv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::socket_base_t::send	.\src\socket_base.cpp	/^int zmq::socket_base_t::send (msg_t *msg_, int flags_)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *msg_, int flags_)
zmq::socket_base_t::send	.\src\socket_base.hpp	/^        int send (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::socket_base_t::setsockopt	.\src\socket_base.cpp	/^int zmq::socket_base_t::setsockopt (int option_, const void *optval_,$/;"	f	class:zmq::socket_base_t	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::socket_base_t::setsockopt	.\src\socket_base.hpp	/^        int setsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::socket_base_t::socket_base_t	.\src\socket_base.cpp	/^zmq::socket_base_t::socket_base_t (ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::socket_base_t	signature:(ctx_t *parent_, uint32_t tid_, int sid_)
zmq::socket_base_t::socket_base_t	.\src\socket_base.hpp	/^        socket_base_t (const socket_base_t&);$/;"	p	class:zmq::socket_base_t	access:private	signature:(const socket_base_t&)
zmq::socket_base_t::socket_base_t	.\src\socket_base.hpp	/^        socket_base_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::socket_base_t::start_reaping	.\src\socket_base.cpp	/^void zmq::socket_base_t::start_reaping (poller_t *poller_)$/;"	f	class:zmq::socket_base_t	signature:(poller_t *poller_)
zmq::socket_base_t::start_reaping	.\src\socket_base.hpp	/^        void start_reaping (poller_t *poller_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(poller_t *poller_)
zmq::socket_base_t::stop	.\src\socket_base.cpp	/^void zmq::socket_base_t::stop ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::stop	.\src\socket_base.hpp	/^        void stop ();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::stop_monitor	.\src\socket_base.cpp	/^void zmq::socket_base_t::stop_monitor()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::stop_monitor	.\src\socket_base.hpp	/^        void stop_monitor ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
zmq::socket_base_t::sync	.\src\socket_base.hpp	/^        mutex_t sync;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::tag	.\src\socket_base.hpp	/^        uint32_t tag;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::term_endpoint	.\src\socket_base.cpp	/^int zmq::socket_base_t::term_endpoint (const char *addr_)$/;"	f	class:zmq::socket_base_t	signature:(const char *addr_)
zmq::socket_base_t::term_endpoint	.\src\socket_base.hpp	/^        int term_endpoint (const char *addr_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(const char *addr_)
zmq::socket_base_t::terminated	.\src\socket_base.cpp	/^void zmq::socket_base_t::terminated (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
zmq::socket_base_t::terminated	.\src\socket_base.hpp	/^        void terminated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
zmq::socket_base_t::ticks	.\src\socket_base.hpp	/^        int ticks;$/;"	m	class:zmq::socket_base_t	access:private
zmq::socket_base_t::timer_event	.\src\socket_base.cpp	/^void zmq::socket_base_t::timer_event (int)$/;"	f	class:zmq::socket_base_t	signature:(int)
zmq::socket_base_t::timer_event	.\src\socket_base.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(int id_)
zmq::socket_base_t::unlock	.\src\socket_base.hpp	/^        void unlock();$/;"	p	class:zmq::socket_base_t	access:public	signature:()
zmq::socket_base_t::write_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::write_activated (pipe_t *pipe_)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *pipe_)
zmq::socket_base_t::write_activated	.\src\socket_base.hpp	/^        void write_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:public	signature:(pipe_t *pipe_)
zmq::socket_base_t::xattach_pipe	.\src\socket_base.hpp	/^        virtual void xattach_pipe (zmq::pipe_t *pipe_,$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_ = false)
zmq::socket_base_t::xhas_in	.\src\socket_base.cpp	/^bool zmq::socket_base_t::xhas_in ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::xhas_in	.\src\socket_base.hpp	/^        virtual bool xhas_in ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
zmq::socket_base_t::xhas_out	.\src\socket_base.cpp	/^bool zmq::socket_base_t::xhas_out ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::xhas_out	.\src\socket_base.hpp	/^        virtual bool xhas_out ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
zmq::socket_base_t::xhiccuped	.\src\socket_base.cpp	/^void zmq::socket_base_t::xhiccuped (pipe_t *)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *)
zmq::socket_base_t::xhiccuped	.\src\socket_base.hpp	/^        virtual void xhiccuped (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
zmq::socket_base_t::xread_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::xread_activated (pipe_t *)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *)
zmq::socket_base_t::xread_activated	.\src\socket_base.hpp	/^        virtual void xread_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
zmq::socket_base_t::xrecv	.\src\socket_base.cpp	/^int zmq::socket_base_t::xrecv (msg_t *, int)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *, int)
zmq::socket_base_t::xrecv	.\src\socket_base.hpp	/^        virtual int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::socket_base_t::xsend	.\src\socket_base.cpp	/^int zmq::socket_base_t::xsend (msg_t *, int)$/;"	f	class:zmq::socket_base_t	signature:(msg_t *, int)
zmq::socket_base_t::xsend	.\src\socket_base.hpp	/^        virtual int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::socket_base_t::xsetsockopt	.\src\socket_base.cpp	/^int zmq::socket_base_t::xsetsockopt (int, const void *, size_t)$/;"	f	class:zmq::socket_base_t	signature:(int, const void *, size_t)
zmq::socket_base_t::xsetsockopt	.\src\socket_base.hpp	/^        virtual int xsetsockopt (int option_, const void *optval_,$/;"	p	class:zmq::socket_base_t	access:protected	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::socket_base_t::xterminated	.\src\socket_base.hpp	/^        virtual void xterminated (pipe_t *pipe_) = 0;$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
zmq::socket_base_t::xwrite_activated	.\src\socket_base.cpp	/^void zmq::socket_base_t::xwrite_activated (pipe_t *)$/;"	f	class:zmq::socket_base_t	signature:(pipe_t *)
zmq::socket_base_t::xwrite_activated	.\src\socket_base.hpp	/^        virtual void xwrite_activated (pipe_t *pipe_);$/;"	p	class:zmq::socket_base_t	access:protected	signature:(pipe_t *pipe_)
zmq::socket_base_t::~socket_base_t	.\src\socket_base.cpp	/^zmq::socket_base_t::~socket_base_t ()$/;"	f	class:zmq::socket_base_t	signature:()
zmq::socket_base_t::~socket_base_t	.\src\socket_base.hpp	/^        virtual ~socket_base_t ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
zmq::stream_engine_t	.\src\stream_engine.hpp	/^    class stream_engine_t : public io_object_t, public i_engine, public i_msg_sink$/;"	c	namespace:zmq	inherits:io_object_t,i_engine,i_msg_sink
zmq::stream_engine_t::activate_in	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::activate_in ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::activate_in	.\src\stream_engine.hpp	/^        void activate_in ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
zmq::stream_engine_t::activate_out	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::activate_out ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::activate_out	.\src\stream_engine.hpp	/^        void activate_out ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
zmq::stream_engine_t::decoder	.\src\stream_engine.hpp	/^        i_decoder *decoder;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::encoder	.\src\stream_engine.hpp	/^        i_encoder *encoder;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::endpoint	.\src\stream_engine.hpp	/^        std::string endpoint;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::error	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::error ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::error	.\src\stream_engine.hpp	/^        void error ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
zmq::stream_engine_t::greeting	.\src\stream_engine.hpp	/^        unsigned char greeting [greeting_size];$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::greeting_bytes_read	.\src\stream_engine.hpp	/^        unsigned int greeting_bytes_read;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::greeting_output_buffer	.\src\stream_engine.hpp	/^        unsigned char greeting_output_buffer [greeting_size];$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::greeting_size	.\src\stream_engine.hpp	/^        const static size_t greeting_size = 12;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::handle	.\src\stream_engine.hpp	/^        handle_t handle;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::handshake	.\src\stream_engine.cpp	/^bool zmq::stream_engine_t::handshake ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::handshake	.\src\stream_engine.hpp	/^        bool handshake ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
zmq::stream_engine_t::handshaking	.\src\stream_engine.hpp	/^        bool handshaking;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::in_event	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::in_event ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::in_event	.\src\stream_engine.hpp	/^        void in_event ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
zmq::stream_engine_t::inpos	.\src\stream_engine.hpp	/^        unsigned char *inpos;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::insize	.\src\stream_engine.hpp	/^        size_t insize;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::io_enabled	.\src\stream_engine.hpp	/^        bool io_enabled;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::operator =	.\src\stream_engine.hpp	/^        const stream_engine_t &operator = (const stream_engine_t&);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(const stream_engine_t&)
zmq::stream_engine_t::options	.\src\stream_engine.hpp	/^        options_t options;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::out_event	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::out_event ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::out_event	.\src\stream_engine.hpp	/^        void out_event ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
zmq::stream_engine_t::outpos	.\src\stream_engine.hpp	/^        unsigned char *outpos;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::outsize	.\src\stream_engine.hpp	/^        size_t outsize;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::plug	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::plug (io_thread_t *io_thread_,$/;"	f	class:zmq::stream_engine_t	signature:(io_thread_t *io_thread_, session_base_t *session_)
zmq::stream_engine_t::plug	.\src\stream_engine.hpp	/^        void plug (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::stream_engine_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_)
zmq::stream_engine_t::plugged	.\src\stream_engine.hpp	/^        bool plugged;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::push_msg	.\src\stream_engine.cpp	/^int zmq::stream_engine_t::push_msg (msg_t *msg_)$/;"	f	class:zmq::stream_engine_t	signature:(msg_t *msg_)
zmq::stream_engine_t::push_msg	.\src\stream_engine.hpp	/^        virtual int push_msg (msg_t *msg_);$/;"	p	class:zmq::stream_engine_t	access:public	signature:(msg_t *msg_)
zmq::stream_engine_t::read	.\src\stream_engine.cpp	/^int zmq::stream_engine_t::read (void *data_, size_t size_)$/;"	f	class:zmq::stream_engine_t	signature:(void *data_, size_t size_)
zmq::stream_engine_t::read	.\src\stream_engine.hpp	/^        int read (void *data_, size_t size_);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(void *data_, size_t size_)
zmq::stream_engine_t::receive_greeting	.\src\stream_engine.hpp	/^        int receive_greeting ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
zmq::stream_engine_t::s	.\src\stream_engine.hpp	/^        fd_t s;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::session	.\src\stream_engine.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::socket	.\src\stream_engine.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::stream_engine_t	access:private
zmq::stream_engine_t::stream_engine_t	.\src\stream_engine.cpp	/^zmq::stream_engine_t::stream_engine_t (fd_t fd_, const options_t &options_, const std::string &endpoint_) :$/;"	f	class:zmq::stream_engine_t	signature:(fd_t fd_, const options_t &options_, const std::string &endpoint_)
zmq::stream_engine_t::stream_engine_t	.\src\stream_engine.hpp	/^        stream_engine_t (const stream_engine_t&);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(const stream_engine_t&)
zmq::stream_engine_t::stream_engine_t	.\src\stream_engine.hpp	/^        stream_engine_t (fd_t fd_, const options_t &options_, const std::string &endpoint);$/;"	p	class:zmq::stream_engine_t	access:public	signature:(fd_t fd_, const options_t &options_, const std::string &endpoint)
zmq::stream_engine_t::terminate	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::terminate ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::terminate	.\src\stream_engine.hpp	/^        void terminate ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
zmq::stream_engine_t::unplug	.\src\stream_engine.cpp	/^void zmq::stream_engine_t::unplug ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::unplug	.\src\stream_engine.hpp	/^        void unplug ();$/;"	p	class:zmq::stream_engine_t	access:private	signature:()
zmq::stream_engine_t::write	.\src\stream_engine.cpp	/^int zmq::stream_engine_t::write (const void *data_, size_t size_)$/;"	f	class:zmq::stream_engine_t	signature:(const void *data_, size_t size_)
zmq::stream_engine_t::write	.\src\stream_engine.hpp	/^        int write (const void *data_, size_t size_);$/;"	p	class:zmq::stream_engine_t	access:private	signature:(const void *data_, size_t size_)
zmq::stream_engine_t::~stream_engine_t	.\src\stream_engine.cpp	/^zmq::stream_engine_t::~stream_engine_t ()$/;"	f	class:zmq::stream_engine_t	signature:()
zmq::stream_engine_t::~stream_engine_t	.\src\stream_engine.hpp	/^        ~stream_engine_t ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
zmq::sub_session_t	.\src\sub.hpp	/^    class sub_session_t : public xsub_session_t$/;"	c	namespace:zmq	inherits:xsub_session_t
zmq::sub_session_t::operator =	.\src\sub.hpp	/^        const sub_session_t &operator = (const sub_session_t&);$/;"	p	class:zmq::sub_session_t	access:private	signature:(const sub_session_t&)
zmq::sub_session_t::sub_session_t	.\src\sub.cpp	/^zmq::sub_session_t::sub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::sub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::sub_session_t::sub_session_t	.\src\sub.hpp	/^        sub_session_t (const sub_session_t&);$/;"	p	class:zmq::sub_session_t	access:private	signature:(const sub_session_t&)
zmq::sub_session_t::sub_session_t	.\src\sub.hpp	/^        sub_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::sub_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, zmq::socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::sub_session_t::~sub_session_t	.\src\sub.cpp	/^zmq::sub_session_t::~sub_session_t ()$/;"	f	class:zmq::sub_session_t	signature:()
zmq::sub_session_t::~sub_session_t	.\src\sub.hpp	/^        ~sub_session_t ();$/;"	p	class:zmq::sub_session_t	access:public	signature:()
zmq::sub_t	.\src\sub.hpp	/^    class sub_t : public xsub_t$/;"	c	namespace:zmq	inherits:xsub_t
zmq::sub_t::operator =	.\src\sub.hpp	/^        const sub_t &operator = (const sub_t&);$/;"	p	class:zmq::sub_t	access:private	signature:(const sub_t&)
zmq::sub_t::sub_t	.\src\sub.cpp	/^zmq::sub_t::sub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::sub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::sub_t::sub_t	.\src\sub.hpp	/^        sub_t (const sub_t&);$/;"	p	class:zmq::sub_t	access:private	signature:(const sub_t&)
zmq::sub_t::sub_t	.\src\sub.hpp	/^        sub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::sub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::sub_t::xhas_out	.\src\sub.cpp	/^bool zmq::sub_t::xhas_out ()$/;"	f	class:zmq::sub_t	signature:()
zmq::sub_t::xhas_out	.\src\sub.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::sub_t	access:protected	signature:()
zmq::sub_t::xsend	.\src\sub.cpp	/^int zmq::sub_t::xsend (msg_t *, int)$/;"	f	class:zmq::sub_t	signature:(msg_t *, int)
zmq::sub_t::xsend	.\src\sub.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::sub_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::sub_t::xsetsockopt	.\src\sub.cpp	/^int zmq::sub_t::xsetsockopt (int option_, const void *optval_,$/;"	f	class:zmq::sub_t	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::sub_t::xsetsockopt	.\src\sub.hpp	/^        int xsetsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::sub_t	access:protected	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::sub_t::~sub_t	.\src\sub.cpp	/^zmq::sub_t::~sub_t ()$/;"	f	class:zmq::sub_t	signature:()
zmq::sub_t::~sub_t	.\src\sub.hpp	/^        ~sub_t ();$/;"	p	class:zmq::sub_t	access:public	signature:()
zmq::tcp_address_mask_t	.\src\tcp_address.hpp	/^    class tcp_address_mask_t : public tcp_address_t$/;"	c	namespace:zmq	inherits:tcp_address_t
zmq::tcp_address_mask_t::address_mask	.\src\tcp_address.hpp	/^        int address_mask;$/;"	m	class:zmq::tcp_address_mask_t	access:private
zmq::tcp_address_mask_t::mask	.\src\tcp_address.cpp	/^int zmq::tcp_address_mask_t::mask () const$/;"	f	class:zmq::tcp_address_mask_t	signature:() const
zmq::tcp_address_mask_t::mask	.\src\tcp_address.hpp	/^        int mask () const;$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:() const
zmq::tcp_address_mask_t::match_address	.\src\tcp_address.cpp	/^bool zmq::tcp_address_mask_t::match_address (const struct sockaddr *ss, const socklen_t ss_len) const$/;"	f	class:zmq::tcp_address_mask_t	signature:(const struct sockaddr *ss, const socklen_t ss_len) const
zmq::tcp_address_mask_t::match_address	.\src\tcp_address.hpp	/^        bool match_address (const struct sockaddr *ss, const socklen_t ss_len) const;$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:(const struct sockaddr *ss, const socklen_t ss_len) const
zmq::tcp_address_mask_t::resolve	.\src\tcp_address.cpp	/^int zmq::tcp_address_mask_t::resolve (const char *name_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_mask_t	signature:(const char *name_, bool ipv4only_)
zmq::tcp_address_mask_t::resolve	.\src\tcp_address.hpp	/^        int resolve (const char* name_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:(const char* name_, bool ipv4only_)
zmq::tcp_address_mask_t::tcp_address_mask_t	.\src\tcp_address.cpp	/^zmq::tcp_address_mask_t::tcp_address_mask_t () :$/;"	f	class:zmq::tcp_address_mask_t	signature:()
zmq::tcp_address_mask_t::tcp_address_mask_t	.\src\tcp_address.hpp	/^        tcp_address_mask_t ();$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:()
zmq::tcp_address_mask_t::to_string	.\src\tcp_address.cpp	/^int zmq::tcp_address_mask_t::to_string (std::string &addr_)$/;"	f	class:zmq::tcp_address_mask_t	signature:(std::string &addr_)
zmq::tcp_address_mask_t::to_string	.\src\tcp_address.hpp	/^        int to_string (std::string &addr_);$/;"	p	class:zmq::tcp_address_mask_t	access:public	signature:(std::string &addr_)
zmq::tcp_address_t	.\src\tcp_address.hpp	/^    class tcp_address_t$/;"	c	namespace:zmq
zmq::tcp_address_t::__anon49::generic	.\src\tcp_address.hpp	/^            sockaddr generic;$/;"	m	union:zmq::tcp_address_t::__anon49	access:public
zmq::tcp_address_t::__anon49::ipv4	.\src\tcp_address.hpp	/^            sockaddr_in ipv4;$/;"	m	union:zmq::tcp_address_t::__anon49	access:public
zmq::tcp_address_t::__anon49::ipv6	.\src\tcp_address.hpp	/^            sockaddr_in6 ipv6;$/;"	m	union:zmq::tcp_address_t::__anon49	access:public
zmq::tcp_address_t::addr	.\src\tcp_address.cpp	/^const sockaddr *zmq::tcp_address_t::addr () const$/;"	f	class:zmq::tcp_address_t	signature:() const
zmq::tcp_address_t::addr	.\src\tcp_address.hpp	/^        const sockaddr *addr () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
zmq::tcp_address_t::address	.\src\tcp_address.hpp	/^        } address;$/;"	m	class:zmq::tcp_address_t	typeref:union:zmq::tcp_address_t::__anon49	access:protected
zmq::tcp_address_t::addrlen	.\src\tcp_address.cpp	/^socklen_t zmq::tcp_address_t::addrlen () const$/;"	f	class:zmq::tcp_address_t	signature:() const
zmq::tcp_address_t::addrlen	.\src\tcp_address.hpp	/^        socklen_t addrlen () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
zmq::tcp_address_t::family	.\src\tcp_address.cpp	/^unsigned short zmq::tcp_address_t::family () const$/;"	f	class:zmq::tcp_address_t	signature:() const
zmq::tcp_address_t::family	.\src\tcp_address.hpp	/^        sa_family_t family () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
zmq::tcp_address_t::family	.\src\tcp_address.hpp	/^        unsigned short family () const;$/;"	p	class:zmq::tcp_address_t	access:public	signature:() const
zmq::tcp_address_t::resolve	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve (const char *name_, bool local_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_t	signature:(const char *name_, bool local_, bool ipv4only_)
zmq::tcp_address_t::resolve	.\src\tcp_address.hpp	/^        int resolve (const char* name_, bool local_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:public	signature:(const char* name_, bool local_, bool ipv4only_)
zmq::tcp_address_t::resolve_hostname	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve_hostname (const char *hostname_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_t	signature:(const char *hostname_, bool ipv4only_)
zmq::tcp_address_t::resolve_hostname	.\src\tcp_address.hpp	/^        int resolve_hostname (const char *hostname_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:protected	signature:(const char *hostname_, bool ipv4only_)
zmq::tcp_address_t::resolve_interface	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve_interface (const char *interface_,$/;"	f	class:zmq::tcp_address_t	signature:(const char *interface_, bool ipv4only_)
zmq::tcp_address_t::resolve_interface	.\src\tcp_address.hpp	/^        int resolve_interface (const char *interface_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:protected	signature:(const char *interface_, bool ipv4only_)
zmq::tcp_address_t::resolve_nic_name	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::resolve_nic_name (const char *nic_, bool ipv4only_)$/;"	f	class:zmq::tcp_address_t	signature:(const char *nic_, bool ipv4only_)
zmq::tcp_address_t::resolve_nic_name	.\src\tcp_address.hpp	/^        int resolve_nic_name (const char *nic_, bool ipv4only_);$/;"	p	class:zmq::tcp_address_t	access:protected	signature:(const char *nic_, bool ipv4only_)
zmq::tcp_address_t::tcp_address_t	.\src\tcp_address.cpp	/^zmq::tcp_address_t::tcp_address_t ()$/;"	f	class:zmq::tcp_address_t	signature:()
zmq::tcp_address_t::tcp_address_t	.\src\tcp_address.cpp	/^zmq::tcp_address_t::tcp_address_t (const sockaddr *sa, socklen_t sa_len)$/;"	f	class:zmq::tcp_address_t	signature:(const sockaddr *sa, socklen_t sa_len)
zmq::tcp_address_t::tcp_address_t	.\src\tcp_address.hpp	/^        tcp_address_t ();$/;"	p	class:zmq::tcp_address_t	access:public	signature:()
zmq::tcp_address_t::tcp_address_t	.\src\tcp_address.hpp	/^        tcp_address_t (const sockaddr *sa, socklen_t sa_len);$/;"	p	class:zmq::tcp_address_t	access:public	signature:(const sockaddr *sa, socklen_t sa_len)
zmq::tcp_address_t::to_string	.\src\tcp_address.cpp	/^int zmq::tcp_address_t::to_string (std::string &addr_)$/;"	f	class:zmq::tcp_address_t	signature:(std::string &addr_)
zmq::tcp_address_t::to_string	.\src\tcp_address.hpp	/^        virtual int to_string (std::string &addr_);$/;"	p	class:zmq::tcp_address_t	access:public	signature:(std::string &addr_)
zmq::tcp_address_t::~tcp_address_t	.\src\tcp_address.cpp	/^zmq::tcp_address_t::~tcp_address_t ()$/;"	f	class:zmq::tcp_address_t	signature:()
zmq::tcp_address_t::~tcp_address_t	.\src\tcp_address.hpp	/^        virtual ~tcp_address_t ();$/;"	p	class:zmq::tcp_address_t	access:public	signature:()
zmq::tcp_connecter_t	.\src\tcp_connecter.hpp	/^    class tcp_connecter_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
zmq::tcp_connecter_t::add_reconnect_timer	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::add_reconnect_timer()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::add_reconnect_timer	.\src\tcp_connecter.hpp	/^        void add_reconnect_timer();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::addr	.\src\tcp_connecter.hpp	/^        const address_t *addr;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::close	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::close ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::close	.\src\tcp_connecter.hpp	/^        void close ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::connect	.\src\tcp_connecter.cpp	/^zmq::fd_t zmq::tcp_connecter_t::connect ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::connect	.\src\tcp_connecter.hpp	/^        fd_t connect ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::current_reconnect_ivl	.\src\tcp_connecter.hpp	/^        int current_reconnect_ivl;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::delayed_start	.\src\tcp_connecter.hpp	/^        const bool delayed_start;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::endpoint	.\src\tcp_connecter.hpp	/^        std::string endpoint;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::get_new_reconnect_ivl	.\src\tcp_connecter.cpp	/^int zmq::tcp_connecter_t::get_new_reconnect_ivl ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::get_new_reconnect_ivl	.\src\tcp_connecter.hpp	/^        int get_new_reconnect_ivl ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::handle	.\src\tcp_connecter.hpp	/^        handle_t handle;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::handle_valid	.\src\tcp_connecter.hpp	/^        bool handle_valid;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::in_event	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::in_event ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::in_event	.\src\tcp_connecter.hpp	/^        void in_event ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::open	.\src\tcp_connecter.cpp	/^int zmq::tcp_connecter_t::open ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::open	.\src\tcp_connecter.hpp	/^        int open ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::operator =	.\src\tcp_connecter.hpp	/^        const tcp_connecter_t &operator = (const tcp_connecter_t&);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(const tcp_connecter_t&)
zmq::tcp_connecter_t::out_event	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::out_event ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::out_event	.\src\tcp_connecter.hpp	/^        void out_event ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::process_plug	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::process_plug ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::process_plug	.\src\tcp_connecter.hpp	/^        void process_plug ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::process_term	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::process_term (int linger_)$/;"	f	class:zmq::tcp_connecter_t	signature:(int linger_)
zmq::tcp_connecter_t::process_term	.\src\tcp_connecter.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(int linger_)
zmq::tcp_connecter_t::reconnect_timer_id	.\src\tcp_connecter.hpp	/^        enum {reconnect_timer_id = 1};$/;"	e	enum:zmq::tcp_connecter_t::__anon50
zmq::tcp_connecter_t::s	.\src\tcp_connecter.hpp	/^        fd_t s;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::session	.\src\tcp_connecter.hpp	/^        zmq::session_base_t *session;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::socket	.\src\tcp_connecter.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::start_connecting	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::start_connecting ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::start_connecting	.\src\tcp_connecter.hpp	/^        void start_connecting ();$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:()
zmq::tcp_connecter_t::tcp_connecter_t	.\src\tcp_connecter.cpp	/^zmq::tcp_connecter_t::tcp_connecter_t (class io_thread_t *io_thread_,$/;"	f	class:zmq::tcp_connecter_t	signature:(class io_thread_t *io_thread_, class session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
zmq::tcp_connecter_t::tcp_connecter_t	.\src\tcp_connecter.hpp	/^        tcp_connecter_t (const tcp_connecter_t&);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(const tcp_connecter_t&)
zmq::tcp_connecter_t::tcp_connecter_t	.\src\tcp_connecter.hpp	/^        tcp_connecter_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::tcp_connecter_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::session_base_t *session_, const options_t &options_, const address_t *addr_, bool delayed_start_)
zmq::tcp_connecter_t::timer_event	.\src\tcp_connecter.cpp	/^void zmq::tcp_connecter_t::timer_event (int id_)$/;"	f	class:zmq::tcp_connecter_t	signature:(int id_)
zmq::tcp_connecter_t::timer_event	.\src\tcp_connecter.hpp	/^        void timer_event (int id_);$/;"	p	class:zmq::tcp_connecter_t	access:private	signature:(int id_)
zmq::tcp_connecter_t::timer_started	.\src\tcp_connecter.hpp	/^        bool timer_started;$/;"	m	class:zmq::tcp_connecter_t	access:private
zmq::tcp_connecter_t::~tcp_connecter_t	.\src\tcp_connecter.cpp	/^zmq::tcp_connecter_t::~tcp_connecter_t ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
zmq::tcp_connecter_t::~tcp_connecter_t	.\src\tcp_connecter.hpp	/^        ~tcp_connecter_t ();$/;"	p	class:zmq::tcp_connecter_t	access:public	signature:()
zmq::tcp_listener_t	.\src\tcp_listener.hpp	/^    class tcp_listener_t : public own_t, public io_object_t$/;"	c	namespace:zmq	inherits:own_t,io_object_t
zmq::tcp_listener_t::accept	.\src\tcp_listener.cpp	/^zmq::fd_t zmq::tcp_listener_t::accept ()$/;"	f	class:zmq::tcp_listener_t	signature:()
zmq::tcp_listener_t::accept	.\src\tcp_listener.hpp	/^        fd_t accept ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
zmq::tcp_listener_t::address	.\src\tcp_listener.hpp	/^        tcp_address_t address;$/;"	m	class:zmq::tcp_listener_t	access:private
zmq::tcp_listener_t::close	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::close ()$/;"	f	class:zmq::tcp_listener_t	signature:()
zmq::tcp_listener_t::close	.\src\tcp_listener.hpp	/^        void close ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
zmq::tcp_listener_t::endpoint	.\src\tcp_listener.hpp	/^        std::string endpoint;$/;"	m	class:zmq::tcp_listener_t	access:private
zmq::tcp_listener_t::get_address	.\src\tcp_listener.cpp	/^int zmq::tcp_listener_t::get_address (std::string &addr_)$/;"	f	class:zmq::tcp_listener_t	signature:(std::string &addr_)
zmq::tcp_listener_t::get_address	.\src\tcp_listener.hpp	/^        int get_address (std::string &addr_);$/;"	p	class:zmq::tcp_listener_t	access:public	signature:(std::string &addr_)
zmq::tcp_listener_t::handle	.\src\tcp_listener.hpp	/^        handle_t handle;$/;"	m	class:zmq::tcp_listener_t	access:private
zmq::tcp_listener_t::in_event	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::in_event ()$/;"	f	class:zmq::tcp_listener_t	signature:()
zmq::tcp_listener_t::in_event	.\src\tcp_listener.hpp	/^        void in_event ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
zmq::tcp_listener_t::operator =	.\src\tcp_listener.hpp	/^        const tcp_listener_t &operator = (const tcp_listener_t&);$/;"	p	class:zmq::tcp_listener_t	access:private	signature:(const tcp_listener_t&)
zmq::tcp_listener_t::process_plug	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::process_plug ()$/;"	f	class:zmq::tcp_listener_t	signature:()
zmq::tcp_listener_t::process_plug	.\src\tcp_listener.hpp	/^        void process_plug ();$/;"	p	class:zmq::tcp_listener_t	access:private	signature:()
zmq::tcp_listener_t::process_term	.\src\tcp_listener.cpp	/^void zmq::tcp_listener_t::process_term (int linger_)$/;"	f	class:zmq::tcp_listener_t	signature:(int linger_)
zmq::tcp_listener_t::process_term	.\src\tcp_listener.hpp	/^        void process_term (int linger_);$/;"	p	class:zmq::tcp_listener_t	access:private	signature:(int linger_)
zmq::tcp_listener_t::s	.\src\tcp_listener.hpp	/^        fd_t s;$/;"	m	class:zmq::tcp_listener_t	access:private
zmq::tcp_listener_t::set_address	.\src\tcp_listener.cpp	/^int zmq::tcp_listener_t::set_address (const char *addr_)$/;"	f	class:zmq::tcp_listener_t	signature:(const char *addr_)
zmq::tcp_listener_t::set_address	.\src\tcp_listener.hpp	/^        int set_address (const char *addr_);$/;"	p	class:zmq::tcp_listener_t	access:public	signature:(const char *addr_)
zmq::tcp_listener_t::socket	.\src\tcp_listener.hpp	/^        zmq::socket_base_t *socket;$/;"	m	class:zmq::tcp_listener_t	access:private
zmq::tcp_listener_t::tcp_listener_t	.\src\tcp_listener.cpp	/^zmq::tcp_listener_t::tcp_listener_t (io_thread_t *io_thread_,$/;"	f	class:zmq::tcp_listener_t	signature:(io_thread_t *io_thread_, socket_base_t *socket_, const options_t &options_)
zmq::tcp_listener_t::tcp_listener_t	.\src\tcp_listener.hpp	/^        tcp_listener_t (const tcp_listener_t&);$/;"	p	class:zmq::tcp_listener_t	access:private	signature:(const tcp_listener_t&)
zmq::tcp_listener_t::tcp_listener_t	.\src\tcp_listener.hpp	/^        tcp_listener_t (zmq::io_thread_t *io_thread_,$/;"	p	class:zmq::tcp_listener_t	access:public	signature:(zmq::io_thread_t *io_thread_, zmq::socket_base_t *socket_, const options_t &options_)
zmq::tcp_listener_t::~tcp_listener_t	.\src\tcp_listener.cpp	/^zmq::tcp_listener_t::~tcp_listener_t ()$/;"	f	class:zmq::tcp_listener_t	signature:()
zmq::tcp_listener_t::~tcp_listener_t	.\src\tcp_listener.hpp	/^        ~tcp_listener_t ();$/;"	p	class:zmq::tcp_listener_t	access:public	signature:()
zmq::thread_fn	.\src\thread.hpp	/^    typedef void (thread_fn) (void*);$/;"	t	namespace:zmq
zmq::thread_t	.\src\thread.hpp	/^    class thread_t$/;"	c	namespace:zmq
zmq::thread_t::arg	.\src\thread.hpp	/^        void *arg;$/;"	m	class:zmq::thread_t	access:public
zmq::thread_t::descriptor	.\src\thread.hpp	/^        HANDLE descriptor;$/;"	m	class:zmq::thread_t	access:private
zmq::thread_t::descriptor	.\src\thread.hpp	/^        pthread_t descriptor;$/;"	m	class:zmq::thread_t	access:private
zmq::thread_t::operator =	.\src\thread.hpp	/^        const thread_t &operator = (const thread_t&);$/;"	p	class:zmq::thread_t	access:private	signature:(const thread_t&)
zmq::thread_t::start	.\src\thread.cpp	/^void zmq::thread_t::start (thread_fn *tfn_, void *arg_)$/;"	f	class:zmq::thread_t	signature:(thread_fn *tfn_, void *arg_)
zmq::thread_t::start	.\src\thread.hpp	/^        void start (thread_fn *tfn_, void *arg_);$/;"	p	class:zmq::thread_t	access:public	signature:(thread_fn *tfn_, void *arg_)
zmq::thread_t::stop	.\src\thread.cpp	/^void zmq::thread_t::stop ()$/;"	f	class:zmq::thread_t	signature:()
zmq::thread_t::stop	.\src\thread.hpp	/^        void stop ();$/;"	p	class:zmq::thread_t	access:public	signature:()
zmq::thread_t::tfn	.\src\thread.hpp	/^        thread_fn *tfn;$/;"	m	class:zmq::thread_t	access:public
zmq::thread_t::thread_t	.\src\thread.hpp	/^        inline thread_t ()$/;"	f	class:zmq::thread_t	access:public	signature:()
zmq::thread_t::thread_t	.\src\thread.hpp	/^        thread_t (const thread_t&);$/;"	p	class:zmq::thread_t	access:private	signature:(const thread_t&)
zmq::trie_t	.\src\trie.hpp	/^    class trie_t$/;"	c	namespace:zmq
zmq::trie_t::__anon51::node	.\src\trie.hpp	/^            class trie_t *node;$/;"	m	union:zmq::trie_t::__anon51	typeref:class:zmq::trie_t::__anon51::trie_t	access:public
zmq::trie_t::__anon51::table	.\src\trie.hpp	/^            class trie_t **table;$/;"	m	union:zmq::trie_t::__anon51	typeref:class:zmq::trie_t::__anon51::trie_t	access:public
zmq::trie_t::add	.\src\trie.cpp	/^bool zmq::trie_t::add (unsigned char *prefix_, size_t size_)$/;"	f	class:zmq::trie_t	signature:(unsigned char *prefix_, size_t size_)
zmq::trie_t::add	.\src\trie.hpp	/^        bool add (unsigned char *prefix_, size_t size_);$/;"	p	class:zmq::trie_t	access:public	signature:(unsigned char *prefix_, size_t size_)
zmq::trie_t::apply	.\src\trie.cpp	/^void zmq::trie_t::apply (void (*func_) (unsigned char *data_, size_t size_,$/;"	f	class:zmq::trie_t	signature:(void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::trie_t::apply	.\src\trie.hpp	/^        void apply (void (*func_) (unsigned char *data_, size_t size_,$/;"	p	class:zmq::trie_t	access:public	signature:(void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::trie_t::apply_helper	.\src\trie.cpp	/^void zmq::trie_t::apply_helper ($/;"	f	class:zmq::trie_t	signature:( unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::trie_t::apply_helper	.\src\trie.hpp	/^        void apply_helper ($/;"	p	class:zmq::trie_t	access:private	signature:( unsigned char **buff_, size_t buffsize_, size_t maxbuffsize_, void (*func_) (unsigned char *data_, size_t size_, void *arg_), void *arg_)
zmq::trie_t::check	.\src\trie.cpp	/^bool zmq::trie_t::check (unsigned char *data_, size_t size_)$/;"	f	class:zmq::trie_t	signature:(unsigned char *data_, size_t size_)
zmq::trie_t::check	.\src\trie.hpp	/^        bool check (unsigned char *data_, size_t size_);$/;"	p	class:zmq::trie_t	access:public	signature:(unsigned char *data_, size_t size_)
zmq::trie_t::count	.\src\trie.hpp	/^        unsigned short count;$/;"	m	class:zmq::trie_t	access:private
zmq::trie_t::is_redundant	.\src\trie.cpp	/^bool zmq::trie_t::is_redundant () const$/;"	f	class:zmq::trie_t	signature:() const
zmq::trie_t::is_redundant	.\src\trie.hpp	/^        bool is_redundant () const;$/;"	p	class:zmq::trie_t	access:private	signature:() const
zmq::trie_t::live_nodes	.\src\trie.hpp	/^        unsigned short live_nodes;$/;"	m	class:zmq::trie_t	access:private
zmq::trie_t::min	.\src\trie.hpp	/^        unsigned char min;$/;"	m	class:zmq::trie_t	access:private
zmq::trie_t::next	.\src\trie.hpp	/^        } next;$/;"	m	class:zmq::trie_t	typeref:union:zmq::trie_t::__anon51	access:private
zmq::trie_t::operator =	.\src\trie.hpp	/^        const trie_t &operator = (const trie_t&);$/;"	p	class:zmq::trie_t	access:private	signature:(const trie_t&)
zmq::trie_t::refcnt	.\src\trie.hpp	/^        uint32_t refcnt;$/;"	m	class:zmq::trie_t	access:private
zmq::trie_t::rm	.\src\trie.cpp	/^bool zmq::trie_t::rm (unsigned char *prefix_, size_t size_)$/;"	f	class:zmq::trie_t	signature:(unsigned char *prefix_, size_t size_)
zmq::trie_t::rm	.\src\trie.hpp	/^        bool rm (unsigned char *prefix_, size_t size_);$/;"	p	class:zmq::trie_t	access:public	signature:(unsigned char *prefix_, size_t size_)
zmq::trie_t::trie_t	.\src\trie.cpp	/^zmq::trie_t::trie_t () :$/;"	f	class:zmq::trie_t	signature:()
zmq::trie_t::trie_t	.\src\trie.hpp	/^        trie_t ();$/;"	p	class:zmq::trie_t	access:public	signature:()
zmq::trie_t::trie_t	.\src\trie.hpp	/^        trie_t (const trie_t&);$/;"	p	class:zmq::trie_t	access:private	signature:(const trie_t&)
zmq::trie_t::~trie_t	.\src\trie.cpp	/^zmq::trie_t::~trie_t ()$/;"	f	class:zmq::trie_t	signature:()
zmq::trie_t::~trie_t	.\src\trie.hpp	/^        ~trie_t ();$/;"	p	class:zmq::trie_t	access:public	signature:()
zmq::tune_tcp_keepalives	.\src\tcp.cpp	/^void zmq::tune_tcp_keepalives (fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_)$/;"	f	class:zmq	signature:(fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_)
zmq::tune_tcp_keepalives	.\src\tcp.hpp	/^    void tune_tcp_keepalives (fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_);$/;"	p	namespace:zmq	signature:(fd_t s_, int keepalive_, int keepalive_cnt_, int keepalive_idle_, int keepalive_intvl_)
zmq::tune_tcp_socket	.\src\tcp.cpp	/^void zmq::tune_tcp_socket (fd_t s_)$/;"	f	class:zmq	signature:(fd_t s_)
zmq::tune_tcp_socket	.\src\tcp.hpp	/^    void tune_tcp_socket (fd_t s_);$/;"	p	namespace:zmq	signature:(fd_t s_)
zmq::unblock_socket	.\src\ip.cpp	/^void zmq::unblock_socket (fd_t s_)$/;"	f	class:zmq	signature:(fd_t s_)
zmq::unblock_socket	.\src\ip.hpp	/^    void unblock_socket (fd_t s_);$/;"	p	namespace:zmq	signature:(fd_t s_)
zmq::v1_decoder_t	.\src\v1_decoder.hpp	/^    class v1_decoder_t : public decoder_base_t <v1_decoder_t>$/;"	c	namespace:zmq	inherits:decoder_base_t
zmq::v1_decoder_t::eight_byte_size_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::eight_byte_size_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
zmq::v1_decoder_t::eight_byte_size_ready	.\src\v1_decoder.hpp	/^        bool eight_byte_size_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
zmq::v1_decoder_t::flags_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::flags_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
zmq::v1_decoder_t::flags_ready	.\src\v1_decoder.hpp	/^        bool flags_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
zmq::v1_decoder_t::in_progress	.\src\v1_decoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::v1_decoder_t	access:private
zmq::v1_decoder_t::maxmsgsize	.\src\v1_decoder.hpp	/^        const int64_t maxmsgsize;$/;"	m	class:zmq::v1_decoder_t	access:private
zmq::v1_decoder_t::message_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::message_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
zmq::v1_decoder_t::message_ready	.\src\v1_decoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
zmq::v1_decoder_t::msg_flags	.\src\v1_decoder.hpp	/^        unsigned char msg_flags;$/;"	m	class:zmq::v1_decoder_t	access:private
zmq::v1_decoder_t::msg_sink	.\src\v1_decoder.hpp	/^        i_msg_sink *msg_sink;$/;"	m	class:zmq::v1_decoder_t	access:private
zmq::v1_decoder_t::one_byte_size_ready	.\src\v1_decoder.cpp	/^bool zmq::v1_decoder_t::one_byte_size_ready ()$/;"	f	class:zmq::v1_decoder_t	signature:()
zmq::v1_decoder_t::one_byte_size_ready	.\src\v1_decoder.hpp	/^        bool one_byte_size_ready ();$/;"	p	class:zmq::v1_decoder_t	access:private	signature:()
zmq::v1_decoder_t::operator =	.\src\v1_decoder.hpp	/^        void operator = (const v1_decoder_t&);$/;"	p	class:zmq::v1_decoder_t	access:private	signature:(const v1_decoder_t&)
zmq::v1_decoder_t::set_msg_sink	.\src\v1_decoder.cpp	/^void zmq::v1_decoder_t::set_msg_sink (i_msg_sink *msg_sink_)$/;"	f	class:zmq::v1_decoder_t	signature:(i_msg_sink *msg_sink_)
zmq::v1_decoder_t::set_msg_sink	.\src\v1_decoder.hpp	/^        virtual void set_msg_sink (i_msg_sink *msg_sink_);$/;"	p	class:zmq::v1_decoder_t	access:public	signature:(i_msg_sink *msg_sink_)
zmq::v1_decoder_t::tmpbuf	.\src\v1_decoder.hpp	/^        unsigned char tmpbuf [8];$/;"	m	class:zmq::v1_decoder_t	access:private
zmq::v1_decoder_t::v1_decoder_t	.\src\v1_decoder.cpp	/^zmq::v1_decoder_t::v1_decoder_t (size_t bufsize_,$/;"	f	class:zmq::v1_decoder_t	signature:(size_t bufsize_, int64_t maxmsgsize_, i_msg_sink *msg_sink_)
zmq::v1_decoder_t::v1_decoder_t	.\src\v1_decoder.hpp	/^        v1_decoder_t (const v1_decoder_t&);$/;"	p	class:zmq::v1_decoder_t	access:private	signature:(const v1_decoder_t&)
zmq::v1_decoder_t::v1_decoder_t	.\src\v1_decoder.hpp	/^        v1_decoder_t (size_t bufsize_,$/;"	p	class:zmq::v1_decoder_t	access:public	signature:(size_t bufsize_, int64_t maxmsgsize_, i_msg_sink *msg_sink_)
zmq::v1_decoder_t::~v1_decoder_t	.\src\v1_decoder.cpp	/^zmq::v1_decoder_t::~v1_decoder_t ()$/;"	f	class:zmq::v1_decoder_t	signature:()
zmq::v1_decoder_t::~v1_decoder_t	.\src\v1_decoder.hpp	/^        virtual ~v1_decoder_t ();$/;"	p	class:zmq::v1_decoder_t	access:public	signature:()
zmq::v1_encoder_t	.\src\v1_encoder.hpp	/^    class v1_encoder_t : public encoder_base_t <v1_encoder_t>$/;"	c	namespace:zmq	inherits:encoder_base_t
zmq::v1_encoder_t::in_progress	.\src\v1_encoder.hpp	/^        msg_t in_progress;$/;"	m	class:zmq::v1_encoder_t	access:private
zmq::v1_encoder_t::message_ready	.\src\v1_encoder.cpp	/^bool zmq::v1_encoder_t::message_ready ()$/;"	f	class:zmq::v1_encoder_t	signature:()
zmq::v1_encoder_t::message_ready	.\src\v1_encoder.hpp	/^        bool message_ready ();$/;"	p	class:zmq::v1_encoder_t	access:private	signature:()
zmq::v1_encoder_t::msg_source	.\src\v1_encoder.hpp	/^        i_msg_source *msg_source;$/;"	m	class:zmq::v1_encoder_t	access:private
zmq::v1_encoder_t::operator =	.\src\v1_encoder.hpp	/^        const v1_encoder_t &operator = (const v1_encoder_t&);$/;"	p	class:zmq::v1_encoder_t	access:private	signature:(const v1_encoder_t&)
zmq::v1_encoder_t::set_msg_source	.\src\v1_encoder.cpp	/^void zmq::v1_encoder_t::set_msg_source (i_msg_source *msg_source_)$/;"	f	class:zmq::v1_encoder_t	signature:(i_msg_source *msg_source_)
zmq::v1_encoder_t::set_msg_source	.\src\v1_encoder.hpp	/^        virtual void set_msg_source (i_msg_source *msg_source_);$/;"	p	class:zmq::v1_encoder_t	access:public	signature:(i_msg_source *msg_source_)
zmq::v1_encoder_t::size_ready	.\src\v1_encoder.cpp	/^bool zmq::v1_encoder_t::size_ready ()$/;"	f	class:zmq::v1_encoder_t	signature:()
zmq::v1_encoder_t::size_ready	.\src\v1_encoder.hpp	/^        bool size_ready ();$/;"	p	class:zmq::v1_encoder_t	access:private	signature:()
zmq::v1_encoder_t::tmpbuf	.\src\v1_encoder.hpp	/^        unsigned char tmpbuf [9];$/;"	m	class:zmq::v1_encoder_t	access:private
zmq::v1_encoder_t::v1_encoder_t	.\src\v1_encoder.cpp	/^zmq::v1_encoder_t::v1_encoder_t (size_t bufsize_, i_msg_source *msg_source_) :$/;"	f	class:zmq::v1_encoder_t	signature:(size_t bufsize_, i_msg_source *msg_source_)
zmq::v1_encoder_t::v1_encoder_t	.\src\v1_encoder.hpp	/^        v1_encoder_t (const v1_encoder_t&);$/;"	p	class:zmq::v1_encoder_t	access:private	signature:(const v1_encoder_t&)
zmq::v1_encoder_t::v1_encoder_t	.\src\v1_encoder.hpp	/^        v1_encoder_t (size_t bufsize_, i_msg_source *msg_source_);$/;"	p	class:zmq::v1_encoder_t	access:public	signature:(size_t bufsize_, i_msg_source *msg_source_)
zmq::v1_encoder_t::~v1_encoder_t	.\src\v1_encoder.cpp	/^zmq::v1_encoder_t::~v1_encoder_t ()$/;"	f	class:zmq::v1_encoder_t	signature:()
zmq::v1_encoder_t::~v1_encoder_t	.\src\v1_encoder.hpp	/^        virtual ~v1_encoder_t ();$/;"	p	class:zmq::v1_encoder_t	access:public	signature:()
zmq::v1_protocol_t	.\src\v1_protocol.hpp	/^    class v1_protocol_t$/;"	c	namespace:zmq
zmq::v1_protocol_t::large_flag	.\src\v1_protocol.hpp	/^            large_flag = 2$/;"	e	enum:zmq::v1_protocol_t::__anon52
zmq::v1_protocol_t::more_flag	.\src\v1_protocol.hpp	/^            more_flag = 1,$/;"	e	enum:zmq::v1_protocol_t::__anon52
zmq::win_error	.\src\err.cpp	/^void zmq::win_error (char *buffer_, size_t buffer_size_)$/;"	f	class:zmq	signature:(char *buffer_, size_t buffer_size_)
zmq::win_error	.\src\err.hpp	/^    void win_error (char *buffer_, size_t buffer_size_);$/;"	p	namespace:zmq	signature:(char *buffer_, size_t buffer_size_)
zmq::wsa_error	.\src\err.cpp	/^const char *zmq::wsa_error()$/;"	f	class:zmq	signature:()
zmq::wsa_error	.\src\err.hpp	/^    const char *wsa_error ();$/;"	p	namespace:zmq	signature:()
zmq::wsa_error_no	.\src\err.cpp	/^const char *zmq::wsa_error_no (int no_)$/;"	f	class:zmq	signature:(int no_)
zmq::wsa_error_no	.\src\err.hpp	/^    const char *wsa_error_no (int no_);$/;"	p	namespace:zmq	signature:(int no_)
zmq::wsa_error_to_errno	.\src\err.cpp	/^int zmq::wsa_error_to_errno (int errcode)$/;"	f	class:zmq	signature:(int errcode)
zmq::wsa_error_to_errno	.\src\err.hpp	/^    int wsa_error_to_errno (int errcode);$/;"	p	namespace:zmq	signature:(int errcode)
zmq::xpub_session_t	.\src\xpub.hpp	/^    class xpub_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
zmq::xpub_session_t::operator =	.\src\xpub.hpp	/^        const xpub_session_t &operator = (const xpub_session_t&);$/;"	p	class:zmq::xpub_session_t	access:private	signature:(const xpub_session_t&)
zmq::xpub_session_t::xpub_session_t	.\src\xpub.cpp	/^zmq::xpub_session_t::xpub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::xpub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::xpub_session_t::xpub_session_t	.\src\xpub.hpp	/^        xpub_session_t (const xpub_session_t&);$/;"	p	class:zmq::xpub_session_t	access:private	signature:(const xpub_session_t&)
zmq::xpub_session_t::xpub_session_t	.\src\xpub.hpp	/^        xpub_session_t (zmq::io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::xpub_session_t	access:public	signature:(zmq::io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::xpub_session_t::~xpub_session_t	.\src\xpub.cpp	/^zmq::xpub_session_t::~xpub_session_t ()$/;"	f	class:zmq::xpub_session_t	signature:()
zmq::xpub_session_t::~xpub_session_t	.\src\xpub.hpp	/^        ~xpub_session_t ();$/;"	p	class:zmq::xpub_session_t	access:public	signature:()
zmq::xpub_t	.\src\xpub.hpp	/^    class xpub_t :$/;"	c	namespace:zmq	inherits:socket_base_t
zmq::xpub_t::blob_t	.\src\xpub.hpp	/^        typedef std::basic_string <unsigned char> blob_t;$/;"	t	class:zmq::xpub_t	access:private
zmq::xpub_t::dist	.\src\xpub.hpp	/^        dist_t dist;$/;"	m	class:zmq::xpub_t	access:private
zmq::xpub_t::mark_as_matching	.\src\xpub.cpp	/^void zmq::xpub_t::mark_as_matching (pipe_t *pipe_, void *arg_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_, void *arg_)
zmq::xpub_t::mark_as_matching	.\src\xpub.hpp	/^        static void mark_as_matching (zmq::pipe_t *pipe_, void *arg_);$/;"	p	class:zmq::xpub_t	access:private	signature:(zmq::pipe_t *pipe_, void *arg_)
zmq::xpub_t::more	.\src\xpub.hpp	/^        bool more;$/;"	m	class:zmq::xpub_t	access:private
zmq::xpub_t::operator =	.\src\xpub.hpp	/^        const xpub_t &operator = (const xpub_t&);$/;"	p	class:zmq::xpub_t	access:private	signature:(const xpub_t&)
zmq::xpub_t::pending	.\src\xpub.hpp	/^        pending_t pending;$/;"	m	class:zmq::xpub_t	access:private
zmq::xpub_t::pending_t	.\src\xpub.hpp	/^        typedef std::deque <blob_t> pending_t;$/;"	t	class:zmq::xpub_t	access:private
zmq::xpub_t::send_unsubscription	.\src\xpub.cpp	/^void zmq::xpub_t::send_unsubscription (unsigned char *data_, size_t size_,$/;"	f	class:zmq::xpub_t	signature:(unsigned char *data_, size_t size_, void *arg_)
zmq::xpub_t::send_unsubscription	.\src\xpub.hpp	/^        static void send_unsubscription (unsigned char *data_, size_t size_,$/;"	p	class:zmq::xpub_t	access:private	signature:(unsigned char *data_, size_t size_, void *arg_)
zmq::xpub_t::subscriptions	.\src\xpub.hpp	/^        mtrie_t subscriptions;$/;"	m	class:zmq::xpub_t	access:private
zmq::xpub_t::verbose	.\src\xpub.hpp	/^        bool verbose;$/;"	m	class:zmq::xpub_t	access:private
zmq::xpub_t::xattach_pipe	.\src\xpub.cpp	/^void zmq::xpub_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::xpub_t::xattach_pipe	.\src\xpub.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_ = false);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_, bool icanhasall_ = false)
zmq::xpub_t::xhas_in	.\src\xpub.cpp	/^bool zmq::xpub_t::xhas_in ()$/;"	f	class:zmq::xpub_t	signature:()
zmq::xpub_t::xhas_in	.\src\xpub.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::xpub_t	access:public	signature:()
zmq::xpub_t::xhas_out	.\src\xpub.cpp	/^bool zmq::xpub_t::xhas_out ()$/;"	f	class:zmq::xpub_t	signature:()
zmq::xpub_t::xhas_out	.\src\xpub.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::xpub_t	access:public	signature:()
zmq::xpub_t::xpub_t	.\src\xpub.cpp	/^zmq::xpub_t::xpub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::xpub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::xpub_t::xpub_t	.\src\xpub.hpp	/^        xpub_t (const xpub_t&);$/;"	p	class:zmq::xpub_t	access:private	signature:(const xpub_t&)
zmq::xpub_t::xpub_t	.\src\xpub.hpp	/^        xpub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::xpub_t::xread_activated	.\src\xpub.cpp	/^void zmq::xpub_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_)
zmq::xpub_t::xread_activated	.\src\xpub.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::xpub_t::xrecv	.\src\xpub.cpp	/^int zmq::xpub_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::xpub_t	signature:(msg_t *msg_, int flags_)
zmq::xpub_t::xrecv	.\src\xpub.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::xpub_t::xsend	.\src\xpub.cpp	/^int zmq::xpub_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::xpub_t	signature:(msg_t *msg_, int flags_)
zmq::xpub_t::xsend	.\src\xpub.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::msg_t *msg_, int flags_)
zmq::xpub_t::xsetsockopt	.\src\xpub.cpp	/^int zmq::xpub_t::xsetsockopt (int option_, const void *optval_,$/;"	f	class:zmq::xpub_t	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::xpub_t::xsetsockopt	.\src\xpub.hpp	/^        int xsetsockopt (int option_, const void *optval_, size_t optvallen_);$/;"	p	class:zmq::xpub_t	access:public	signature:(int option_, const void *optval_, size_t optvallen_)
zmq::xpub_t::xterminated	.\src\xpub.cpp	/^void zmq::xpub_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_)
zmq::xpub_t::xterminated	.\src\xpub.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::xpub_t::xwrite_activated	.\src\xpub.cpp	/^void zmq::xpub_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::xpub_t	signature:(pipe_t *pipe_)
zmq::xpub_t::xwrite_activated	.\src\xpub.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xpub_t	access:public	signature:(zmq::pipe_t *pipe_)
zmq::xpub_t::~xpub_t	.\src\xpub.cpp	/^zmq::xpub_t::~xpub_t ()$/;"	f	class:zmq::xpub_t	signature:()
zmq::xpub_t::~xpub_t	.\src\xpub.hpp	/^        ~xpub_t ();$/;"	p	class:zmq::xpub_t	access:public	signature:()
zmq::xsub_session_t	.\src\xsub.hpp	/^    class xsub_session_t : public session_base_t$/;"	c	namespace:zmq	inherits:session_base_t
zmq::xsub_session_t::operator =	.\src\xsub.hpp	/^        const xsub_session_t &operator = (const xsub_session_t&);$/;"	p	class:zmq::xsub_session_t	access:private	signature:(const xsub_session_t&)
zmq::xsub_session_t::xsub_session_t	.\src\xsub.cpp	/^zmq::xsub_session_t::xsub_session_t (io_thread_t *io_thread_, bool connect_,$/;"	f	class:zmq::xsub_session_t	signature:(io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::xsub_session_t::xsub_session_t	.\src\xsub.hpp	/^        xsub_session_t (class io_thread_t *io_thread_, bool connect_,$/;"	p	class:zmq::xsub_session_t	access:public	signature:(class io_thread_t *io_thread_, bool connect_, socket_base_t *socket_, const options_t &options_, const address_t *addr_)
zmq::xsub_session_t::xsub_session_t	.\src\xsub.hpp	/^        xsub_session_t (const xsub_session_t&);$/;"	p	class:zmq::xsub_session_t	access:private	signature:(const xsub_session_t&)
zmq::xsub_session_t::~xsub_session_t	.\src\xsub.cpp	/^zmq::xsub_session_t::~xsub_session_t ()$/;"	f	class:zmq::xsub_session_t	signature:()
zmq::xsub_session_t::~xsub_session_t	.\src\xsub.hpp	/^        ~xsub_session_t ();$/;"	p	class:zmq::xsub_session_t	access:public	signature:()
zmq::xsub_t	.\src\xsub.hpp	/^    class xsub_t :$/;"	c	namespace:zmq	inherits:socket_base_t
zmq::xsub_t::dist	.\src\xsub.hpp	/^        dist_t dist;$/;"	m	class:zmq::xsub_t	access:private
zmq::xsub_t::fq	.\src\xsub.hpp	/^        fq_t fq;$/;"	m	class:zmq::xsub_t	access:private
zmq::xsub_t::has_message	.\src\xsub.hpp	/^        bool has_message;$/;"	m	class:zmq::xsub_t	access:private
zmq::xsub_t::match	.\src\xsub.cpp	/^bool zmq::xsub_t::match (msg_t *msg_)$/;"	f	class:zmq::xsub_t	signature:(msg_t *msg_)
zmq::xsub_t::match	.\src\xsub.hpp	/^        bool match (zmq::msg_t *msg_);$/;"	p	class:zmq::xsub_t	access:private	signature:(zmq::msg_t *msg_)
zmq::xsub_t::message	.\src\xsub.hpp	/^        msg_t message;$/;"	m	class:zmq::xsub_t	access:private
zmq::xsub_t::more	.\src\xsub.hpp	/^        bool more;$/;"	m	class:zmq::xsub_t	access:private
zmq::xsub_t::operator =	.\src\xsub.hpp	/^        const xsub_t &operator = (const xsub_t&);$/;"	p	class:zmq::xsub_t	access:private	signature:(const xsub_t&)
zmq::xsub_t::send_subscription	.\src\xsub.cpp	/^void zmq::xsub_t::send_subscription (unsigned char *data_, size_t size_,$/;"	f	class:zmq::xsub_t	signature:(unsigned char *data_, size_t size_, void *arg_)
zmq::xsub_t::send_subscription	.\src\xsub.hpp	/^        static void send_subscription (unsigned char *data_, size_t size_,$/;"	p	class:zmq::xsub_t	access:private	signature:(unsigned char *data_, size_t size_, void *arg_)
zmq::xsub_t::subscriptions	.\src\xsub.hpp	/^        trie_t subscriptions;$/;"	m	class:zmq::xsub_t	access:private
zmq::xsub_t::xattach_pipe	.\src\xsub.cpp	/^void zmq::xsub_t::xattach_pipe (pipe_t *pipe_, bool icanhasall_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_, bool icanhasall_)
zmq::xsub_t::xattach_pipe	.\src\xsub.hpp	/^        void xattach_pipe (zmq::pipe_t *pipe_, bool icanhasall_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_, bool icanhasall_)
zmq::xsub_t::xhas_in	.\src\xsub.cpp	/^bool zmq::xsub_t::xhas_in ()$/;"	f	class:zmq::xsub_t	signature:()
zmq::xsub_t::xhas_in	.\src\xsub.hpp	/^        bool xhas_in ();$/;"	p	class:zmq::xsub_t	access:protected	signature:()
zmq::xsub_t::xhas_out	.\src\xsub.cpp	/^bool zmq::xsub_t::xhas_out ()$/;"	f	class:zmq::xsub_t	signature:()
zmq::xsub_t::xhas_out	.\src\xsub.hpp	/^        bool xhas_out ();$/;"	p	class:zmq::xsub_t	access:protected	signature:()
zmq::xsub_t::xhiccuped	.\src\xsub.cpp	/^void zmq::xsub_t::xhiccuped (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
zmq::xsub_t::xhiccuped	.\src\xsub.hpp	/^        void xhiccuped (pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(pipe_t *pipe_)
zmq::xsub_t::xread_activated	.\src\xsub.cpp	/^void zmq::xsub_t::xread_activated (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
zmq::xsub_t::xread_activated	.\src\xsub.hpp	/^        void xread_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::xsub_t::xrecv	.\src\xsub.cpp	/^int zmq::xsub_t::xrecv (msg_t *msg_, int flags_)$/;"	f	class:zmq::xsub_t	signature:(msg_t *msg_, int flags_)
zmq::xsub_t::xrecv	.\src\xsub.hpp	/^        int xrecv (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::xsub_t::xsend	.\src\xsub.cpp	/^int zmq::xsub_t::xsend (msg_t *msg_, int flags_)$/;"	f	class:zmq::xsub_t	signature:(msg_t *msg_, int flags_)
zmq::xsub_t::xsend	.\src\xsub.hpp	/^        int xsend (zmq::msg_t *msg_, int flags_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::msg_t *msg_, int flags_)
zmq::xsub_t::xsub_t	.\src\xsub.cpp	/^zmq::xsub_t::xsub_t (class ctx_t *parent_, uint32_t tid_, int sid_) :$/;"	f	class:zmq::xsub_t	signature:(class ctx_t *parent_, uint32_t tid_, int sid_)
zmq::xsub_t::xsub_t	.\src\xsub.hpp	/^        xsub_t (const xsub_t&);$/;"	p	class:zmq::xsub_t	access:private	signature:(const xsub_t&)
zmq::xsub_t::xsub_t	.\src\xsub.hpp	/^        xsub_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);$/;"	p	class:zmq::xsub_t	access:public	signature:(zmq::ctx_t *parent_, uint32_t tid_, int sid_)
zmq::xsub_t::xterminated	.\src\xsub.cpp	/^void zmq::xsub_t::xterminated (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
zmq::xsub_t::xterminated	.\src\xsub.hpp	/^        void xterminated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::xsub_t::xwrite_activated	.\src\xsub.cpp	/^void zmq::xsub_t::xwrite_activated (pipe_t *pipe_)$/;"	f	class:zmq::xsub_t	signature:(pipe_t *pipe_)
zmq::xsub_t::xwrite_activated	.\src\xsub.hpp	/^        void xwrite_activated (zmq::pipe_t *pipe_);$/;"	p	class:zmq::xsub_t	access:protected	signature:(zmq::pipe_t *pipe_)
zmq::xsub_t::~xsub_t	.\src\xsub.cpp	/^zmq::xsub_t::~xsub_t ()$/;"	f	class:zmq::xsub_t	signature:()
zmq::xsub_t::~xsub_t	.\src\xsub.hpp	/^        ~xsub_t ();$/;"	p	class:zmq::xsub_t	access:public	signature:()
zmq::ypipe_t	.\src\ypipe.hpp	/^    template <typename T, int N> class ypipe_t$/;"	c	namespace:zmq
zmq::ypipe_t::c	.\src\ypipe.hpp	/^        atomic_ptr_t <T> c;$/;"	m	class:zmq::ypipe_t	access:protected
zmq::ypipe_t::check_read	.\src\ypipe.hpp	/^        inline bool check_read ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
zmq::ypipe_t::f	.\src\ypipe.hpp	/^        T *f;$/;"	m	class:zmq::ypipe_t	access:protected
zmq::ypipe_t::flush	.\src\ypipe.hpp	/^        inline bool flush ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
zmq::ypipe_t::operator =	.\src\ypipe.hpp	/^        const ypipe_t &operator = (const ypipe_t&);$/;"	p	class:zmq::ypipe_t	access:protected	signature:(const ypipe_t&)
zmq::ypipe_t::probe	.\src\ypipe.hpp	/^        inline bool probe (bool (*fn)(T &))$/;"	f	class:zmq::ypipe_t	access:public	signature:(bool (fn)T &))
zmq::ypipe_t::queue	.\src\ypipe.hpp	/^        yqueue_t <T, N> queue;$/;"	m	class:zmq::ypipe_t	access:protected
zmq::ypipe_t::r	.\src\ypipe.hpp	/^        T *r;$/;"	m	class:zmq::ypipe_t	access:protected
zmq::ypipe_t::read	.\src\ypipe.hpp	/^        inline bool read (T *value_)$/;"	f	class:zmq::ypipe_t	access:public	signature:(T *value_)
zmq::ypipe_t::unwrite	.\src\ypipe.hpp	/^        inline bool unwrite (T *value_)$/;"	f	class:zmq::ypipe_t	access:public	signature:(T *value_)
zmq::ypipe_t::w	.\src\ypipe.hpp	/^        T *w;$/;"	m	class:zmq::ypipe_t	access:protected
zmq::ypipe_t::write	.\src\ypipe.hpp	/^        inline void write (const T &value_, bool incomplete_)$/;"	f	class:zmq::ypipe_t	access:public	signature:(const T &value_, bool incomplete_)
zmq::ypipe_t::ypipe_t	.\src\ypipe.hpp	/^        inline ypipe_t ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
zmq::ypipe_t::ypipe_t	.\src\ypipe.hpp	/^        ypipe_t (const ypipe_t&);$/;"	p	class:zmq::ypipe_t	access:protected	signature:(const ypipe_t&)
zmq::ypipe_t::~ypipe_t	.\src\ypipe.hpp	/^        inline virtual ~ypipe_t ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
zmq::yqueue_t	.\src\yqueue.hpp	/^    template <typename T, int N> class yqueue_t$/;"	c	namespace:zmq
zmq::yqueue_t::back	.\src\yqueue.hpp	/^        inline T &back ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
zmq::yqueue_t::back_chunk	.\src\yqueue.hpp	/^        chunk_t *back_chunk;$/;"	m	class:zmq::yqueue_t	access:private
zmq::yqueue_t::back_pos	.\src\yqueue.hpp	/^        int back_pos;$/;"	m	class:zmq::yqueue_t	access:private
zmq::yqueue_t::begin_chunk	.\src\yqueue.hpp	/^        chunk_t *begin_chunk;$/;"	m	class:zmq::yqueue_t	access:private
zmq::yqueue_t::begin_pos	.\src\yqueue.hpp	/^        int begin_pos;$/;"	m	class:zmq::yqueue_t	access:private
zmq::yqueue_t::chunk_t	.\src\yqueue.hpp	/^        struct chunk_t$/;"	s	class:zmq::yqueue_t	access:private
zmq::yqueue_t::chunk_t::next	.\src\yqueue.hpp	/^             chunk_t *next;$/;"	m	struct:zmq::yqueue_t::chunk_t	access:public
zmq::yqueue_t::chunk_t::prev	.\src\yqueue.hpp	/^             chunk_t *prev;$/;"	m	struct:zmq::yqueue_t::chunk_t	access:public
zmq::yqueue_t::chunk_t::values	.\src\yqueue.hpp	/^             T values [N];$/;"	m	struct:zmq::yqueue_t::chunk_t	access:public
zmq::yqueue_t::end_chunk	.\src\yqueue.hpp	/^        chunk_t *end_chunk;$/;"	m	class:zmq::yqueue_t	access:private
zmq::yqueue_t::end_pos	.\src\yqueue.hpp	/^        int end_pos;$/;"	m	class:zmq::yqueue_t	access:private
zmq::yqueue_t::front	.\src\yqueue.hpp	/^        inline T &front ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
zmq::yqueue_t::operator =	.\src\yqueue.hpp	/^        const yqueue_t &operator = (const yqueue_t&);$/;"	p	class:zmq::yqueue_t	access:private	signature:(const yqueue_t&)
zmq::yqueue_t::pop	.\src\yqueue.hpp	/^        inline void pop ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
zmq::yqueue_t::push	.\src\yqueue.hpp	/^        inline void push ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
zmq::yqueue_t::spare_chunk	.\src\yqueue.hpp	/^        atomic_ptr_t<chunk_t> spare_chunk;$/;"	m	class:zmq::yqueue_t	access:private
zmq::yqueue_t::unpush	.\src\yqueue.hpp	/^        inline void unpush ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
zmq::yqueue_t::yqueue_t	.\src\yqueue.hpp	/^        inline yqueue_t ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
zmq::yqueue_t::yqueue_t	.\src\yqueue.hpp	/^        yqueue_t (const yqueue_t&);$/;"	p	class:zmq::yqueue_t	access:private	signature:(const yqueue_t&)
zmq::yqueue_t::~yqueue_t	.\src\yqueue.hpp	/^        inline ~yqueue_t ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
zmq::zmq_abort	.\src\err.cpp	/^void zmq::zmq_abort(const char *errmsg_)$/;"	f	class:zmq	signature:(const char *errmsg_)
zmq::zmq_abort	.\src\err.hpp	/^    void zmq_abort (const char *errmsg_);$/;"	p	namespace:zmq	signature:(const char *errmsg_)
zmq_abort	.\src\err.cpp	/^void zmq::zmq_abort(const char *errmsg_)$/;"	f	class:zmq	signature:(const char *errmsg_)
zmq_abort	.\src\err.hpp	/^    void zmq_abort (const char *errmsg_);$/;"	p	namespace:zmq	signature:(const char *errmsg_)
zmq_assert	.\src\err.hpp	104;"	d
zmq_bind	.\include\zmq.h	/^ZMQ_EXPORT int zmq_bind (void *s, const char *addr);$/;"	p	signature:(void *s, const char *addr)
zmq_bind	.\src\zmq.cpp	/^int zmq_bind (void *s_, const char *addr_)$/;"	f	signature:(void *s_, const char *addr_)
zmq_close	.\include\zmq.h	/^ZMQ_EXPORT int zmq_close (void *s);$/;"	p	signature:(void *s)
zmq_close	.\src\zmq.cpp	/^int zmq_close (void *s_)$/;"	f	signature:(void *s_)
zmq_connect	.\include\zmq.h	/^ZMQ_EXPORT int zmq_connect (void *s, const char *addr);$/;"	p	signature:(void *s, const char *addr)
zmq_connect	.\src\zmq.cpp	/^int zmq_connect (void *s_, const char *addr_)$/;"	f	signature:(void *s_, const char *addr_)
zmq_ctx_destroy	.\include\zmq.h	/^ZMQ_EXPORT int zmq_ctx_destroy (void *context);$/;"	p	signature:(void *context)
zmq_ctx_destroy	.\src\zmq.cpp	/^int zmq_ctx_destroy (void *ctx_)$/;"	f	signature:(void *ctx_)
zmq_ctx_get	.\include\zmq.h	/^ZMQ_EXPORT int zmq_ctx_get (void *context, int option);$/;"	p	signature:(void *context, int option)
zmq_ctx_get	.\src\zmq.cpp	/^int zmq_ctx_get (void *ctx_, int option_)$/;"	f	signature:(void *ctx_, int option_)
zmq_ctx_new	.\include\zmq.h	/^ZMQ_EXPORT void *zmq_ctx_new (void);$/;"	p	signature:(void)
zmq_ctx_new	.\src\zmq.cpp	/^void *zmq_ctx_new (void)$/;"	f	signature:(void)
zmq_ctx_set	.\include\zmq.h	/^ZMQ_EXPORT int zmq_ctx_set (void *context, int option, int optval);$/;"	p	signature:(void *context, int option, int optval)
zmq_ctx_set	.\src\zmq.cpp	/^int zmq_ctx_set (void *ctx_, int option_, int optval_)$/;"	f	signature:(void *ctx_, int option_, int optval_)
zmq_device	.\include\zmq.h	/^ZMQ_EXPORT int zmq_device (int type, void *frontend, void *backend);$/;"	p	signature:(int type, void *frontend, void *backend)
zmq_device	.\src\zmq.cpp	/^int zmq_device (int type, void *frontend_, void *backend_)$/;"	f	signature:(int type, void *frontend_, void *backend_)
zmq_disconnect	.\include\zmq.h	/^ZMQ_EXPORT int zmq_disconnect (void *s, const char *addr);$/;"	p	signature:(void *s, const char *addr)
zmq_disconnect	.\src\zmq.cpp	/^int zmq_disconnect (void *s_, const char *addr_)$/;"	f	signature:(void *s_, const char *addr_)
zmq_errno	.\include\zmq.h	/^ZMQ_EXPORT int zmq_errno (void);$/;"	p	signature:(void)
zmq_errno	.\src\zmq.cpp	/^int zmq_errno ()$/;"	f	signature:()
zmq_event_t	.\include\zmq.h	/^} zmq_event_t;$/;"	t	typeref:struct:__anon1
zmq_free_event	.\src\socket_base.hpp	/^    void zmq_free_event (void *data, void *hint);$/;"	p	signature:(void *data, void *hint)
zmq_free_event	.\src\zmq.cpp	/^void zmq_free_event (void *event_data, void *hint)$/;"	f	signature:(void *event_data, void *hint)
zmq_free_fn	.\include\zmq.h	/^typedef void (zmq_free_fn) (void *data, void *hint);$/;"	t
zmq_getsockopt	.\include\zmq.h	/^ZMQ_EXPORT int zmq_getsockopt (void *s, int option, void *optval,$/;"	p	signature:(void *s, int option, void *optval, size_t *optvallen)
zmq_getsockopt	.\src\zmq.cpp	/^int zmq_getsockopt (void *s_, int option_, void *optval_, size_t *optvallen_)$/;"	f	signature:(void *s_, int option_, void *optval_, size_t *optvallen_)
zmq_init	.\include\zmq.h	/^ZMQ_EXPORT void *zmq_init (int io_threads);$/;"	p	signature:(int io_threads)
zmq_init	.\src\zmq.cpp	/^void *zmq_init (int io_threads_)$/;"	f	signature:(int io_threads_)
zmq_msg_close	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_close (zmq_msg_t *msg);$/;"	p	signature:(zmq_msg_t *msg)
zmq_msg_close	.\src\zmq.cpp	/^int zmq_msg_close (zmq_msg_t *msg_)$/;"	f	signature:(zmq_msg_t *msg_)
zmq_msg_copy	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_copy (zmq_msg_t *dest, zmq_msg_t *src);$/;"	p	signature:(zmq_msg_t *dest, zmq_msg_t *src)
zmq_msg_copy	.\src\zmq.cpp	/^int zmq_msg_copy (zmq_msg_t *dest_, zmq_msg_t *src_)$/;"	f	signature:(zmq_msg_t *dest_, zmq_msg_t *src_)
zmq_msg_data	.\include\zmq.h	/^ZMQ_EXPORT void *zmq_msg_data (zmq_msg_t *msg);$/;"	p	signature:(zmq_msg_t *msg)
zmq_msg_data	.\src\zmq.cpp	/^void *zmq_msg_data (zmq_msg_t *msg_)$/;"	f	signature:(zmq_msg_t *msg_)
zmq_msg_get	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_get (zmq_msg_t *msg, int option);$/;"	p	signature:(zmq_msg_t *msg, int option)
zmq_msg_get	.\src\zmq.cpp	/^int zmq_msg_get (zmq_msg_t *msg_, int option_)$/;"	f	signature:(zmq_msg_t *msg_, int option_)
zmq_msg_init	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_init (zmq_msg_t *msg);$/;"	p	signature:(zmq_msg_t *msg)
zmq_msg_init	.\src\zmq.cpp	/^int zmq_msg_init (zmq_msg_t *msg_)$/;"	f	signature:(zmq_msg_t *msg_)
zmq_msg_init_data	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_init_data (zmq_msg_t *msg, void *data,$/;"	p	signature:(zmq_msg_t *msg, void *data, size_t size, zmq_free_fn *ffn, void *hint)
zmq_msg_init_data	.\src\zmq.cpp	/^int zmq_msg_init_data (zmq_msg_t *msg_, void *data_, size_t size_,$/;"	f	signature:(zmq_msg_t *msg_, void *data_, size_t size_, zmq_free_fn *ffn_, void *hint_)
zmq_msg_init_size	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_init_size (zmq_msg_t *msg, size_t size);$/;"	p	signature:(zmq_msg_t *msg, size_t size)
zmq_msg_init_size	.\src\zmq.cpp	/^int zmq_msg_init_size (zmq_msg_t *msg_, size_t size_)$/;"	f	signature:(zmq_msg_t *msg_, size_t size_)
zmq_msg_more	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_more (zmq_msg_t *msg);$/;"	p	signature:(zmq_msg_t *msg)
zmq_msg_more	.\src\zmq.cpp	/^int zmq_msg_more (zmq_msg_t *msg_)$/;"	f	signature:(zmq_msg_t *msg_)
zmq_msg_move	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_move (zmq_msg_t *dest, zmq_msg_t *src);$/;"	p	signature:(zmq_msg_t *dest, zmq_msg_t *src)
zmq_msg_move	.\src\zmq.cpp	/^int zmq_msg_move (zmq_msg_t *dest_, zmq_msg_t *src_)$/;"	f	signature:(zmq_msg_t *dest_, zmq_msg_t *src_)
zmq_msg_recv	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_recv (zmq_msg_t *msg, void *s, int flags);$/;"	p	signature:(zmq_msg_t *msg, void *s, int flags)
zmq_msg_recv	.\src\zmq.cpp	/^int zmq_msg_recv (zmq_msg_t *msg_, void *s_, int flags_)$/;"	f	signature:(zmq_msg_t *msg_, void *s_, int flags_)
zmq_msg_send	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_send (zmq_msg_t *msg, void *s, int flags);$/;"	p	signature:(zmq_msg_t *msg, void *s, int flags)
zmq_msg_send	.\src\zmq.cpp	/^int zmq_msg_send (zmq_msg_t *msg_, void *s_, int flags_)$/;"	f	signature:(zmq_msg_t *msg_, void *s_, int flags_)
zmq_msg_set	.\include\zmq.h	/^ZMQ_EXPORT int zmq_msg_set (zmq_msg_t *msg, int option, int optval);$/;"	p	signature:(zmq_msg_t *msg, int option, int optval)
zmq_msg_set	.\src\zmq.cpp	/^int zmq_msg_set (zmq_msg_t *, int, int)$/;"	f	signature:(zmq_msg_t *, int, int)
zmq_msg_size	.\include\zmq.h	/^ZMQ_EXPORT size_t zmq_msg_size (zmq_msg_t *msg);$/;"	p	signature:(zmq_msg_t *msg)
zmq_msg_size	.\src\zmq.cpp	/^size_t zmq_msg_size (zmq_msg_t *msg_)$/;"	f	signature:(zmq_msg_t *msg_)
zmq_msg_size_check	.\src\msg.cpp	/^typedef char zmq_msg_size_check$/;"	t	file:
zmq_msg_t	.\include\zmq.h	/^typedef struct zmq_msg_t {unsigned char _ [32];} zmq_msg_t;$/;"	s
zmq_msg_t	.\include\zmq.h	/^typedef struct zmq_msg_t {unsigned char _ [32];} zmq_msg_t;$/;"	t	typeref:struct:zmq_msg_t
zmq_msg_t::_	.\include\zmq.h	/^typedef struct zmq_msg_t {unsigned char _ [32];} zmq_msg_t;$/;"	m	struct:zmq_msg_t	access:public
zmq_poll	.\include\zmq.h	/^ZMQ_EXPORT int zmq_poll (zmq_pollitem_t *items, int nitems, long timeout);$/;"	p	signature:(zmq_pollitem_t *items, int nitems, long timeout)
zmq_poll	.\src\zmq.cpp	/^int zmq_poll (zmq_pollitem_t *items_, int nitems_, long timeout_)$/;"	f	signature:(zmq_pollitem_t *items_, int nitems_, long timeout_)
zmq_pollitem_t	.\include\zmq.h	/^} zmq_pollitem_t;$/;"	t	typeref:struct:__anon13
zmq_proxy	.\include\zmq.h	/^ZMQ_EXPORT int zmq_proxy (void *frontend, void *backend, void *capture);$/;"	p	signature:(void *frontend, void *backend, void *capture)
zmq_proxy	.\src\zmq.cpp	/^int zmq_proxy (void *frontend_, void *backend_, void *control_)$/;"	f	signature:(void *frontend_, void *backend_, void *control_)
zmq_recv	.\include\zmq.h	/^ZMQ_EXPORT int zmq_recv (void *s, void *buf, size_t len, int flags);$/;"	p	signature:(void *s, void *buf, size_t len, int flags)
zmq_recv	.\src\zmq.cpp	/^int zmq_recv (void *s_, void *buf_, size_t len_, int flags_)$/;"	f	signature:(void *s_, void *buf_, size_t len_, int flags_)
zmq_recviov	.\include\zmq.h	/^ZMQ_EXPORT int zmq_recviov (void *s, struct iovec *iov, size_t *count, int flags);$/;"	p	signature:(void *s, struct iovec *iov, size_t *count, int flags)
zmq_recviov	.\src\zmq.cpp	/^int zmq_recviov (void *s_, iovec *a_, size_t *count_, int flags_)$/;"	f	signature:(void *s_, iovec *a_, size_t *count_, int flags_)
zmq_recvmsg	.\include\zmq.h	/^ZMQ_EXPORT int zmq_recvmsg (void *s, zmq_msg_t *msg, int flags);$/;"	p	signature:(void *s, zmq_msg_t *msg, int flags)
zmq_recvmsg	.\src\zmq.cpp	/^int zmq_recvmsg (void *s_, zmq_msg_t *msg_, int flags_)$/;"	f	signature:(void *s_, zmq_msg_t *msg_, int flags_)
zmq_send	.\include\zmq.h	/^ZMQ_EXPORT int zmq_send (void *s, const void *buf, size_t len, int flags);$/;"	p	signature:(void *s, const void *buf, size_t len, int flags)
zmq_send	.\src\zmq.cpp	/^int zmq_send (void *s_, const void *buf_, size_t len_, int flags_)$/;"	f	signature:(void *s_, const void *buf_, size_t len_, int flags_)
zmq_sendiov	.\include\zmq.h	/^ZMQ_EXPORT int zmq_sendiov (void *s, struct iovec *iov, size_t count, int flags);$/;"	p	signature:(void *s, struct iovec *iov, size_t count, int flags)
zmq_sendiov	.\src\zmq.cpp	/^int zmq_sendiov (void *s_, iovec *a_, size_t count_, int flags_)$/;"	f	signature:(void *s_, iovec *a_, size_t count_, int flags_)
zmq_sendmsg	.\include\zmq.h	/^ZMQ_EXPORT int zmq_sendmsg (void *s, zmq_msg_t *msg, int flags);$/;"	p	signature:(void *s, zmq_msg_t *msg, int flags)
zmq_sendmsg	.\src\zmq.cpp	/^int zmq_sendmsg (void *s_, zmq_msg_t *msg_, int flags_)$/;"	f	signature:(void *s_, zmq_msg_t *msg_, int flags_)
zmq_setsockopt	.\include\zmq.h	/^ZMQ_EXPORT int zmq_setsockopt (void *s, int option, const void *optval,$/;"	p	signature:(void *s, int option, const void *optval, size_t optvallen)
zmq_setsockopt	.\src\zmq.cpp	/^int zmq_setsockopt (void *s_, int option_, const void *optval_,$/;"	f	signature:(void *s_, int option_, const void *optval_, size_t optvallen_)
zmq_sleep	.\include\zmq_utils.h	/^ZMQ_EXPORT void zmq_sleep (int seconds_);$/;"	p	signature:(int seconds_)
zmq_sleep	.\src\zmq.cpp	/^void zmq_sleep (int seconds_)$/;"	f	signature:(int seconds_)
zmq_sleep	.\src\zmq_utils.cpp	/^void zmq_sleep (int seconds_)$/;"	f	signature:(int seconds_)
zmq_socket	.\include\zmq.h	/^ZMQ_EXPORT void *zmq_socket (void *, int type);$/;"	p	signature:(void *, int type)
zmq_socket	.\src\zmq.cpp	/^void *zmq_socket (void *ctx_, int type_)$/;"	f	signature:(void *ctx_, int type_)
zmq_socket_monitor	.\include\zmq.h	/^ZMQ_EXPORT int zmq_socket_monitor (void *s, const char *addr, int events);$/;"	p	signature:(void *s, const char *addr, int events)
zmq_socket_monitor	.\src\zmq.cpp	/^int zmq_socket_monitor (void *s_, const char *addr_, int events_)$/;"	f	signature:(void *s_, const char *addr_, int events_)
zmq_stopwatch_start	.\include\zmq_utils.h	/^ZMQ_EXPORT void *zmq_stopwatch_start (void);$/;"	p	signature:(void)
zmq_stopwatch_start	.\src\zmq.cpp	/^void *zmq_stopwatch_start ()$/;"	f	signature:()
zmq_stopwatch_start	.\src\zmq_utils.cpp	/^void *zmq_stopwatch_start ()$/;"	f	signature:()
zmq_stopwatch_stop	.\include\zmq_utils.h	/^ZMQ_EXPORT unsigned long zmq_stopwatch_stop (void *watch_);$/;"	p	signature:(void *watch_)
zmq_stopwatch_stop	.\src\zmq.cpp	/^unsigned long zmq_stopwatch_stop (void *watch_)$/;"	f	signature:(void *watch_)
zmq_stopwatch_stop	.\src\zmq_utils.cpp	/^unsigned long zmq_stopwatch_stop (void *watch_)$/;"	f	signature:(void *watch_)
zmq_strerror	.\include\zmq.h	/^ZMQ_EXPORT const char *zmq_strerror (int errnum);$/;"	p	signature:(int errnum)
zmq_strerror	.\src\zmq.cpp	/^const char *zmq_strerror (int errnum_)$/;"	f	signature:(int errnum_)
zmq_term	.\include\zmq.h	/^ZMQ_EXPORT int zmq_term (void *context);$/;"	p	signature:(void *context)
zmq_term	.\src\zmq.cpp	/^int zmq_term (void *ctx_)$/;"	f	signature:(void *ctx_)
zmq_unbind	.\include\zmq.h	/^ZMQ_EXPORT int zmq_unbind (void *s, const char *addr);$/;"	p	signature:(void *s, const char *addr)
zmq_unbind	.\src\zmq.cpp	/^int zmq_unbind (void *s_, const char *addr_)$/;"	f	signature:(void *s_, const char *addr_)
zmq_version	.\include\zmq.h	/^ZMQ_EXPORT void zmq_version (int *major, int *minor, int *patch);$/;"	p	signature:(int *major, int *minor, int *patch)
zmq_version	.\src\zmq.cpp	/^void zmq_version (int *major_, int *minor_, int *patch_)$/;"	f	signature:(int *major_, int *minor_, int *patch_)
~address_t	.\src\address.cpp	/^zmq::address_t::~address_t ()$/;"	f	class:zmq::address_t	signature:()
~address_t	.\src\address.hpp	/^        ~address_t ();$/;"	p	struct:zmq::address_t	access:public	signature:()
~array_item_t	.\src\array.hpp	/^        inline virtual ~array_item_t ()$/;"	f	class:zmq::array_item_t	access:public	signature:()
~array_t	.\src\array.hpp	/^        inline ~array_t ()$/;"	f	class:zmq::array_t	access:public	signature:()
~atomic_counter_t	.\src\atomic_counter.hpp	/^        inline ~atomic_counter_t ()$/;"	f	class:zmq::atomic_counter_t	access:public	signature:()
~atomic_ptr_t	.\src\atomic_ptr.hpp	/^        inline ~atomic_ptr_t ()$/;"	f	class:zmq::atomic_ptr_t	access:public	signature:()
~clock_t	.\src\clock.cpp	/^zmq::clock_t::~clock_t ()$/;"	f	class:zmq::clock_t	signature:()
~clock_t	.\src\clock.hpp	/^        ~clock_t ();$/;"	p	class:zmq::clock_t	access:public	signature:()
~ctx_t	.\src\ctx.cpp	/^zmq::ctx_t::~ctx_t ()$/;"	f	class:zmq::ctx_t	signature:()
~ctx_t	.\src\ctx.hpp	/^        ~ctx_t ();$/;"	p	class:zmq::ctx_t	access:public	signature:()
~dealer_session_t	.\src\dealer.cpp	/^zmq::dealer_session_t::~dealer_session_t ()$/;"	f	class:zmq::dealer_session_t	signature:()
~dealer_session_t	.\src\dealer.hpp	/^        ~dealer_session_t ();$/;"	p	class:zmq::dealer_session_t	access:public	signature:()
~dealer_t	.\src\dealer.cpp	/^zmq::dealer_t::~dealer_t ()$/;"	f	class:zmq::dealer_t	signature:()
~dealer_t	.\src\dealer.hpp	/^        ~dealer_t ();$/;"	p	class:zmq::dealer_t	access:public	signature:()
~decoder_base_t	.\src\decoder.hpp	/^        inline virtual ~decoder_base_t ()$/;"	f	class:zmq::decoder_base_t	access:public	signature:()
~decoder_t	.\src\decoder.cpp	/^zmq::decoder_t::~decoder_t ()$/;"	f	class:zmq::decoder_t	signature:()
~decoder_t	.\src\decoder.hpp	/^        ~decoder_t ();$/;"	p	class:zmq::decoder_t	access:public	signature:()
~devpoll_t	.\src\devpoll.cpp	/^zmq::devpoll_t::~devpoll_t ()$/;"	f	class:zmq::devpoll_t	signature:()
~devpoll_t	.\src\devpoll.hpp	/^        ~devpoll_t ();$/;"	p	class:zmq::devpoll_t	access:public	signature:()
~dist_t	.\src\dist.cpp	/^zmq::dist_t::~dist_t ()$/;"	f	class:zmq::dist_t	signature:()
~dist_t	.\src\dist.hpp	/^        ~dist_t ();$/;"	p	class:zmq::dist_t	access:public	signature:()
~encoder_base_t	.\src\encoder.hpp	/^        inline virtual ~encoder_base_t ()$/;"	f	class:zmq::encoder_base_t	access:public	signature:()
~encoder_t	.\src\encoder.cpp	/^zmq::encoder_t::~encoder_t ()$/;"	f	class:zmq::encoder_t	signature:()
~encoder_t	.\src\encoder.hpp	/^        ~encoder_t ();$/;"	p	class:zmq::encoder_t	access:public	signature:()
~epoll_t	.\src\epoll.cpp	/^zmq::epoll_t::~epoll_t ()$/;"	f	class:zmq::epoll_t	signature:()
~epoll_t	.\src\epoll.hpp	/^        ~epoll_t ();$/;"	p	class:zmq::epoll_t	access:public	signature:()
~fq_t	.\src\fq.cpp	/^zmq::fq_t::~fq_t ()$/;"	f	class:zmq::fq_t	signature:()
~fq_t	.\src\fq.hpp	/^        ~fq_t ();$/;"	p	class:zmq::fq_t	access:public	signature:()
~i_decoder	.\src\i_decoder.hpp	/^        virtual ~i_decoder () {}$/;"	f	struct:zmq::i_decoder	access:public	signature:()
~i_encoder	.\src\i_encoder.hpp	/^        virtual ~i_encoder () {}$/;"	f	struct:zmq::i_encoder	access:public	signature:()
~i_engine	.\src\i_engine.hpp	/^        virtual ~i_engine () {}$/;"	f	struct:zmq::i_engine	access:public	signature:()
~i_msg_sink	.\src\i_msg_sink.hpp	/^        virtual ~i_msg_sink () {}$/;"	f	struct:zmq::i_msg_sink	access:public	signature:()
~i_msg_source	.\src\i_msg_source.hpp	/^        virtual ~i_msg_source () {}$/;"	f	struct:zmq::i_msg_source	access:public	signature:()
~i_pipe_events	.\src\pipe.hpp	/^        virtual ~i_pipe_events () {}$/;"	f	struct:zmq::i_pipe_events	access:public	signature:()
~i_poll_events	.\src\i_poll_events.hpp	/^        virtual ~i_poll_events () {}$/;"	f	struct:zmq::i_poll_events	access:public	signature:()
~io_object_t	.\src\io_object.cpp	/^zmq::io_object_t::~io_object_t ()$/;"	f	class:zmq::io_object_t	signature:()
~io_object_t	.\src\io_object.hpp	/^        ~io_object_t ();$/;"	p	class:zmq::io_object_t	access:public	signature:()
~io_thread_t	.\src\io_thread.cpp	/^zmq::io_thread_t::~io_thread_t ()$/;"	f	class:zmq::io_thread_t	signature:()
~io_thread_t	.\src\io_thread.hpp	/^        ~io_thread_t ();$/;"	p	class:zmq::io_thread_t	access:public	signature:()
~ipc_address_t	.\src\ipc_address.cpp	/^zmq::ipc_address_t::~ipc_address_t ()$/;"	f	class:zmq::ipc_address_t	signature:()
~ipc_address_t	.\src\ipc_address.hpp	/^        ~ipc_address_t ();$/;"	p	class:zmq::ipc_address_t	access:public	signature:()
~ipc_connecter_t	.\src\ipc_connecter.cpp	/^zmq::ipc_connecter_t::~ipc_connecter_t ()$/;"	f	class:zmq::ipc_connecter_t	signature:()
~ipc_connecter_t	.\src\ipc_connecter.hpp	/^        ~ipc_connecter_t ();$/;"	p	class:zmq::ipc_connecter_t	access:public	signature:()
~ipc_listener_t	.\src\ipc_listener.cpp	/^zmq::ipc_listener_t::~ipc_listener_t ()$/;"	f	class:zmq::ipc_listener_t	signature:()
~ipc_listener_t	.\src\ipc_listener.hpp	/^        ~ipc_listener_t ();$/;"	p	class:zmq::ipc_listener_t	access:public	signature:()
~kqueue_t	.\src\kqueue.cpp	/^zmq::kqueue_t::~kqueue_t ()$/;"	f	class:zmq::kqueue_t	signature:()
~kqueue_t	.\src\kqueue.hpp	/^        ~kqueue_t ();$/;"	p	class:zmq::kqueue_t	access:public	signature:()
~lb_t	.\src\lb.cpp	/^zmq::lb_t::~lb_t ()$/;"	f	class:zmq::lb_t	signature:()
~lb_t	.\src\lb.hpp	/^        ~lb_t ();$/;"	p	class:zmq::lb_t	access:public	signature:()
~mailbox_t	.\src\mailbox.cpp	/^zmq::mailbox_t::~mailbox_t ()$/;"	f	class:zmq::mailbox_t	signature:()
~mailbox_t	.\src\mailbox.hpp	/^        ~mailbox_t ();$/;"	p	class:zmq::mailbox_t	access:public	signature:()
~mtrie_t	.\src\mtrie.cpp	/^zmq::mtrie_t::~mtrie_t ()$/;"	f	class:zmq::mtrie_t	signature:()
~mtrie_t	.\src\mtrie.hpp	/^        ~mtrie_t ();$/;"	p	class:zmq::mtrie_t	access:public	signature:()
~mutex_t	.\src\mutex.hpp	/^        inline ~mutex_t ()$/;"	f	class:zmq::mutex_t	access:public	signature:()
~object_t	.\src\object.cpp	/^zmq::object_t::~object_t ()$/;"	f	class:zmq::object_t	signature:()
~object_t	.\src\object.hpp	/^        virtual ~object_t ();$/;"	p	class:zmq::object_t	access:public	signature:()
~own_t	.\src\own.cpp	/^zmq::own_t::~own_t ()$/;"	f	class:zmq::own_t	signature:()
~own_t	.\src\own.hpp	/^        virtual ~own_t ();$/;"	p	class:zmq::own_t	access:protected	signature:()
~pair_session_t	.\src\pair.cpp	/^zmq::pair_session_t::~pair_session_t ()$/;"	f	class:zmq::pair_session_t	signature:()
~pair_session_t	.\src\pair.hpp	/^        ~pair_session_t ();$/;"	p	class:zmq::pair_session_t	access:public	signature:()
~pair_t	.\src\pair.cpp	/^zmq::pair_t::~pair_t ()$/;"	f	class:zmq::pair_t	signature:()
~pair_t	.\src\pair.hpp	/^        ~pair_t ();$/;"	p	class:zmq::pair_t	access:public	signature:()
~pgm_receiver_t	.\src\pgm_receiver.cpp	/^zmq::pgm_receiver_t::~pgm_receiver_t ()$/;"	f	class:zmq::pgm_receiver_t	signature:()
~pgm_receiver_t	.\src\pgm_receiver.hpp	/^        ~pgm_receiver_t ();$/;"	p	class:zmq::pgm_receiver_t	access:public	signature:()
~pgm_sender_t	.\src\pgm_sender.cpp	/^zmq::pgm_sender_t::~pgm_sender_t ()$/;"	f	class:zmq::pgm_sender_t	signature:()
~pgm_sender_t	.\src\pgm_sender.hpp	/^        ~pgm_sender_t ();$/;"	p	class:zmq::pgm_sender_t	access:public	signature:()
~pgm_socket_t	.\src\pgm_socket.cpp	/^zmq::pgm_socket_t::~pgm_socket_t ()$/;"	f	class:zmq::pgm_socket_t	signature:()
~pgm_socket_t	.\src\pgm_socket.hpp	/^        ~pgm_socket_t ();$/;"	p	class:zmq::pgm_socket_t	access:public	signature:()
~pipe_t	.\src\pipe.cpp	/^zmq::pipe_t::~pipe_t ()$/;"	f	class:zmq::pipe_t	signature:()
~pipe_t	.\src\pipe.hpp	/^        ~pipe_t ();$/;"	p	class:zmq::pipe_t	access:private	signature:()
~poll_t	.\src\poll.cpp	/^zmq::poll_t::~poll_t ()$/;"	f	class:zmq::poll_t	signature:()
~poll_t	.\src\poll.hpp	/^        ~poll_t ();$/;"	p	class:zmq::poll_t	access:public	signature:()
~poller_base_t	.\src\poller_base.cpp	/^zmq::poller_base_t::~poller_base_t ()$/;"	f	class:zmq::poller_base_t	signature:()
~poller_base_t	.\src\poller_base.hpp	/^        virtual ~poller_base_t ();$/;"	p	class:zmq::poller_base_t	access:public	signature:()
~pub_session_t	.\src\pub.cpp	/^zmq::pub_session_t::~pub_session_t ()$/;"	f	class:zmq::pub_session_t	signature:()
~pub_session_t	.\src\pub.hpp	/^        ~pub_session_t ();$/;"	p	class:zmq::pub_session_t	access:public	signature:()
~pub_t	.\src\pub.cpp	/^zmq::pub_t::~pub_t ()$/;"	f	class:zmq::pub_t	signature:()
~pub_t	.\src\pub.hpp	/^        ~pub_t ();$/;"	p	class:zmq::pub_t	access:public	signature:()
~pull_session_t	.\src\pull.cpp	/^zmq::pull_session_t::~pull_session_t ()$/;"	f	class:zmq::pull_session_t	signature:()
~pull_session_t	.\src\pull.hpp	/^        ~pull_session_t ();$/;"	p	class:zmq::pull_session_t	access:public	signature:()
~pull_t	.\src\pull.cpp	/^zmq::pull_t::~pull_t ()$/;"	f	class:zmq::pull_t	signature:()
~pull_t	.\src\pull.hpp	/^        ~pull_t ();$/;"	p	class:zmq::pull_t	access:public	signature:()
~push_session_t	.\src\push.cpp	/^zmq::push_session_t::~push_session_t ()$/;"	f	class:zmq::push_session_t	signature:()
~push_session_t	.\src\push.hpp	/^        ~push_session_t ();$/;"	p	class:zmq::push_session_t	access:public	signature:()
~push_t	.\src\push.cpp	/^zmq::push_t::~push_t ()$/;"	f	class:zmq::push_t	signature:()
~push_t	.\src\push.hpp	/^        ~push_t ();$/;"	p	class:zmq::push_t	access:public	signature:()
~reaper_t	.\src\reaper.cpp	/^zmq::reaper_t::~reaper_t ()$/;"	f	class:zmq::reaper_t	signature:()
~reaper_t	.\src\reaper.hpp	/^        ~reaper_t ();$/;"	p	class:zmq::reaper_t	access:public	signature:()
~rep_session_t	.\src\rep.cpp	/^zmq::rep_session_t::~rep_session_t ()$/;"	f	class:zmq::rep_session_t	signature:()
~rep_session_t	.\src\rep.hpp	/^        ~rep_session_t ();$/;"	p	class:zmq::rep_session_t	access:public	signature:()
~rep_t	.\src\rep.cpp	/^zmq::rep_t::~rep_t ()$/;"	f	class:zmq::rep_t	signature:()
~rep_t	.\src\rep.hpp	/^        ~rep_t ();$/;"	p	class:zmq::rep_t	access:public	signature:()
~req_session_t	.\src\req.cpp	/^zmq::req_session_t::~req_session_t ()$/;"	f	class:zmq::req_session_t	signature:()
~req_session_t	.\src\req.hpp	/^        ~req_session_t ();$/;"	p	class:zmq::req_session_t	access:public	signature:()
~req_t	.\src\req.cpp	/^zmq::req_t::~req_t ()$/;"	f	class:zmq::req_t	signature:()
~req_t	.\src\req.hpp	/^        ~req_t ();$/;"	p	class:zmq::req_t	access:public	signature:()
~router_session_t	.\src\router.cpp	/^zmq::router_session_t::~router_session_t ()$/;"	f	class:zmq::router_session_t	signature:()
~router_session_t	.\src\router.hpp	/^        ~router_session_t ();$/;"	p	class:zmq::router_session_t	access:public	signature:()
~router_t	.\src\router.cpp	/^zmq::router_t::~router_t ()$/;"	f	class:zmq::router_t	signature:()
~router_t	.\src\router.hpp	/^        ~router_t ();$/;"	p	class:zmq::router_t	access:public	signature:()
~select_t	.\src\select.cpp	/^zmq::select_t::~select_t ()$/;"	f	class:zmq::select_t	signature:()
~select_t	.\src\select.hpp	/^        ~select_t ();$/;"	p	class:zmq::select_t	access:public	signature:()
~session_base_t	.\src\session_base.cpp	/^zmq::session_base_t::~session_base_t ()$/;"	f	class:zmq::session_base_t	signature:()
~session_base_t	.\src\session_base.hpp	/^        virtual ~session_base_t ();$/;"	p	class:zmq::session_base_t	access:protected	signature:()
~signaler_t	.\src\signaler.cpp	/^zmq::signaler_t::~signaler_t ()$/;"	f	class:zmq::signaler_t	signature:()
~signaler_t	.\src\signaler.hpp	/^        ~signaler_t ();$/;"	p	class:zmq::signaler_t	access:public	signature:()
~socket_base_t	.\src\socket_base.cpp	/^zmq::socket_base_t::~socket_base_t ()$/;"	f	class:zmq::socket_base_t	signature:()
~socket_base_t	.\src\socket_base.hpp	/^        virtual ~socket_base_t ();$/;"	p	class:zmq::socket_base_t	access:protected	signature:()
~stream_engine_t	.\src\stream_engine.cpp	/^zmq::stream_engine_t::~stream_engine_t ()$/;"	f	class:zmq::stream_engine_t	signature:()
~stream_engine_t	.\src\stream_engine.hpp	/^        ~stream_engine_t ();$/;"	p	class:zmq::stream_engine_t	access:public	signature:()
~sub_session_t	.\src\sub.cpp	/^zmq::sub_session_t::~sub_session_t ()$/;"	f	class:zmq::sub_session_t	signature:()
~sub_session_t	.\src\sub.hpp	/^        ~sub_session_t ();$/;"	p	class:zmq::sub_session_t	access:public	signature:()
~sub_t	.\src\sub.cpp	/^zmq::sub_t::~sub_t ()$/;"	f	class:zmq::sub_t	signature:()
~sub_t	.\src\sub.hpp	/^        ~sub_t ();$/;"	p	class:zmq::sub_t	access:public	signature:()
~tcp_address_t	.\src\tcp_address.cpp	/^zmq::tcp_address_t::~tcp_address_t ()$/;"	f	class:zmq::tcp_address_t	signature:()
~tcp_address_t	.\src\tcp_address.hpp	/^        virtual ~tcp_address_t ();$/;"	p	class:zmq::tcp_address_t	access:public	signature:()
~tcp_connecter_t	.\src\tcp_connecter.cpp	/^zmq::tcp_connecter_t::~tcp_connecter_t ()$/;"	f	class:zmq::tcp_connecter_t	signature:()
~tcp_connecter_t	.\src\tcp_connecter.hpp	/^        ~tcp_connecter_t ();$/;"	p	class:zmq::tcp_connecter_t	access:public	signature:()
~tcp_listener_t	.\src\tcp_listener.cpp	/^zmq::tcp_listener_t::~tcp_listener_t ()$/;"	f	class:zmq::tcp_listener_t	signature:()
~tcp_listener_t	.\src\tcp_listener.hpp	/^        ~tcp_listener_t ();$/;"	p	class:zmq::tcp_listener_t	access:public	signature:()
~trie_t	.\src\trie.cpp	/^zmq::trie_t::~trie_t ()$/;"	f	class:zmq::trie_t	signature:()
~trie_t	.\src\trie.hpp	/^        ~trie_t ();$/;"	p	class:zmq::trie_t	access:public	signature:()
~v1_decoder_t	.\src\v1_decoder.cpp	/^zmq::v1_decoder_t::~v1_decoder_t ()$/;"	f	class:zmq::v1_decoder_t	signature:()
~v1_decoder_t	.\src\v1_decoder.hpp	/^        virtual ~v1_decoder_t ();$/;"	p	class:zmq::v1_decoder_t	access:public	signature:()
~v1_encoder_t	.\src\v1_encoder.cpp	/^zmq::v1_encoder_t::~v1_encoder_t ()$/;"	f	class:zmq::v1_encoder_t	signature:()
~v1_encoder_t	.\src\v1_encoder.hpp	/^        virtual ~v1_encoder_t ();$/;"	p	class:zmq::v1_encoder_t	access:public	signature:()
~xpub_session_t	.\src\xpub.cpp	/^zmq::xpub_session_t::~xpub_session_t ()$/;"	f	class:zmq::xpub_session_t	signature:()
~xpub_session_t	.\src\xpub.hpp	/^        ~xpub_session_t ();$/;"	p	class:zmq::xpub_session_t	access:public	signature:()
~xpub_t	.\src\xpub.cpp	/^zmq::xpub_t::~xpub_t ()$/;"	f	class:zmq::xpub_t	signature:()
~xpub_t	.\src\xpub.hpp	/^        ~xpub_t ();$/;"	p	class:zmq::xpub_t	access:public	signature:()
~xsub_session_t	.\src\xsub.cpp	/^zmq::xsub_session_t::~xsub_session_t ()$/;"	f	class:zmq::xsub_session_t	signature:()
~xsub_session_t	.\src\xsub.hpp	/^        ~xsub_session_t ();$/;"	p	class:zmq::xsub_session_t	access:public	signature:()
~xsub_t	.\src\xsub.cpp	/^zmq::xsub_t::~xsub_t ()$/;"	f	class:zmq::xsub_t	signature:()
~xsub_t	.\src\xsub.hpp	/^        ~xsub_t ();$/;"	p	class:zmq::xsub_t	access:public	signature:()
~ypipe_t	.\src\ypipe.hpp	/^        inline virtual ~ypipe_t ()$/;"	f	class:zmq::ypipe_t	access:public	signature:()
~yqueue_t	.\src\yqueue.hpp	/^        inline ~yqueue_t ()$/;"	f	class:zmq::yqueue_t	access:public	signature:()
